// -*- C++ -*-
#ifndef CMS3_H
#define CMS3_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with the command
// makeCMS3ClassFiles("", "Events", "CMS3", "tas", "cms3")

using namespace std; 
class CMS3 {
private: 
protected: 
	unsigned int index;
	vector<string> genweightsID_;
	TBranch *genweightsID_branch;
	bool genweightsID_isLoaded;
	TBits hlt_bits_;
	TBranch *hlt_bits_branch;
	bool hlt_bits_isLoaded;
	vector<TString> evt_CMS3tag_;
	TBranch *evt_CMS3tag_branch;
	bool evt_CMS3tag_isLoaded;
	vector<TString> evt_dataset_;
	TBranch *evt_dataset_branch;
	bool evt_dataset_isLoaded;
	vector<TString> hlt_trigNames_;
	TBranch *hlt_trigNames_branch;
	bool hlt_trigNames_isLoaded;
	vector<TString> pfjets_bDiscriminatorNames_;
	TBranch *pfjets_bDiscriminatorNames_branch;
	bool pfjets_bDiscriminatorNames_isLoaded;
	vector<TString> pfjets_puppi_bDiscriminatorNames_;
	TBranch *pfjets_puppi_bDiscriminatorNames_branch;
	bool pfjets_puppi_bDiscriminatorNames_isLoaded;
	vector<TString> taus_pf_IDnames_;
	TBranch *taus_pf_IDnames_branch;
	bool taus_pf_IDnames_isLoaded;
	vector<TString> sparm_comment_;
	TBranch *sparm_comment_branch;
	bool sparm_comment_isLoaded;
	vector<TString> sparm_names_;
	TBranch *sparm_names_branch;
	bool sparm_names_isLoaded;
	vector<vector<TString> > hlt_trigObjs_filters_;
	TBranch *hlt_trigObjs_filters_branch;
	bool hlt_trigObjs_filters_isLoaded;
	bool hcalnoise_HasBadRBXRechitR45Loose_;
	TBranch *hcalnoise_HasBadRBXRechitR45Loose_branch;
	bool hcalnoise_HasBadRBXRechitR45Loose_isLoaded;
	bool hcalnoise_HasBadRBXRechitR45Tight_;
	TBranch *hcalnoise_HasBadRBXRechitR45Tight_branch;
	bool hcalnoise_HasBadRBXRechitR45Tight_isLoaded;
	bool hcalnoise_HasBadRBXTS4TS5_;
	TBranch *hcalnoise_HasBadRBXTS4TS5_branch;
	bool hcalnoise_HasBadRBXTS4TS5_isLoaded;
	bool hcalnoise_goodJetFoundInLowBVRegion_;
	TBranch *hcalnoise_goodJetFoundInLowBVRegion_branch;
	bool hcalnoise_goodJetFoundInLowBVRegion_isLoaded;
	bool evt_cscTightHaloId_;
	TBranch *evt_cscTightHaloId_branch;
	bool evt_cscTightHaloId_isLoaded;
	bool evt_hbheFilter_;
	TBranch *evt_hbheFilter_branch;
	bool evt_hbheFilter_isLoaded;
	bool filt_cscBeamHalo_;
	TBranch *filt_cscBeamHalo_branch;
	bool filt_cscBeamHalo_isLoaded;
	bool filt_ecalLaser_;
	TBranch *filt_ecalLaser_branch;
	bool filt_ecalLaser_isLoaded;
	bool filt_ecalTP_;
	TBranch *filt_ecalTP_branch;
	bool filt_ecalTP_isLoaded;
	bool filt_eeBadSc_;
	TBranch *filt_eeBadSc_branch;
	bool filt_eeBadSc_isLoaded;
	bool filt_goodVertices_;
	TBranch *filt_goodVertices_branch;
	bool filt_goodVertices_isLoaded;
	bool filt_hbheNoise_;
	TBranch *filt_hbheNoise_branch;
	bool filt_hbheNoise_isLoaded;
	bool filt_hcalLaser_;
	TBranch *filt_hcalLaser_branch;
	bool filt_hcalLaser_isLoaded;
	bool filt_metfilter_;
	TBranch *filt_metfilter_branch;
	bool filt_metfilter_isLoaded;
	bool filt_trackingFailure_;
	TBranch *filt_trackingFailure_branch;
	bool filt_trackingFailure_isLoaded;
	bool filt_trkPOGFilters_;
	TBranch *filt_trkPOGFilters_branch;
	bool filt_trkPOGFilters_isLoaded;
	bool filt_trkPOG_logErrorTooManyClusters_;
	TBranch *filt_trkPOG_logErrorTooManyClusters_branch;
	bool filt_trkPOG_logErrorTooManyClusters_isLoaded;
	bool filt_trkPOG_manystripclus53X_;
	TBranch *filt_trkPOG_manystripclus53X_branch;
	bool filt_trkPOG_manystripclus53X_isLoaded;
	bool filt_trkPOG_toomanystripclus53X_;
	TBranch *filt_trkPOG_toomanystripclus53X_branch;
	bool filt_trkPOG_toomanystripclus53X_isLoaded;
	vector<bool> els_conv_vtx_flag_;
	TBranch *els_conv_vtx_flag_branch;
	bool els_conv_vtx_flag_isLoaded;
	vector<bool> els_isGsfCtfScPixChargeConsistent_;
	TBranch *els_isGsfCtfScPixChargeConsistent_branch;
	bool els_isGsfCtfScPixChargeConsistent_isLoaded;
	vector<bool> els_passingMvaPreselection_;
	TBranch *els_passingMvaPreselection_branch;
	bool els_passingMvaPreselection_isLoaded;
	vector<bool> els_passingPflowPreselection_;
	TBranch *els_passingPflowPreselection_branch;
	bool els_passingPflowPreselection_isLoaded;
	vector<bool> genps_fromHardProcessBeforeFSR_;
	TBranch *genps_fromHardProcessBeforeFSR_branch;
	bool genps_fromHardProcessBeforeFSR_isLoaded;
	vector<bool> genps_fromHardProcessDecayed_;
	TBranch *genps_fromHardProcessDecayed_branch;
	bool genps_fromHardProcessDecayed_isLoaded;
	vector<bool> genps_fromHardProcessFinalState_;
	TBranch *genps_fromHardProcessFinalState_branch;
	bool genps_fromHardProcessFinalState_isLoaded;
	vector<bool> genps_isDirectHardProcessTauDecayProductFinalState_;
	TBranch *genps_isDirectHardProcessTauDecayProductFinalState_branch;
	bool genps_isDirectHardProcessTauDecayProductFinalState_isLoaded;
	vector<bool> genps_isDirectPromptTauDecayProductFinalState_;
	TBranch *genps_isDirectPromptTauDecayProductFinalState_branch;
	bool genps_isDirectPromptTauDecayProductFinalState_isLoaded;
	vector<bool> genps_isHardProcess_;
	TBranch *genps_isHardProcess_branch;
	bool genps_isHardProcess_isLoaded;
	vector<bool> genps_isLastCopy_;
	TBranch *genps_isLastCopy_branch;
	bool genps_isLastCopy_isLoaded;
	vector<bool> genps_isLastCopyBeforeFSR_;
	TBranch *genps_isLastCopyBeforeFSR_branch;
	bool genps_isLastCopyBeforeFSR_isLoaded;
	vector<bool> genps_isMostlyLikePythia6Status3_;
	TBranch *genps_isMostlyLikePythia6Status3_branch;
	bool genps_isMostlyLikePythia6Status3_isLoaded;
	vector<bool> genps_isPromptDecayed_;
	TBranch *genps_isPromptDecayed_branch;
	bool genps_isPromptDecayed_isLoaded;
	vector<bool> genps_isPromptFinalState_;
	TBranch *genps_isPromptFinalState_branch;
	bool genps_isPromptFinalState_isLoaded;
	vector<bool> mus_isRPCMuon_;
	TBranch *mus_isRPCMuon_branch;
	bool mus_isRPCMuon_isLoaded;
	vector<bool> mus_tightMatch_;
	TBranch *mus_tightMatch_branch;
	bool mus_tightMatch_isLoaded;
	vector<bool> mus_updatedSta_;
	TBranch *mus_updatedSta_branch;
	bool mus_updatedSta_isLoaded;
	vector<bool> pfcands_isGlobalMuon_;
	TBranch *pfcands_isGlobalMuon_branch;
	bool pfcands_isGlobalMuon_isLoaded;
	vector<bool> pfcands_isStandAloneMuon_;
	TBranch *pfcands_isStandAloneMuon_branch;
	bool pfcands_isStandAloneMuon_isLoaded;
	vector<bool> photons_haspixelSeed_;
	TBranch *photons_haspixelSeed_branch;
	bool photons_haspixelSeed_isLoaded;
	vector<bool> photons_passElectronVeto_;
	TBranch *photons_passElectronVeto_branch;
	bool photons_passElectronVeto_isLoaded;
	vector<vector<bool> > hlt_trigObjs_passLast_;
	TBranch *hlt_trigObjs_passLast_branch;
	bool hlt_trigObjs_passLast_isLoaded;
	float evt_METToolbox_pfmet_;
	TBranch *evt_METToolbox_pfmet_branch;
	bool evt_METToolbox_pfmet_isLoaded;
	float evt_METToolbox_pfmetPhi_;
	TBranch *evt_METToolbox_pfmetPhi_branch;
	bool evt_METToolbox_pfmetPhi_isLoaded;
	float evt_METToolbox_pfmetPhi_raw_;
	TBranch *evt_METToolbox_pfmetPhi_raw_branch;
	bool evt_METToolbox_pfmetPhi_raw_isLoaded;
	float evt_METToolbox_pfmet_raw_;
	TBranch *evt_METToolbox_pfmet_raw_branch;
	bool evt_METToolbox_pfmet_raw_isLoaded;
	float evt_METToolboxNoHF_pfmet_;
	TBranch *evt_METToolboxNoHF_pfmet_branch;
	bool evt_METToolboxNoHF_pfmet_isLoaded;
	float evt_METToolboxNoHF_pfmetPhi_;
	TBranch *evt_METToolboxNoHF_pfmetPhi_branch;
	bool evt_METToolboxNoHF_pfmetPhi_isLoaded;
	float evt_METToolboxNoHF_pfmetPhi_raw_;
	TBranch *evt_METToolboxNoHF_pfmetPhi_raw_branch;
	bool evt_METToolboxNoHF_pfmetPhi_raw_isLoaded;
	float evt_METToolboxNoHF_pfmet_raw_;
	TBranch *evt_METToolboxNoHF_pfmet_raw_branch;
	bool evt_METToolboxNoHF_pfmet_raw_isLoaded;
	float evt_bs_Xwidth_;
	TBranch *evt_bs_Xwidth_branch;
	bool evt_bs_Xwidth_isLoaded;
	float evt_bs_XwidthErr_;
	TBranch *evt_bs_XwidthErr_branch;
	bool evt_bs_XwidthErr_isLoaded;
	float evt_bs_Ywidth_;
	TBranch *evt_bs_Ywidth_branch;
	bool evt_bs_Ywidth_isLoaded;
	float evt_bs_YwidthErr_;
	TBranch *evt_bs_YwidthErr_branch;
	bool evt_bs_YwidthErr_isLoaded;
	float evt_bs_dxdz_;
	TBranch *evt_bs_dxdz_branch;
	bool evt_bs_dxdz_isLoaded;
	float evt_bs_dxdzErr_;
	TBranch *evt_bs_dxdzErr_branch;
	bool evt_bs_dxdzErr_isLoaded;
	float evt_bs_dydz_;
	TBranch *evt_bs_dydz_branch;
	bool evt_bs_dydz_isLoaded;
	float evt_bs_dydzErr_;
	TBranch *evt_bs_dydzErr_branch;
	bool evt_bs_dydzErr_isLoaded;
	float evt_bs_sigmaZ_;
	TBranch *evt_bs_sigmaZ_branch;
	bool evt_bs_sigmaZ_isLoaded;
	float evt_bs_sigmaZErr_;
	TBranch *evt_bs_sigmaZErr_branch;
	bool evt_bs_sigmaZErr_isLoaded;
	float evt_bs_xErr_;
	TBranch *evt_bs_xErr_branch;
	bool evt_bs_xErr_isLoaded;
	float evt_bs_yErr_;
	TBranch *evt_bs_yErr_branch;
	bool evt_bs_yErr_isLoaded;
	float evt_bs_zErr_;
	TBranch *evt_bs_zErr_branch;
	bool evt_bs_zErr_isLoaded;
	float evt_bField_;
	TBranch *evt_bField_branch;
	bool evt_bField_isLoaded;
	float evt_fixgrid_all_rho_;
	TBranch *evt_fixgrid_all_rho_branch;
	bool evt_fixgrid_all_rho_isLoaded;
	float evt_fixgridfastjet_allcalo_rho_;
	TBranch *evt_fixgridfastjet_allcalo_rho_branch;
	bool evt_fixgridfastjet_allcalo_rho_isLoaded;
	float evt_fixgridfastjet_all_rho_;
	TBranch *evt_fixgridfastjet_all_rho_branch;
	bool evt_fixgridfastjet_all_rho_isLoaded;
	float evt_fixgridfastjetMETTools_all_rho_;
	TBranch *evt_fixgridfastjetMETTools_all_rho_branch;
	bool evt_fixgridfastjetMETTools_all_rho_isLoaded;
	float evt_fixgridfastjet_centralcalo_rho_;
	TBranch *evt_fixgridfastjet_centralcalo_rho_branch;
	bool evt_fixgridfastjet_centralcalo_rho_isLoaded;
	float evt_fixgridfastjet_centralchargedpileup_rho_;
	TBranch *evt_fixgridfastjet_centralchargedpileup_rho_branch;
	bool evt_fixgridfastjet_centralchargedpileup_rho_isLoaded;
	float evt_fixgridfastjet_centralneutral_rho_;
	TBranch *evt_fixgridfastjet_centralneutral_rho_branch;
	bool evt_fixgridfastjet_centralneutral_rho_isLoaded;
	float	evt_kfactor_;
	TBranch *evt_kfactor_branch;
	bool evt_kfactor_isLoaded;
	float	evt_scale1fb_;
	TBranch *evt_scale1fb_branch;
	bool evt_scale1fb_isLoaded;
	float	evt_xsec_excl_;
	TBranch *evt_xsec_excl_branch;
	bool evt_xsec_excl_isLoaded;
	float	evt_xsec_incl_;
	TBranch *evt_xsec_incl_branch;
	bool evt_xsec_incl_isLoaded;
	float genps_alphaQCD_;
	TBranch *genps_alphaQCD_branch;
	bool genps_alphaQCD_isLoaded;
	float genps_pthat_;
	TBranch *genps_pthat_branch;
	bool genps_pthat_isLoaded;
	float genps_qScale_;
	TBranch *genps_qScale_branch;
	bool genps_qScale_isLoaded;
	float genps_weight_;
	TBranch *genps_weight_branch;
	bool genps_weight_isLoaded;
	float gen_sumEt_;
	TBranch *gen_sumEt_branch;
	bool gen_sumEt_isLoaded;
	float hcalnoise_GetRecHitEnergy_;
	TBranch *hcalnoise_GetRecHitEnergy_branch;
	bool hcalnoise_GetRecHitEnergy_isLoaded;
	float hcalnoise_GetRecHitEnergy15_;
	TBranch *hcalnoise_GetRecHitEnergy15_branch;
	bool hcalnoise_GetRecHitEnergy15_isLoaded;
	float hcalnoise_GetTotalCalibCharge_;
	TBranch *hcalnoise_GetTotalCalibCharge_branch;
	bool hcalnoise_GetTotalCalibCharge_isLoaded;
	float hcalnoise_NegativeNoiseSumE_;
	TBranch *hcalnoise_NegativeNoiseSumE_branch;
	bool hcalnoise_NegativeNoiseSumE_isLoaded;
	float hcalnoise_NegativeNoiseSumEt_;
	TBranch *hcalnoise_NegativeNoiseSumEt_branch;
	bool hcalnoise_NegativeNoiseSumEt_isLoaded;
	float hcalnoise_TS4TS5NoiseSumE_;
	TBranch *hcalnoise_TS4TS5NoiseSumE_branch;
	bool hcalnoise_TS4TS5NoiseSumE_isLoaded;
	float hcalnoise_TS4TS5NoiseSumEt_;
	TBranch *hcalnoise_TS4TS5NoiseSumEt_branch;
	bool hcalnoise_TS4TS5NoiseSumEt_isLoaded;
	float hcalnoise_eventChargeFraction_;
	TBranch *hcalnoise_eventChargeFraction_branch;
	bool hcalnoise_eventChargeFraction_isLoaded;
	float hcalnoise_eventEMEnergy_;
	TBranch *hcalnoise_eventEMEnergy_branch;
	bool hcalnoise_eventEMEnergy_isLoaded;
	float hcalnoise_eventEMFraction_;
	TBranch *hcalnoise_eventEMFraction_branch;
	bool hcalnoise_eventEMFraction_isLoaded;
	float hcalnoise_eventHadEnergy_;
	TBranch *hcalnoise_eventHadEnergy_branch;
	bool hcalnoise_eventHadEnergy_isLoaded;
	float hcalnoise_eventTrackEnergy_;
	TBranch *hcalnoise_eventTrackEnergy_branch;
	bool hcalnoise_eventTrackEnergy_isLoaded;
	float hcalnoise_flatNoiseSumE_;
	TBranch *hcalnoise_flatNoiseSumE_branch;
	bool hcalnoise_flatNoiseSumE_isLoaded;
	float hcalnoise_flatNoiseSumEt_;
	TBranch *hcalnoise_flatNoiseSumEt_branch;
	bool hcalnoise_flatNoiseSumEt_isLoaded;
	float hcalnoise_isolatedNoiseSumE_;
	TBranch *hcalnoise_isolatedNoiseSumE_branch;
	bool hcalnoise_isolatedNoiseSumE_isLoaded;
	float hcalnoise_isolatedNoiseSumEt_;
	TBranch *hcalnoise_isolatedNoiseSumEt_branch;
	bool hcalnoise_isolatedNoiseSumEt_isLoaded;
	float hcalnoise_max10GeVHitTime_;
	TBranch *hcalnoise_max10GeVHitTime_branch;
	bool hcalnoise_max10GeVHitTime_isLoaded;
	float hcalnoise_max25GeVHitTime_;
	TBranch *hcalnoise_max25GeVHitTime_branch;
	bool hcalnoise_max25GeVHitTime_isLoaded;
	float hcalnoise_maxE10TS_;
	TBranch *hcalnoise_maxE10TS_branch;
	bool hcalnoise_maxE10TS_isLoaded;
	float hcalnoise_maxE2Over10TS_;
	TBranch *hcalnoise_maxE2Over10TS_branch;
	bool hcalnoise_maxE2Over10TS_isLoaded;
	float hcalnoise_maxE2TS_;
	TBranch *hcalnoise_maxE2TS_branch;
	bool hcalnoise_maxE2TS_isLoaded;
	float hcalnoise_min10GeVHitTime_;
	TBranch *hcalnoise_min10GeVHitTime_branch;
	bool hcalnoise_min10GeVHitTime_isLoaded;
	float hcalnoise_min25GeVHitTime_;
	TBranch *hcalnoise_min25GeVHitTime_branch;
	bool hcalnoise_min25GeVHitTime_isLoaded;
	float hcalnoise_minE10TS_;
	TBranch *hcalnoise_minE10TS_branch;
	bool hcalnoise_minE10TS_isLoaded;
	float hcalnoise_minE2Over10TS_;
	TBranch *hcalnoise_minE2Over10TS_branch;
	bool hcalnoise_minE2Over10TS_isLoaded;
	float hcalnoise_minE2TS_;
	TBranch *hcalnoise_minE2TS_branch;
	bool hcalnoise_minE2TS_isLoaded;
	float hcalnoise_minHPDEMF_;
	TBranch *hcalnoise_minHPDEMF_branch;
	bool hcalnoise_minHPDEMF_isLoaded;
	float hcalnoise_minRBXEMF_;
	TBranch *hcalnoise_minRBXEMF_branch;
	bool hcalnoise_minRBXEMF_isLoaded;
	float hcalnoise_rms10GeVHitTime_;
	TBranch *hcalnoise_rms10GeVHitTime_branch;
	bool hcalnoise_rms10GeVHitTime_isLoaded;
	float hcalnoise_rms25GeVHitTime_;
	TBranch *hcalnoise_rms25GeVHitTime_branch;
	bool hcalnoise_rms25GeVHitTime_isLoaded;
	float hcalnoise_spikeNoiseSumE_;
	TBranch *hcalnoise_spikeNoiseSumE_branch;
	bool hcalnoise_spikeNoiseSumE_isLoaded;
	float hcalnoise_spikeNoiseSumEt_;
	TBranch *hcalnoise_spikeNoiseSumEt_branch;
	bool hcalnoise_spikeNoiseSumEt_isLoaded;
	float hcalnoise_triangleNoiseSumE_;
	TBranch *hcalnoise_triangleNoiseSumE_branch;
	bool hcalnoise_triangleNoiseSumE_isLoaded;
	float hcalnoise_triangleNoiseSumEt_;
	TBranch *hcalnoise_triangleNoiseSumEt_branch;
	bool hcalnoise_triangleNoiseSumEt_isLoaded;
	float pdfinfo_pdf1_;
	TBranch *pdfinfo_pdf1_branch;
	bool pdfinfo_pdf1_isLoaded;
	float pdfinfo_pdf2_;
	TBranch *pdfinfo_pdf2_branch;
	bool pdfinfo_pdf2_isLoaded;
	float pdfinfo_scale_;
	TBranch *pdfinfo_scale_branch;
	bool pdfinfo_scale_isLoaded;
	float pdfinfo_x1_;
	TBranch *pdfinfo_x1_branch;
	bool pdfinfo_x1_isLoaded;
	float pdfinfo_x2_;
	TBranch *pdfinfo_x2_branch;
	bool pdfinfo_x2_isLoaded;
	float evt_fixgrid_rho_all_;
	TBranch *evt_fixgrid_rho_all_branch;
	bool evt_fixgrid_rho_all_isLoaded;
	float evt_fixgrid_rho_ctr_;
	TBranch *evt_fixgrid_rho_ctr_branch;
	bool evt_fixgrid_rho_ctr_isLoaded;
	float evt_fixgrid_rho_fwd_;
	TBranch *evt_fixgrid_rho_fwd_branch;
	bool evt_fixgrid_rho_fwd_isLoaded;
	float evt_calomet_;
	TBranch *evt_calomet_branch;
	bool evt_calomet_isLoaded;
	float evt_calometPhi_;
	TBranch *evt_calometPhi_branch;
	bool evt_calometPhi_isLoaded;
	float evt_pfmet_;
	TBranch *evt_pfmet_branch;
	bool evt_pfmet_isLoaded;
	float evt_pfmetPhi_;
	TBranch *evt_pfmetPhi_branch;
	bool evt_pfmetPhi_isLoaded;
	float evt_pfmetPhi_raw_;
	TBranch *evt_pfmetPhi_raw_branch;
	bool evt_pfmetPhi_raw_isLoaded;
	float evt_pfmetSig_;
	TBranch *evt_pfmetSig_branch;
	bool evt_pfmetSig_isLoaded;
	float evt_pfmet_raw_;
	TBranch *evt_pfmet_raw_branch;
	bool evt_pfmet_raw_isLoaded;
	float evt_pfsumet_;
	TBranch *evt_pfsumet_branch;
	bool evt_pfsumet_isLoaded;
	float evt_pfsumet_raw_;
	TBranch *evt_pfsumet_raw_branch;
	bool evt_pfsumet_raw_isLoaded;
	float gen_met_;
	TBranch *gen_met_branch;
	bool gen_met_isLoaded;
	float gen_metPhi_;
	TBranch *gen_metPhi_branch;
	bool gen_metPhi_isLoaded;
	float evt_NoHF_calomet_;
	TBranch *evt_NoHF_calomet_branch;
	bool evt_NoHF_calomet_isLoaded;
	float evt_NoHF_calometPhi_;
	TBranch *evt_NoHF_calometPhi_branch;
	bool evt_NoHF_calometPhi_isLoaded;
	float evt_NoHF_pfmet_;
	TBranch *evt_NoHF_pfmet_branch;
	bool evt_NoHF_pfmet_isLoaded;
	float evt_NoHF_pfmetPhi_;
	TBranch *evt_NoHF_pfmetPhi_branch;
	bool evt_NoHF_pfmetPhi_isLoaded;
	float evt_NoHF_pfmetPhi_raw_;
	TBranch *evt_NoHF_pfmetPhi_raw_branch;
	bool evt_NoHF_pfmetPhi_raw_isLoaded;
	float evt_NoHF_pfmetSig_;
	TBranch *evt_NoHF_pfmetSig_branch;
	bool evt_NoHF_pfmetSig_isLoaded;
	float evt_NoHF_pfmet_raw_;
	TBranch *evt_NoHF_pfmet_raw_branch;
	bool evt_NoHF_pfmet_raw_isLoaded;
	float evt_NoHF_pfsumet_;
	TBranch *evt_NoHF_pfsumet_branch;
	bool evt_NoHF_pfsumet_isLoaded;
	float evt_NoHF_pfsumet_raw_;
	TBranch *evt_NoHF_pfsumet_raw_branch;
	bool evt_NoHF_pfsumet_raw_isLoaded;
	float evt_puppi_calomet_;
	TBranch *evt_puppi_calomet_branch;
	bool evt_puppi_calomet_isLoaded;
	float evt_puppi_calometPhi_;
	TBranch *evt_puppi_calometPhi_branch;
	bool evt_puppi_calometPhi_isLoaded;
	float evt_puppi_pfmet_;
	TBranch *evt_puppi_pfmet_branch;
	bool evt_puppi_pfmet_isLoaded;
	float evt_puppi_pfmetPhi_;
	TBranch *evt_puppi_pfmetPhi_branch;
	bool evt_puppi_pfmetPhi_isLoaded;
	float evt_puppi_pfmetPhi_raw_;
	TBranch *evt_puppi_pfmetPhi_raw_branch;
	bool evt_puppi_pfmetPhi_raw_isLoaded;
	float evt_puppi_pfmetSig_;
	TBranch *evt_puppi_pfmetSig_branch;
	bool evt_puppi_pfmetSig_isLoaded;
	float evt_puppi_pfmet_raw_;
	TBranch *evt_puppi_pfmet_raw_branch;
	bool evt_puppi_pfmet_raw_isLoaded;
	float evt_puppi_pfsumet_;
	TBranch *evt_puppi_pfsumet_branch;
	bool evt_puppi_pfsumet_isLoaded;
	float evt_puppi_pfsumet_raw_;
	TBranch *evt_puppi_pfsumet_raw_branch;
	bool evt_puppi_pfsumet_raw_isLoaded;
	float sparm_filterEfficiency_;
	TBranch *sparm_filterEfficiency_branch;
	bool sparm_filterEfficiency_isLoaded;
	float sparm_pdfScale_;
	TBranch *sparm_pdfScale_branch;
	bool sparm_pdfScale_isLoaded;
	float sparm_pdfWeight1_;
	TBranch *sparm_pdfWeight1_branch;
	bool sparm_pdfWeight1_isLoaded;
	float sparm_pdfWeight2_;
	TBranch *sparm_pdfWeight2_branch;
	bool sparm_pdfWeight2_isLoaded;
	float sparm_weight_;
	TBranch *sparm_weight_branch;
	bool sparm_weight_isLoaded;
	float sparm_xsec_;
	TBranch *sparm_xsec_branch;
	bool sparm_xsec_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> >  evt_bsp4_;
	TBranch *evt_bsp4_branch;
	bool evt_bsp4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_METToolbox_p4_;
	TBranch *pfjets_METToolbox_p4_branch;
	bool pfjets_METToolbox_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > ak8jets_mc_gp_p4_;
	TBranch *ak8jets_mc_gp_p4_branch;
	bool ak8jets_mc_gp_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > ak8jets_mc_p4_;
	TBranch *ak8jets_mc_p4_branch;
	bool ak8jets_mc_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_mc_motherp4_;
	TBranch *els_mc_motherp4_branch;
	bool els_mc_motherp4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_mc_p4_;
	TBranch *els_mc_p4_branch;
	bool els_mc_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_mc_motherp4_;
	TBranch *mus_mc_motherp4_branch;
	bool mus_mc_motherp4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_mc_p4_;
	TBranch *mus_mc_p4_branch;
	bool mus_mc_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_mc_gp_p4_;
	TBranch *pfjets_mc_gp_p4_branch;
	bool pfjets_mc_gp_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_mc_motherp4_;
	TBranch *pfjets_mc_motherp4_branch;
	bool pfjets_mc_motherp4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_mc_p4_;
	TBranch *pfjets_mc_p4_branch;
	bool pfjets_mc_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > photons_mc_motherp4_;
	TBranch *photons_mc_motherp4_branch;
	bool photons_mc_motherp4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > photons_mc_p4_;
	TBranch *photons_mc_p4_branch;
	bool photons_mc_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_mc_patMatch_p4_;
	TBranch *els_mc_patMatch_p4_branch;
	bool els_mc_patMatch_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_p4_;
	TBranch *els_p4_branch;
	bool els_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_p4In_;
	TBranch *els_p4In_branch;
	bool els_p4In_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_p4Out_;
	TBranch *els_p4Out_branch;
	bool els_p4Out_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_trk_p4_;
	TBranch *els_trk_p4_branch;
	bool els_trk_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_trk_vertex_p4_;
	TBranch *els_trk_vertex_p4_branch;
	bool els_trk_vertex_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_vertex_p4_;
	TBranch *els_vertex_p4_branch;
	bool els_vertex_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > genjets_p4NoMuNoNu_;
	TBranch *genjets_p4NoMuNoNu_branch;
	bool genjets_p4NoMuNoNu_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > genps_p4_;
	TBranch *genps_p4_branch;
	bool genps_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > genps_prod_vtx_;
	TBranch *genps_prod_vtx_branch;
	bool genps_prod_vtx_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > hyp_ll_p4_;
	TBranch *hyp_ll_p4_branch;
	bool hyp_ll_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > hyp_lt_p4_;
	TBranch *hyp_lt_p4_branch;
	bool hyp_lt_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > hyp_p4_;
	TBranch *hyp_p4_branch;
	bool hyp_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > isotracks_p4_;
	TBranch *isotracks_p4_branch;
	bool isotracks_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_gfit_p4_;
	TBranch *mus_gfit_p4_branch;
	bool mus_gfit_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_gfit_vertex_p4_;
	TBranch *mus_gfit_vertex_p4_branch;
	bool mus_gfit_vertex_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_mc_patMatch_p4_;
	TBranch *mus_mc_patMatch_p4_branch;
	bool mus_mc_patMatch_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_p4_;
	TBranch *mus_p4_branch;
	bool mus_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_pfp4_;
	TBranch *mus_pfp4_branch;
	bool mus_pfp4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_sta_p4_;
	TBranch *mus_sta_p4_branch;
	bool mus_sta_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_sta_vertex_p4_;
	TBranch *mus_sta_vertex_p4_branch;
	bool mus_sta_vertex_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_trk_p4_;
	TBranch *mus_trk_p4_branch;
	bool mus_trk_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_vertex_p4_;
	TBranch *mus_vertex_p4_branch;
	bool mus_vertex_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfcands_p4_;
	TBranch *pfcands_p4_branch;
	bool pfcands_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_p4_;
	TBranch *pfjets_p4_branch;
	bool pfjets_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_puppi_p4_;
	TBranch *pfjets_puppi_p4_branch;
	bool pfjets_puppi_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > taus_pf_lead_chargecand_p4_;
	TBranch *taus_pf_lead_chargecand_p4_branch;
	bool taus_pf_lead_chargecand_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > taus_pf_lead_neutrcand_p4_;
	TBranch *taus_pf_lead_neutrcand_p4_branch;
	bool taus_pf_lead_neutrcand_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > taus_pf_p4_;
	TBranch *taus_pf_p4_branch;
	bool taus_pf_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > photons_p4_;
	TBranch *photons_p4_branch;
	bool photons_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > svs_p4_;
	TBranch *svs_p4_branch;
	bool svs_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > svs_position_;
	TBranch *svs_position_branch;
	bool svs_position_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > ak8jets_p4_;
	TBranch *ak8jets_p4_branch;
	bool ak8jets_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > vtxs_position_;
	TBranch *vtxs_position_branch;
	bool vtxs_position_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > genps_lepdaughter_p4_;
	TBranch *genps_lepdaughter_p4_branch;
	bool genps_lepdaughter_p4_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > hlt_trigObjs_p4_;
	TBranch *hlt_trigObjs_p4_branch;
	bool hlt_trigObjs_p4_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > taus_pf_isocands_p4_;
	TBranch *taus_pf_isocands_p4_branch;
	bool taus_pf_isocands_p4_isLoaded;
	vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > taus_pf_signalcands_p4_;
	TBranch *taus_pf_signalcands_p4_branch;
	bool taus_pf_signalcands_p4_isLoaded;
	vector<float> pfjets_METToolbox_area_;
	TBranch *pfjets_METToolbox_area_branch;
	bool pfjets_METToolbox_area_isLoaded;
	vector<float> pfjets_METToolbox_chargedEmE_;
	TBranch *pfjets_METToolbox_chargedEmE_branch;
	bool pfjets_METToolbox_chargedEmE_isLoaded;
	vector<float> pfjets_METToolbox_chargedHadronE_;
	TBranch *pfjets_METToolbox_chargedHadronE_branch;
	bool pfjets_METToolbox_chargedHadronE_isLoaded;
	vector<float> pfjets_METToolbox_electronE_;
	TBranch *pfjets_METToolbox_electronE_branch;
	bool pfjets_METToolbox_electronE_isLoaded;
	vector<float> pfjets_METToolbox_hfEmE_;
	TBranch *pfjets_METToolbox_hfEmE_branch;
	bool pfjets_METToolbox_hfEmE_isLoaded;
	vector<float> pfjets_METToolbox_hfHadronE_;
	TBranch *pfjets_METToolbox_hfHadronE_branch;
	bool pfjets_METToolbox_hfHadronE_isLoaded;
	vector<float> pfjets_METToolbox_mass_;
	TBranch *pfjets_METToolbox_mass_branch;
	bool pfjets_METToolbox_mass_isLoaded;
	vector<float> pfjets_METToolbox_muonE_;
	TBranch *pfjets_METToolbox_muonE_branch;
	bool pfjets_METToolbox_muonE_isLoaded;
	vector<float> pfjets_METToolbox_neutralEmE_;
	TBranch *pfjets_METToolbox_neutralEmE_branch;
	bool pfjets_METToolbox_neutralEmE_isLoaded;
	vector<float> pfjets_METToolbox_neutralHadronE_;
	TBranch *pfjets_METToolbox_neutralHadronE_branch;
	bool pfjets_METToolbox_neutralHadronE_isLoaded;
	vector<float> pfjets_METToolbox_photonE_;
	TBranch *pfjets_METToolbox_photonE_branch;
	bool pfjets_METToolbox_photonE_isLoaded;
	vector<float> evt_bs_covMatrix_;
	TBranch *evt_bs_covMatrix_branch;
	bool evt_bs_covMatrix_isLoaded;
	vector<float> els_mc3dr_;
	TBranch *els_mc3dr_branch;
	bool els_mc3dr_isLoaded;
	vector<float> els_mcdr_;
	TBranch *els_mcdr_branch;
	bool els_mcdr_isLoaded;
	vector<float> mus_mc3dr_;
	TBranch *mus_mc3dr_branch;
	bool mus_mc3dr_isLoaded;
	vector<float> mus_mcdr_;
	TBranch *mus_mcdr_branch;
	bool mus_mcdr_isLoaded;
	vector<float> pfjets_mc3dr_;
	TBranch *pfjets_mc3dr_branch;
	bool pfjets_mc3dr_isLoaded;
	vector<float> pfjets_mcdr_;
	TBranch *pfjets_mcdr_branch;
	bool pfjets_mcdr_isLoaded;
	vector<float> pfjets_mc_emEnergy_;
	TBranch *pfjets_mc_emEnergy_branch;
	bool pfjets_mc_emEnergy_isLoaded;
	vector<float> pfjets_mc_gpdr_;
	TBranch *pfjets_mc_gpdr_branch;
	bool pfjets_mc_gpdr_isLoaded;
	vector<float> pfjets_mc_hadEnergy_;
	TBranch *pfjets_mc_hadEnergy_branch;
	bool pfjets_mc_hadEnergy_isLoaded;
	vector<float> pfjets_mc_invEnergy_;
	TBranch *pfjets_mc_invEnergy_branch;
	bool pfjets_mc_invEnergy_isLoaded;
	vector<float> pfjets_mc_otherEnergy_;
	TBranch *pfjets_mc_otherEnergy_branch;
	bool pfjets_mc_otherEnergy_isLoaded;
	vector<float> photons_mc3dr_;
	TBranch *photons_mc3dr_branch;
	bool photons_mc3dr_isLoaded;
	vector<float> photons_mcdr_;
	TBranch *photons_mcdr_branch;
	bool photons_mcdr_isLoaded;
	vector<float> els_bs2d_;
	TBranch *els_bs2d_branch;
	bool els_bs2d_isLoaded;
	vector<float> els_bs2derr_;
	TBranch *els_bs2derr_branch;
	bool els_bs2derr_isLoaded;
	vector<float> els_bs3d_;
	TBranch *els_bs3d_branch;
	bool els_bs3d_isLoaded;
	vector<float> els_bs3derr_;
	TBranch *els_bs3derr_branch;
	bool els_bs3derr_isLoaded;
	vector<float> els_chi2_;
	TBranch *els_chi2_branch;
	bool els_chi2_isLoaded;
	vector<float> els_ckf_chi2_;
	TBranch *els_ckf_chi2_branch;
	bool els_ckf_chi2_isLoaded;
	vector<float> els_ckf_ndof_;
	TBranch *els_ckf_ndof_branch;
	bool els_ckf_ndof_isLoaded;
	vector<float> els_clusterMaxDR_;
	TBranch *els_clusterMaxDR_branch;
	bool els_clusterMaxDR_isLoaded;
	vector<float> els_clusterMaxDRDEta_;
	TBranch *els_clusterMaxDRDEta_branch;
	bool els_clusterMaxDRDEta_isLoaded;
	vector<float> els_clusterMaxDRDPhi_;
	TBranch *els_clusterMaxDRDPhi_branch;
	bool els_clusterMaxDRDPhi_isLoaded;
	vector<float> els_clusterMaxDRRawEnergy_;
	TBranch *els_clusterMaxDRRawEnergy_branch;
	bool els_clusterMaxDRRawEnergy_isLoaded;
	vector<float> els_clustersMeanDEtaToSeed_;
	TBranch *els_clustersMeanDEtaToSeed_branch;
	bool els_clustersMeanDEtaToSeed_isLoaded;
	vector<float> els_clustersMeanDPhiToSeed_;
	TBranch *els_clustersMeanDPhiToSeed_branch;
	bool els_clustersMeanDPhiToSeed_isLoaded;
	vector<float> els_clustersMeanDRToSeed_;
	TBranch *els_clustersMeanDRToSeed_branch;
	bool els_clustersMeanDRToSeed_isLoaded;
	vector<float> els_clustersMeanRawEnergy_;
	TBranch *els_clustersMeanRawEnergy_branch;
	bool els_clustersMeanRawEnergy_isLoaded;
	vector<float> els_clustersRMSRawEnergy_;
	TBranch *els_clustersRMSRawEnergy_branch;
	bool els_clustersRMSRawEnergy_isLoaded;
	vector<float> els_conv_vtx_prob_;
	TBranch *els_conv_vtx_prob_branch;
	bool els_conv_vtx_prob_isLoaded;
	vector<float> els_d0_;
	TBranch *els_d0_branch;
	bool els_d0_isLoaded;
	vector<float> els_d0Err_;
	TBranch *els_d0Err_branch;
	bool els_d0Err_isLoaded;
	vector<float> els_d0corr_;
	TBranch *els_d0corr_branch;
	bool els_d0corr_isLoaded;
	vector<float> els_d0corrPhi_;
	TBranch *els_d0corrPhi_branch;
	bool els_d0corrPhi_isLoaded;
	vector<float> els_d0phiCov_;
	TBranch *els_d0phiCov_branch;
	bool els_d0phiCov_isLoaded;
	vector<float> els_dEtaIn_;
	TBranch *els_dEtaIn_branch;
	bool els_dEtaIn_isLoaded;
	vector<float> els_dEtaOut_;
	TBranch *els_dEtaOut_branch;
	bool els_dEtaOut_isLoaded;
	vector<float> els_dPhiIn_;
	TBranch *els_dPhiIn_branch;
	bool els_dPhiIn_isLoaded;
	vector<float> els_dPhiInPhiOut_;
	TBranch *els_dPhiInPhiOut_branch;
	bool els_dPhiInPhiOut_isLoaded;
	vector<float> els_dPhiOut_;
	TBranch *els_dPhiOut_branch;
	bool els_dPhiOut_isLoaded;
	vector<float> els_deltaEtaEleClusterTrackAtCalo_;
	TBranch *els_deltaEtaEleClusterTrackAtCalo_branch;
	bool els_deltaEtaEleClusterTrackAtCalo_isLoaded;
	vector<float> els_deltaPhiEleClusterTrackAtCalo_;
	TBranch *els_deltaPhiEleClusterTrackAtCalo_branch;
	bool els_deltaPhiEleClusterTrackAtCalo_isLoaded;
	vector<float> els_dxyPV_;
	TBranch *els_dxyPV_branch;
	bool els_dxyPV_isLoaded;
	vector<float> els_dzPV_;
	TBranch *els_dzPV_branch;
	bool els_dzPV_isLoaded;
	vector<float> els_e1x5_;
	TBranch *els_e1x5_branch;
	bool els_e1x5_isLoaded;
	vector<float> els_e1x5_full5x5_;
	TBranch *els_e1x5_full5x5_branch;
	bool els_e1x5_full5x5_isLoaded;
	vector<float> els_e2x5Max_;
	TBranch *els_e2x5Max_branch;
	bool els_e2x5Max_isLoaded;
	vector<float> els_e2x5Max_full5x5_;
	TBranch *els_e2x5Max_full5x5_branch;
	bool els_e2x5Max_full5x5_isLoaded;
	vector<float> els_e5x5_;
	TBranch *els_e5x5_branch;
	bool els_e5x5_isLoaded;
	vector<float> els_e5x5_full5x5_;
	TBranch *els_e5x5_full5x5_branch;
	bool els_e5x5_full5x5_isLoaded;
	vector<float> els_eOverPIn_;
	TBranch *els_eOverPIn_branch;
	bool els_eOverPIn_isLoaded;
	vector<float> els_eOverPOut_;
	TBranch *els_eOverPOut_branch;
	bool els_eOverPOut_isLoaded;
	vector<float> els_eSC_;
	TBranch *els_eSC_branch;
	bool els_eSC_isLoaded;
	vector<float> els_eSCPresh_;
	TBranch *els_eSCPresh_branch;
	bool els_eSCPresh_isLoaded;
	vector<float> els_eSCRaw_;
	TBranch *els_eSCRaw_branch;
	bool els_eSCRaw_isLoaded;
	vector<float> els_eSeed_;
	TBranch *els_eSeed_branch;
	bool els_eSeed_isLoaded;
	vector<float> els_eSeedOverPIn_;
	TBranch *els_eSeedOverPIn_branch;
	bool els_eSeedOverPIn_isLoaded;
	vector<float> els_eSeedOverPOut_;
	TBranch *els_eSeedOverPOut_branch;
	bool els_eSeedOverPOut_isLoaded;
	vector<float> els_ecalEnergy_;
	TBranch *els_ecalEnergy_branch;
	bool els_ecalEnergy_isLoaded;
	vector<float> els_ecalEnergyError_;
	TBranch *els_ecalEnergyError_branch;
	bool els_ecalEnergyError_isLoaded;
	vector<float> els_ecalIso_;
	TBranch *els_ecalIso_branch;
	bool els_ecalIso_isLoaded;
	vector<float> els_ecalIso04_;
	TBranch *els_ecalIso04_branch;
	bool els_ecalIso04_isLoaded;
	vector<float> els_ecalPFClusterIso_;
	TBranch *els_ecalPFClusterIso_branch;
	bool els_ecalPFClusterIso_isLoaded;
	vector<float> els_etaErr_;
	TBranch *els_etaErr_branch;
	bool els_etaErr_isLoaded;
	vector<float> els_etaSC_;
	TBranch *els_etaSC_branch;
	bool els_etaSC_isLoaded;
	vector<float> els_etaSCwidth_;
	TBranch *els_etaSCwidth_branch;
	bool els_etaSCwidth_isLoaded;
	vector<float> els_fbrem_;
	TBranch *els_fbrem_branch;
	bool els_fbrem_isLoaded;
	vector<float> els_hOverE_;
	TBranch *els_hOverE_branch;
	bool els_hOverE_isLoaded;
	vector<float> els_hOverEBC_;
	TBranch *els_hOverEBC_branch;
	bool els_hOverEBC_isLoaded;
	vector<float> els_hcalDepth1OverEcal_;
	TBranch *els_hcalDepth1OverEcal_branch;
	bool els_hcalDepth1OverEcal_isLoaded;
	vector<float> els_hcalDepth1TowerSumEt_;
	TBranch *els_hcalDepth1TowerSumEt_branch;
	bool els_hcalDepth1TowerSumEt_isLoaded;
	vector<float> els_hcalDepth1TowerSumEt04_;
	TBranch *els_hcalDepth1TowerSumEt04_branch;
	bool els_hcalDepth1TowerSumEt04_isLoaded;
	vector<float> els_hcalDepth2OverEcal_;
	TBranch *els_hcalDepth2OverEcal_branch;
	bool els_hcalDepth2OverEcal_isLoaded;
	vector<float> els_hcalDepth2TowerSumEt_;
	TBranch *els_hcalDepth2TowerSumEt_branch;
	bool els_hcalDepth2TowerSumEt_isLoaded;
	vector<float> els_hcalDepth2TowerSumEt04_;
	TBranch *els_hcalDepth2TowerSumEt04_branch;
	bool els_hcalDepth2TowerSumEt04_isLoaded;
	vector<float> els_hcalIso_;
	TBranch *els_hcalIso_branch;
	bool els_hcalIso_isLoaded;
	vector<float> els_hcalIso04_;
	TBranch *els_hcalIso04_branch;
	bool els_hcalIso04_isLoaded;
	vector<float> els_hcalPFClusterIso_;
	TBranch *els_hcalPFClusterIso_branch;
	bool els_hcalPFClusterIso_isLoaded;
	vector<float> els_ip2d_;
	TBranch *els_ip2d_branch;
	bool els_ip2d_isLoaded;
	vector<float> els_ip2derr_;
	TBranch *els_ip2derr_branch;
	bool els_ip2derr_isLoaded;
	vector<float> els_ip3d_;
	TBranch *els_ip3d_branch;
	bool els_ip3d_isLoaded;
	vector<float> els_ip3derr_;
	TBranch *els_ip3derr_branch;
	bool els_ip3derr_isLoaded;
	vector<float> els_mass_;
	TBranch *els_mass_branch;
	bool els_mass_isLoaded;
	vector<float> els_mc_patMatch_dr_;
	TBranch *els_mc_patMatch_dr_branch;
	bool els_mc_patMatch_dr_isLoaded;
	vector<float> els_miniIso_ch_;
	TBranch *els_miniIso_ch_branch;
	bool els_miniIso_ch_isLoaded;
	vector<float> els_miniIso_db_;
	TBranch *els_miniIso_db_branch;
	bool els_miniIso_db_isLoaded;
	vector<float> els_miniIso_em_;
	TBranch *els_miniIso_em_branch;
	bool els_miniIso_em_isLoaded;
	vector<float> els_miniIso_nh_;
	TBranch *els_miniIso_nh_branch;
	bool els_miniIso_nh_isLoaded;
	vector<float> els_miniIso_uncor_;
	TBranch *els_miniIso_uncor_branch;
	bool els_miniIso_uncor_isLoaded;
	vector<float> els_mva_;
	TBranch *els_mva_branch;
	bool els_mva_isLoaded;
	vector<float> els_ndof_;
	TBranch *els_ndof_branch;
	bool els_ndof_isLoaded;
	vector<float> els_pfChargedHadronIso_;
	TBranch *els_pfChargedHadronIso_branch;
	bool els_pfChargedHadronIso_isLoaded;
	vector<float> els_pfNeutralHadronIso_;
	TBranch *els_pfNeutralHadronIso_branch;
	bool els_pfNeutralHadronIso_isLoaded;
	vector<float> els_pfPUIso_;
	TBranch *els_pfPUIso_branch;
	bool els_pfPUIso_isLoaded;
	vector<float> els_pfPhotonIso_;
	TBranch *els_pfPhotonIso_branch;
	bool els_pfPhotonIso_isLoaded;
	vector<float> els_phiErr_;
	TBranch *els_phiErr_branch;
	bool els_phiErr_isLoaded;
	vector<float> els_phiSC_;
	TBranch *els_phiSC_branch;
	bool els_phiSC_isLoaded;
	vector<float> els_phiSCwidth_;
	TBranch *els_phiSCwidth_branch;
	bool els_phiSCwidth_isLoaded;
	vector<float> els_ptErr_;
	TBranch *els_ptErr_branch;
	bool els_ptErr_isLoaded;
	vector<float> els_ptErrGsf_;
	TBranch *els_ptErrGsf_branch;
	bool els_ptErrGsf_isLoaded;
	vector<float> els_r9_;
	TBranch *els_r9_branch;
	bool els_r9_isLoaded;
	vector<float> els_r9_full5x5_;
	TBranch *els_r9_full5x5_branch;
	bool els_r9_full5x5_isLoaded;
	vector<float> els_scIsEB_;
	TBranch *els_scIsEB_branch;
	bool els_scIsEB_isLoaded;
	vector<float> els_scPreshowerEnergyPlane1_;
	TBranch *els_scPreshowerEnergyPlane1_branch;
	bool els_scPreshowerEnergyPlane1_isLoaded;
	vector<float> els_scPreshowerEnergyPlane2_;
	TBranch *els_scPreshowerEnergyPlane2_branch;
	bool els_scPreshowerEnergyPlane2_isLoaded;
	vector<float> els_scR_;
	TBranch *els_scR_branch;
	bool els_scR_isLoaded;
	vector<float> els_scSeed2x5LeftRightAsym_;
	TBranch *els_scSeed2x5LeftRightAsym_branch;
	bool els_scSeed2x5LeftRightAsym_isLoaded;
	vector<float> els_scSeed2x5TopBottomAsym_;
	TBranch *els_scSeed2x5TopBottomAsym_branch;
	bool els_scSeed2x5TopBottomAsym_isLoaded;
	vector<float> els_scSeedCryEta_;
	TBranch *els_scSeedCryEta_branch;
	bool els_scSeedCryEta_isLoaded;
	vector<float> els_scSeedCryIeta_;
	TBranch *els_scSeedCryIeta_branch;
	bool els_scSeedCryIeta_isLoaded;
	vector<float> els_scSeedCryIphi_;
	TBranch *els_scSeedCryIphi_branch;
	bool els_scSeedCryIphi_isLoaded;
	vector<float> els_scSeedCryIx_;
	TBranch *els_scSeedCryIx_branch;
	bool els_scSeedCryIx_isLoaded;
	vector<float> els_scSeedCryIy_;
	TBranch *els_scSeedCryIy_branch;
	bool els_scSeedCryIy_isLoaded;
	vector<float> els_scSeedCryPhi_;
	TBranch *els_scSeedCryPhi_branch;
	bool els_scSeedCryPhi_isLoaded;
	vector<float> els_scSeedCryX_;
	TBranch *els_scSeedCryX_branch;
	bool els_scSeedCryX_isLoaded;
	vector<float> els_scSeedCryY_;
	TBranch *els_scSeedCryY_branch;
	bool els_scSeedCryY_isLoaded;
	vector<float> els_scSeedE2nd_;
	TBranch *els_scSeedE2nd_branch;
	bool els_scSeedE2nd_isLoaded;
	vector<float> els_scSeedE2x5Bottom_;
	TBranch *els_scSeedE2x5Bottom_branch;
	bool els_scSeedE2x5Bottom_isLoaded;
	vector<float> els_scSeedE2x5Left_;
	TBranch *els_scSeedE2x5Left_branch;
	bool els_scSeedE2x5Left_isLoaded;
	vector<float> els_scSeedE2x5Right_;
	TBranch *els_scSeedE2x5Right_branch;
	bool els_scSeedE2x5Right_isLoaded;
	vector<float> els_scSeedE2x5Top_;
	TBranch *els_scSeedE2x5Top_branch;
	bool els_scSeedE2x5Top_isLoaded;
	vector<float> els_scSeedE3x3_;
	TBranch *els_scSeedE3x3_branch;
	bool els_scSeedE3x3_isLoaded;
	vector<float> els_scSeedEBottom_;
	TBranch *els_scSeedEBottom_branch;
	bool els_scSeedEBottom_isLoaded;
	vector<float> els_scSeedELeft_;
	TBranch *els_scSeedELeft_branch;
	bool els_scSeedELeft_isLoaded;
	vector<float> els_scSeedERight_;
	TBranch *els_scSeedERight_branch;
	bool els_scSeedERight_isLoaded;
	vector<float> els_scSeedETop_;
	TBranch *els_scSeedETop_branch;
	bool els_scSeedETop_isLoaded;
	vector<float> els_scSeedEmax_;
	TBranch *els_scSeedEmax_branch;
	bool els_scSeedEmax_isLoaded;
	vector<float> els_scSeedEta_;
	TBranch *els_scSeedEta_branch;
	bool els_scSeedEta_isLoaded;
	vector<float> els_scSeedLeftRightAsym_;
	TBranch *els_scSeedLeftRightAsym_branch;
	bool els_scSeedLeftRightAsym_isLoaded;
	vector<float> els_scSeedPhi_;
	TBranch *els_scSeedPhi_branch;
	bool els_scSeedPhi_isLoaded;
	vector<float> els_scSeedSigmaIetaIphi_;
	TBranch *els_scSeedSigmaIetaIphi_branch;
	bool els_scSeedSigmaIetaIphi_isLoaded;
	vector<float> els_scSeedSize_;
	TBranch *els_scSeedSize_branch;
	bool els_scSeedSize_isLoaded;
	vector<float> els_scSeedTopBottomAsym_;
	TBranch *els_scSeedTopBottomAsym_branch;
	bool els_scSeedTopBottomAsym_isLoaded;
	vector<float> els_sigmaEtaEta_;
	TBranch *els_sigmaEtaEta_branch;
	bool els_sigmaEtaEta_isLoaded;
	vector<float> els_sigmaEtaEta_full5x5_;
	TBranch *els_sigmaEtaEta_full5x5_branch;
	bool els_sigmaEtaEta_full5x5_isLoaded;
	vector<float> els_sigmaIEtaIEta_;
	TBranch *els_sigmaIEtaIEta_branch;
	bool els_sigmaIEtaIEta_isLoaded;
	vector<float> els_sigmaIEtaIEta_full5x5_;
	TBranch *els_sigmaIEtaIEta_full5x5_branch;
	bool els_sigmaIEtaIEta_full5x5_isLoaded;
	vector<float> els_sigmaIPhiIPhi_;
	TBranch *els_sigmaIPhiIPhi_branch;
	bool els_sigmaIPhiIPhi_isLoaded;
	vector<float> els_sigmaIPhiIPhi_full5x5_;
	TBranch *els_sigmaIPhiIPhi_full5x5_branch;
	bool els_sigmaIPhiIPhi_full5x5_isLoaded;
	vector<float> els_sigmaIphiIphi_;
	TBranch *els_sigmaIphiIphi_branch;
	bool els_sigmaIphiIphi_isLoaded;
	vector<float> els_tkIso_;
	TBranch *els_tkIso_branch;
	bool els_tkIso_isLoaded;
	vector<float> els_tkIso04_;
	TBranch *els_tkIso04_branch;
	bool els_tkIso04_isLoaded;
	vector<float> els_trackMomentumError_;
	TBranch *els_trackMomentumError_branch;
	bool els_trackMomentumError_isLoaded;
	vector<float> els_trkdr_;
	TBranch *els_trkdr_branch;
	bool els_trkdr_isLoaded;
	vector<float> els_trkshFrac_;
	TBranch *els_trkshFrac_branch;
	bool els_trkshFrac_isLoaded;
	vector<float> els_z0_;
	TBranch *els_z0_branch;
	bool els_z0_isLoaded;
	vector<float> els_z0Err_;
	TBranch *els_z0Err_branch;
	bool els_z0Err_isLoaded;
	vector<float> els_z0corr_;
	TBranch *els_z0corr_branch;
	bool els_z0corr_isLoaded;
	vector<float> genps_charge_;
	TBranch *genps_charge_branch;
	bool genps_charge_isLoaded;
	vector<float> genps_iso_;
	TBranch *genps_iso_branch;
	bool genps_iso_isLoaded;
	vector<float> genps_mass_;
	TBranch *genps_mass_branch;
	bool genps_mass_isLoaded;
	vector<float> genweights_;
	TBranch *genweights_branch;
	bool genweights_isLoaded;
	vector<float> isotracks_dz_;
	TBranch *isotracks_dz_branch;
	bool isotracks_dz_isLoaded;
	vector<float> isotracks_dzAssociatedPV_;
	TBranch *isotracks_dzAssociatedPV_branch;
	bool isotracks_dzAssociatedPV_isLoaded;
	vector<float> isotracks_mass_;
	TBranch *isotracks_mass_branch;
	bool isotracks_mass_isLoaded;
	vector<float> isotracks_puppiWeight_;
	TBranch *isotracks_puppiWeight_branch;
	bool isotracks_puppiWeight_isLoaded;
	vector<float> isotracks_relIso_;
	TBranch *isotracks_relIso_branch;
	bool isotracks_relIso_isLoaded;
	vector<float> mus_bs2d_;
	TBranch *mus_bs2d_branch;
	bool mus_bs2d_isLoaded;
	vector<float> mus_bs2derr_;
	TBranch *mus_bs2derr_branch;
	bool mus_bs2derr_isLoaded;
	vector<float> mus_bs3d_;
	TBranch *mus_bs3d_branch;
	bool mus_bs3d_isLoaded;
	vector<float> mus_bs3derr_;
	TBranch *mus_bs3derr_branch;
	bool mus_bs3derr_isLoaded;
	vector<float> mus_caloCompatibility_;
	TBranch *mus_caloCompatibility_branch;
	bool mus_caloCompatibility_isLoaded;
	vector<float> mus_chi2_;
	TBranch *mus_chi2_branch;
	bool mus_chi2_isLoaded;
	vector<float> mus_chi2LocalMomentum_;
	TBranch *mus_chi2LocalMomentum_branch;
	bool mus_chi2LocalMomentum_isLoaded;
	vector<float> mus_chi2LocalPosition_;
	TBranch *mus_chi2LocalPosition_branch;
	bool mus_chi2LocalPosition_isLoaded;
	vector<float> mus_d0_;
	TBranch *mus_d0_branch;
	bool mus_d0_isLoaded;
	vector<float> mus_d0Err_;
	TBranch *mus_d0Err_branch;
	bool mus_d0Err_isLoaded;
	vector<float> mus_d0corr_;
	TBranch *mus_d0corr_branch;
	bool mus_d0corr_isLoaded;
	vector<float> mus_d0corrPhi_;
	TBranch *mus_d0corrPhi_branch;
	bool mus_d0corrPhi_isLoaded;
	vector<float> mus_d0phiCov_;
	TBranch *mus_d0phiCov_branch;
	bool mus_d0phiCov_isLoaded;
	vector<float> mus_dxyPV_;
	TBranch *mus_dxyPV_branch;
	bool mus_dxyPV_isLoaded;
	vector<float> mus_dzPV_;
	TBranch *mus_dzPV_branch;
	bool mus_dzPV_isLoaded;
	vector<float> mus_ecal_time_;
	TBranch *mus_ecal_time_branch;
	bool mus_ecal_time_isLoaded;
	vector<float> mus_e_em_;
	TBranch *mus_e_em_branch;
	bool mus_e_em_isLoaded;
	vector<float> mus_e_emS9_;
	TBranch *mus_e_emS9_branch;
	bool mus_e_emS9_isLoaded;
	vector<float> mus_e_had_;
	TBranch *mus_e_had_branch;
	bool mus_e_had_isLoaded;
	vector<float> mus_e_hadS9_;
	TBranch *mus_e_hadS9_branch;
	bool mus_e_hadS9_isLoaded;
	vector<float> mus_e_ho_;
	TBranch *mus_e_ho_branch;
	bool mus_e_ho_isLoaded;
	vector<float> mus_e_hoS9_;
	TBranch *mus_e_hoS9_branch;
	bool mus_e_hoS9_isLoaded;
	vector<float> mus_emMax_;
	TBranch *mus_emMax_branch;
	bool mus_emMax_isLoaded;
	vector<float> mus_emS25_;
	TBranch *mus_emS25_branch;
	bool mus_emS25_isLoaded;
	vector<float> mus_etaErr_;
	TBranch *mus_etaErr_branch;
	bool mus_etaErr_isLoaded;
	vector<float> mus_gfit_chi2_;
	TBranch *mus_gfit_chi2_branch;
	bool mus_gfit_chi2_isLoaded;
	vector<float> mus_gfit_d0_;
	TBranch *mus_gfit_d0_branch;
	bool mus_gfit_d0_isLoaded;
	vector<float> mus_gfit_d0Err_;
	TBranch *mus_gfit_d0Err_branch;
	bool mus_gfit_d0Err_isLoaded;
	vector<float> mus_gfit_d0corr_;
	TBranch *mus_gfit_d0corr_branch;
	bool mus_gfit_d0corr_isLoaded;
	vector<float> mus_gfit_d0corrPhi_;
	TBranch *mus_gfit_d0corrPhi_branch;
	bool mus_gfit_d0corrPhi_isLoaded;
	vector<float> mus_gfit_d0phiCov_;
	TBranch *mus_gfit_d0phiCov_branch;
	bool mus_gfit_d0phiCov_isLoaded;
	vector<float> mus_gfit_ndof_;
	TBranch *mus_gfit_ndof_branch;
	bool mus_gfit_ndof_isLoaded;
	vector<float> mus_gfit_qoverp_;
	TBranch *mus_gfit_qoverp_branch;
	bool mus_gfit_qoverp_isLoaded;
	vector<float> mus_gfit_qoverpError_;
	TBranch *mus_gfit_qoverpError_branch;
	bool mus_gfit_qoverpError_isLoaded;
	vector<float> mus_gfit_z0_;
	TBranch *mus_gfit_z0_branch;
	bool mus_gfit_z0_isLoaded;
	vector<float> mus_gfit_z0Err_;
	TBranch *mus_gfit_z0Err_branch;
	bool mus_gfit_z0Err_isLoaded;
	vector<float> mus_gfit_z0corr_;
	TBranch *mus_gfit_z0corr_branch;
	bool mus_gfit_z0corr_isLoaded;
	vector<float> mus_glbKink_;
	TBranch *mus_glbKink_branch;
	bool mus_glbKink_isLoaded;
	vector<float> mus_glbTrackProbability_;
	TBranch *mus_glbTrackProbability_branch;
	bool mus_glbTrackProbability_isLoaded;
	vector<float> mus_globalDeltaEtaPhi_;
	TBranch *mus_globalDeltaEtaPhi_branch;
	bool mus_globalDeltaEtaPhi_isLoaded;
	vector<float> mus_hadMax_;
	TBranch *mus_hadMax_branch;
	bool mus_hadMax_isLoaded;
	vector<float> mus_hcal_time_;
	TBranch *mus_hcal_time_branch;
	bool mus_hcal_time_isLoaded;
	vector<float> mus_ip2d_;
	TBranch *mus_ip2d_branch;
	bool mus_ip2d_isLoaded;
	vector<float> mus_ip2derr_;
	TBranch *mus_ip2derr_branch;
	bool mus_ip2derr_isLoaded;
	vector<float> mus_ip3d_;
	TBranch *mus_ip3d_branch;
	bool mus_ip3d_isLoaded;
	vector<float> mus_ip3derr_;
	TBranch *mus_ip3derr_branch;
	bool mus_ip3derr_isLoaded;
	vector<float> mus_iso03_emEt_;
	TBranch *mus_iso03_emEt_branch;
	bool mus_iso03_emEt_isLoaded;
	vector<float> mus_iso03_hadEt_;
	TBranch *mus_iso03_hadEt_branch;
	bool mus_iso03_hadEt_isLoaded;
	vector<float> mus_iso03_hoEt_;
	TBranch *mus_iso03_hoEt_branch;
	bool mus_iso03_hoEt_isLoaded;
	vector<float> mus_iso03_sumPt_;
	TBranch *mus_iso03_sumPt_branch;
	bool mus_iso03_sumPt_isLoaded;
	vector<float> mus_iso05_emEt_;
	TBranch *mus_iso05_emEt_branch;
	bool mus_iso05_emEt_isLoaded;
	vector<float> mus_iso05_hadEt_;
	TBranch *mus_iso05_hadEt_branch;
	bool mus_iso05_hadEt_isLoaded;
	vector<float> mus_iso05_hoEt_;
	TBranch *mus_iso05_hoEt_branch;
	bool mus_iso05_hoEt_isLoaded;
	vector<float> mus_iso05_sumPt_;
	TBranch *mus_iso05_sumPt_branch;
	bool mus_iso05_sumPt_isLoaded;
	vector<float> mus_isoMeanDRR03_pf_ChargedHadronPt_;
	TBranch *mus_isoMeanDRR03_pf_ChargedHadronPt_branch;
	bool mus_isoMeanDRR03_pf_ChargedHadronPt_isLoaded;
	vector<float> mus_isoMeanDRR03_pf_ChargedParticlePt_;
	TBranch *mus_isoMeanDRR03_pf_ChargedParticlePt_branch;
	bool mus_isoMeanDRR03_pf_ChargedParticlePt_isLoaded;
	vector<float> mus_isoMeanDRR03_pf_NeutralHadronEt_;
	TBranch *mus_isoMeanDRR03_pf_NeutralHadronEt_branch;
	bool mus_isoMeanDRR03_pf_NeutralHadronEt_isLoaded;
	vector<float> mus_isoMeanDRR03_pf_NeutralHadronEtHighThreshold_;
	TBranch *mus_isoMeanDRR03_pf_NeutralHadronEtHighThreshold_branch;
	bool mus_isoMeanDRR03_pf_NeutralHadronEtHighThreshold_isLoaded;
	vector<float> mus_isoMeanDRR03_pf_PUPt_;
	TBranch *mus_isoMeanDRR03_pf_PUPt_branch;
	bool mus_isoMeanDRR03_pf_PUPt_isLoaded;
	vector<float> mus_isoMeanDRR03_pf_PhotonEt_;
	TBranch *mus_isoMeanDRR03_pf_PhotonEt_branch;
	bool mus_isoMeanDRR03_pf_PhotonEt_isLoaded;
	vector<float> mus_isoMeanDRR03_pf_PhotonEtHighThreshold_;
	TBranch *mus_isoMeanDRR03_pf_PhotonEtHighThreshold_branch;
	bool mus_isoMeanDRR03_pf_PhotonEtHighThreshold_isLoaded;
	vector<float> mus_isoMeanDRR04_pf_ChargedHadronPt_;
	TBranch *mus_isoMeanDRR04_pf_ChargedHadronPt_branch;
	bool mus_isoMeanDRR04_pf_ChargedHadronPt_isLoaded;
	vector<float> mus_isoMeanDRR04_pf_ChargedParticlePt_;
	TBranch *mus_isoMeanDRR04_pf_ChargedParticlePt_branch;
	bool mus_isoMeanDRR04_pf_ChargedParticlePt_isLoaded;
	vector<float> mus_isoMeanDRR04_pf_NeutralHadronEt_;
	TBranch *mus_isoMeanDRR04_pf_NeutralHadronEt_branch;
	bool mus_isoMeanDRR04_pf_NeutralHadronEt_isLoaded;
	vector<float> mus_isoMeanDRR04_pf_NeutralHadronEtHighThreshold_;
	TBranch *mus_isoMeanDRR04_pf_NeutralHadronEtHighThreshold_branch;
	bool mus_isoMeanDRR04_pf_NeutralHadronEtHighThreshold_isLoaded;
	vector<float> mus_isoMeanDRR04_pf_PUPt_;
	TBranch *mus_isoMeanDRR04_pf_PUPt_branch;
	bool mus_isoMeanDRR04_pf_PUPt_isLoaded;
	vector<float> mus_isoMeanDRR04_pf_PhotonEt_;
	TBranch *mus_isoMeanDRR04_pf_PhotonEt_branch;
	bool mus_isoMeanDRR04_pf_PhotonEt_isLoaded;
	vector<float> mus_isoMeanDRR04_pf_PhotonEtHighThreshold_;
	TBranch *mus_isoMeanDRR04_pf_PhotonEtHighThreshold_branch;
	bool mus_isoMeanDRR04_pf_PhotonEtHighThreshold_isLoaded;
	vector<float> mus_isoR03_pf_ChargedHadronPt_;
	TBranch *mus_isoR03_pf_ChargedHadronPt_branch;
	bool mus_isoR03_pf_ChargedHadronPt_isLoaded;
	vector<float> mus_isoR03_pf_ChargedParticlePt_;
	TBranch *mus_isoR03_pf_ChargedParticlePt_branch;
	bool mus_isoR03_pf_ChargedParticlePt_isLoaded;
	vector<float> mus_isoR03_pf_NeutralHadronEt_;
	TBranch *mus_isoR03_pf_NeutralHadronEt_branch;
	bool mus_isoR03_pf_NeutralHadronEt_isLoaded;
	vector<float> mus_isoR03_pf_NeutralHadronEtHighThreshold_;
	TBranch *mus_isoR03_pf_NeutralHadronEtHighThreshold_branch;
	bool mus_isoR03_pf_NeutralHadronEtHighThreshold_isLoaded;
	vector<float> mus_isoR03_pf_PUPt_;
	TBranch *mus_isoR03_pf_PUPt_branch;
	bool mus_isoR03_pf_PUPt_isLoaded;
	vector<float> mus_isoR03_pf_PhotonEt_;
	TBranch *mus_isoR03_pf_PhotonEt_branch;
	bool mus_isoR03_pf_PhotonEt_isLoaded;
	vector<float> mus_isoR03_pf_PhotonEtHighThreshold_;
	TBranch *mus_isoR03_pf_PhotonEtHighThreshold_branch;
	bool mus_isoR03_pf_PhotonEtHighThreshold_isLoaded;
	vector<float> mus_isoR04_pf_ChargedHadronPt_;
	TBranch *mus_isoR04_pf_ChargedHadronPt_branch;
	bool mus_isoR04_pf_ChargedHadronPt_isLoaded;
	vector<float> mus_isoR04_pf_ChargedParticlePt_;
	TBranch *mus_isoR04_pf_ChargedParticlePt_branch;
	bool mus_isoR04_pf_ChargedParticlePt_isLoaded;
	vector<float> mus_isoR04_pf_NeutralHadronEt_;
	TBranch *mus_isoR04_pf_NeutralHadronEt_branch;
	bool mus_isoR04_pf_NeutralHadronEt_isLoaded;
	vector<float> mus_isoR04_pf_NeutralHadronEtHighThreshold_;
	TBranch *mus_isoR04_pf_NeutralHadronEtHighThreshold_branch;
	bool mus_isoR04_pf_NeutralHadronEtHighThreshold_isLoaded;
	vector<float> mus_isoR04_pf_PUPt_;
	TBranch *mus_isoR04_pf_PUPt_branch;
	bool mus_isoR04_pf_PUPt_isLoaded;
	vector<float> mus_isoR04_pf_PhotonEt_;
	TBranch *mus_isoR04_pf_PhotonEt_branch;
	bool mus_isoR04_pf_PhotonEt_isLoaded;
	vector<float> mus_isoR04_pf_PhotonEtHighThreshold_;
	TBranch *mus_isoR04_pf_PhotonEtHighThreshold_branch;
	bool mus_isoR04_pf_PhotonEtHighThreshold_isLoaded;
	vector<float> mus_isoSumDRR03_pf_ChargedHadronPt_;
	TBranch *mus_isoSumDRR03_pf_ChargedHadronPt_branch;
	bool mus_isoSumDRR03_pf_ChargedHadronPt_isLoaded;
	vector<float> mus_isoSumDRR03_pf_ChargedParticlePt_;
	TBranch *mus_isoSumDRR03_pf_ChargedParticlePt_branch;
	bool mus_isoSumDRR03_pf_ChargedParticlePt_isLoaded;
	vector<float> mus_isoSumDRR03_pf_NeutralHadronEt_;
	TBranch *mus_isoSumDRR03_pf_NeutralHadronEt_branch;
	bool mus_isoSumDRR03_pf_NeutralHadronEt_isLoaded;
	vector<float> mus_isoSumDRR03_pf_NeutralHadronEtHighThreshold_;
	TBranch *mus_isoSumDRR03_pf_NeutralHadronEtHighThreshold_branch;
	bool mus_isoSumDRR03_pf_NeutralHadronEtHighThreshold_isLoaded;
	vector<float> mus_isoSumDRR03_pf_PUPt_;
	TBranch *mus_isoSumDRR03_pf_PUPt_branch;
	bool mus_isoSumDRR03_pf_PUPt_isLoaded;
	vector<float> mus_isoSumDRR03_pf_PhotonEt_;
	TBranch *mus_isoSumDRR03_pf_PhotonEt_branch;
	bool mus_isoSumDRR03_pf_PhotonEt_isLoaded;
	vector<float> mus_isoSumDRR03_pf_PhotonEtHighThreshold_;
	TBranch *mus_isoSumDRR03_pf_PhotonEtHighThreshold_branch;
	bool mus_isoSumDRR03_pf_PhotonEtHighThreshold_isLoaded;
	vector<float> mus_isoSumDRR04_pf_ChargedHadronPt_;
	TBranch *mus_isoSumDRR04_pf_ChargedHadronPt_branch;
	bool mus_isoSumDRR04_pf_ChargedHadronPt_isLoaded;
	vector<float> mus_isoSumDRR04_pf_ChargedParticlePt_;
	TBranch *mus_isoSumDRR04_pf_ChargedParticlePt_branch;
	bool mus_isoSumDRR04_pf_ChargedParticlePt_isLoaded;
	vector<float> mus_isoSumDRR04_pf_NeutralHadronEt_;
	TBranch *mus_isoSumDRR04_pf_NeutralHadronEt_branch;
	bool mus_isoSumDRR04_pf_NeutralHadronEt_isLoaded;
	vector<float> mus_isoSumDRR04_pf_NeutralHadronEtHighThreshold_;
	TBranch *mus_isoSumDRR04_pf_NeutralHadronEtHighThreshold_branch;
	bool mus_isoSumDRR04_pf_NeutralHadronEtHighThreshold_isLoaded;
	vector<float> mus_isoSumDRR04_pf_PUPt_;
	TBranch *mus_isoSumDRR04_pf_PUPt_branch;
	bool mus_isoSumDRR04_pf_PUPt_isLoaded;
	vector<float> mus_isoSumDRR04_pf_PhotonEt_;
	TBranch *mus_isoSumDRR04_pf_PhotonEt_branch;
	bool mus_isoSumDRR04_pf_PhotonEt_isLoaded;
	vector<float> mus_isoSumDRR04_pf_PhotonEtHighThreshold_;
	TBranch *mus_isoSumDRR04_pf_PhotonEtHighThreshold_branch;
	bool mus_isoSumDRR04_pf_PhotonEtHighThreshold_isLoaded;
	vector<float> mus_iso_ecalvetoDep_;
	TBranch *mus_iso_ecalvetoDep_branch;
	bool mus_iso_ecalvetoDep_isLoaded;
	vector<float> mus_iso_hcalvetoDep_;
	TBranch *mus_iso_hcalvetoDep_branch;
	bool mus_iso_hcalvetoDep_isLoaded;
	vector<float> mus_iso_hovetoDep_;
	TBranch *mus_iso_hovetoDep_branch;
	bool mus_iso_hovetoDep_isLoaded;
	vector<float> mus_iso_trckvetoDep_;
	TBranch *mus_iso_trckvetoDep_branch;
	bool mus_iso_trckvetoDep_isLoaded;
	vector<float> mus_localDistance_;
	TBranch *mus_localDistance_branch;
	bool mus_localDistance_isLoaded;
	vector<float> mus_mass_;
	TBranch *mus_mass_branch;
	bool mus_mass_isLoaded;
	vector<float> mus_mc_patMatch_dr_;
	TBranch *mus_mc_patMatch_dr_branch;
	bool mus_mc_patMatch_dr_isLoaded;
	vector<float> mus_miniIso_ch_;
	TBranch *mus_miniIso_ch_branch;
	bool mus_miniIso_ch_isLoaded;
	vector<float> mus_miniIso_db_;
	TBranch *mus_miniIso_db_branch;
	bool mus_miniIso_db_isLoaded;
	vector<float> mus_miniIso_em_;
	TBranch *mus_miniIso_em_branch;
	bool mus_miniIso_em_isLoaded;
	vector<float> mus_miniIso_nh_;
	TBranch *mus_miniIso_nh_branch;
	bool mus_miniIso_nh_isLoaded;
	vector<float> mus_miniIso_uncor_;
	TBranch *mus_miniIso_uncor_branch;
	bool mus_miniIso_uncor_isLoaded;
	vector<float> mus_ndof_;
	TBranch *mus_ndof_branch;
	bool mus_ndof_isLoaded;
	vector<float> mus_phiErr_;
	TBranch *mus_phiErr_branch;
	bool mus_phiErr_isLoaded;
	vector<float> mus_ptErr_;
	TBranch *mus_ptErr_branch;
	bool mus_ptErr_isLoaded;
	vector<float> mus_qoverp_;
	TBranch *mus_qoverp_branch;
	bool mus_qoverp_isLoaded;
	vector<float> mus_qoverpError_;
	TBranch *mus_qoverpError_branch;
	bool mus_qoverpError_isLoaded;
	vector<float> mus_segmCompatibility_;
	TBranch *mus_segmCompatibility_branch;
	bool mus_segmCompatibility_isLoaded;
	vector<float> mus_staRelChi2_;
	TBranch *mus_staRelChi2_branch;
	bool mus_staRelChi2_isLoaded;
	vector<float> mus_sta_chi2_;
	TBranch *mus_sta_chi2_branch;
	bool mus_sta_chi2_isLoaded;
	vector<float> mus_sta_d0_;
	TBranch *mus_sta_d0_branch;
	bool mus_sta_d0_isLoaded;
	vector<float> mus_sta_d0Err_;
	TBranch *mus_sta_d0Err_branch;
	bool mus_sta_d0Err_isLoaded;
	vector<float> mus_sta_d0corr_;
	TBranch *mus_sta_d0corr_branch;
	bool mus_sta_d0corr_isLoaded;
	vector<float> mus_sta_d0corrPhi_;
	TBranch *mus_sta_d0corrPhi_branch;
	bool mus_sta_d0corrPhi_isLoaded;
	vector<float> mus_sta_d0phiCov_;
	TBranch *mus_sta_d0phiCov_branch;
	bool mus_sta_d0phiCov_isLoaded;
	vector<float> mus_sta_ndof_;
	TBranch *mus_sta_ndof_branch;
	bool mus_sta_ndof_isLoaded;
	vector<float> mus_sta_qoverp_;
	TBranch *mus_sta_qoverp_branch;
	bool mus_sta_qoverp_isLoaded;
	vector<float> mus_sta_qoverpError_;
	TBranch *mus_sta_qoverpError_branch;
	bool mus_sta_qoverpError_isLoaded;
	vector<float> mus_sta_z0_;
	TBranch *mus_sta_z0_branch;
	bool mus_sta_z0_isLoaded;
	vector<float> mus_sta_z0Err_;
	TBranch *mus_sta_z0Err_branch;
	bool mus_sta_z0Err_isLoaded;
	vector<float> mus_sta_z0corr_;
	TBranch *mus_sta_z0corr_branch;
	bool mus_sta_z0corr_isLoaded;
	vector<float> mus_timeAtIpInOut_;
	TBranch *mus_timeAtIpInOut_branch;
	bool mus_timeAtIpInOut_isLoaded;
	vector<float> mus_timeAtIpInOutErr_;
	TBranch *mus_timeAtIpInOutErr_branch;
	bool mus_timeAtIpInOutErr_isLoaded;
	vector<float> mus_timeAtIpOutIn_;
	TBranch *mus_timeAtIpOutIn_branch;
	bool mus_timeAtIpOutIn_isLoaded;
	vector<float> mus_timeAtIpOutInErr_;
	TBranch *mus_timeAtIpOutInErr_branch;
	bool mus_timeAtIpOutInErr_isLoaded;
	vector<float> mus_trkKink_;
	TBranch *mus_trkKink_branch;
	bool mus_trkKink_isLoaded;
	vector<float> mus_trkRelChi2_;
	TBranch *mus_trkRelChi2_branch;
	bool mus_trkRelChi2_isLoaded;
	vector<float> mus_vertexphi_;
	TBranch *mus_vertexphi_branch;
	bool mus_vertexphi_isLoaded;
	vector<float> mus_z0_;
	TBranch *mus_z0_branch;
	bool mus_z0_isLoaded;
	vector<float> mus_z0Err_;
	TBranch *mus_z0Err_branch;
	bool mus_z0Err_isLoaded;
	vector<float> mus_z0corr_;
	TBranch *mus_z0corr_branch;
	bool mus_z0corr_isLoaded;
	vector<float> pfcands_dz_;
	TBranch *pfcands_dz_branch;
	bool pfcands_dz_isLoaded;
	vector<float> pfcands_dzAssociatedPV_;
	TBranch *pfcands_dzAssociatedPV_branch;
	bool pfcands_dzAssociatedPV_isLoaded;
	vector<float> pfcands_mass_;
	TBranch *pfcands_mass_branch;
	bool pfcands_mass_isLoaded;
	vector<float> pfcands_puppiWeight_;
	TBranch *pfcands_puppiWeight_branch;
	bool pfcands_puppiWeight_isLoaded;
	vector<float> pfcands_puppiWeightNoLep_;
	TBranch *pfcands_puppiWeightNoLep_branch;
	bool pfcands_puppiWeightNoLep_isLoaded;
	vector<float> pfjets_area_;
	TBranch *pfjets_area_branch;
	bool pfjets_area_isLoaded;
	vector<float> pfjets_chargedEmE_;
	TBranch *pfjets_chargedEmE_branch;
	bool pfjets_chargedEmE_isLoaded;
	vector<float> pfjets_chargedHadronE_;
	TBranch *pfjets_chargedHadronE_branch;
	bool pfjets_chargedHadronE_isLoaded;
	vector<float> pfjets_electronE_;
	TBranch *pfjets_electronE_branch;
	bool pfjets_electronE_isLoaded;
	vector<float> pfjets_hfEmE_;
	TBranch *pfjets_hfEmE_branch;
	bool pfjets_hfEmE_isLoaded;
	vector<float> pfjets_hfHadronE_;
	TBranch *pfjets_hfHadronE_branch;
	bool pfjets_hfHadronE_isLoaded;
	vector<float> pfjets_mass_;
	TBranch *pfjets_mass_branch;
	bool pfjets_mass_isLoaded;
	vector<float> pfjets_muonE_;
	TBranch *pfjets_muonE_branch;
	bool pfjets_muonE_isLoaded;
	vector<float> pfjets_neutralEmE_;
	TBranch *pfjets_neutralEmE_branch;
	bool pfjets_neutralEmE_isLoaded;
	vector<float> pfjets_neutralHadronE_;
	TBranch *pfjets_neutralHadronE_branch;
	bool pfjets_neutralHadronE_isLoaded;
	vector<float> pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_;
	TBranch *pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_branch;
	bool pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_isLoaded;
	vector<float> pfjets_photonE_;
	TBranch *pfjets_photonE_branch;
	bool pfjets_photonE_isLoaded;
	vector<float> pfjets_pileupJetId_;
	TBranch *pfjets_pileupJetId_branch;
	bool pfjets_pileupJetId_isLoaded;
	vector<float> pfjets_undoJEC_;
	TBranch *pfjets_undoJEC_branch;
	bool pfjets_undoJEC_isLoaded;
	vector<float> pfjets_puppi_area_;
	TBranch *pfjets_puppi_area_branch;
	bool pfjets_puppi_area_isLoaded;
	vector<float> pfjets_puppi_chargedEmE_;
	TBranch *pfjets_puppi_chargedEmE_branch;
	bool pfjets_puppi_chargedEmE_isLoaded;
	vector<float> pfjets_puppi_chargedHadronE_;
	TBranch *pfjets_puppi_chargedHadronE_branch;
	bool pfjets_puppi_chargedHadronE_isLoaded;
	vector<float> pfjets_puppi_electronE_;
	TBranch *pfjets_puppi_electronE_branch;
	bool pfjets_puppi_electronE_isLoaded;
	vector<float> pfjets_puppi_hfEmE_;
	TBranch *pfjets_puppi_hfEmE_branch;
	bool pfjets_puppi_hfEmE_isLoaded;
	vector<float> pfjets_puppi_hfHadronE_;
	TBranch *pfjets_puppi_hfHadronE_branch;
	bool pfjets_puppi_hfHadronE_isLoaded;
	vector<float> pfjets_puppi_mass_;
	TBranch *pfjets_puppi_mass_branch;
	bool pfjets_puppi_mass_isLoaded;
	vector<float> pfjets_puppi_muonE_;
	TBranch *pfjets_puppi_muonE_branch;
	bool pfjets_puppi_muonE_isLoaded;
	vector<float> pfjets_puppi_neutralEmE_;
	TBranch *pfjets_puppi_neutralEmE_branch;
	bool pfjets_puppi_neutralEmE_isLoaded;
	vector<float> pfjets_puppi_neutralHadronE_;
	TBranch *pfjets_puppi_neutralHadronE_branch;
	bool pfjets_puppi_neutralHadronE_isLoaded;
	vector<float> pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag_;
	TBranch *pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag_branch;
	bool pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag_isLoaded;
	vector<float> pfjets_puppi_photonE_;
	TBranch *pfjets_puppi_photonE_branch;
	bool pfjets_puppi_photonE_isLoaded;
	vector<float> pfjets_puppi_pileupJetId_;
	TBranch *pfjets_puppi_pileupJetId_branch;
	bool pfjets_puppi_pileupJetId_isLoaded;
	vector<float> pfjets_puppi_undoJEC_;
	TBranch *pfjets_puppi_undoJEC_branch;
	bool pfjets_puppi_undoJEC_isLoaded;
	vector<float> taus_pf_mass_;
	TBranch *taus_pf_mass_branch;
	bool taus_pf_mass_isLoaded;
	vector<float> photons_chargedHadronIso_;
	TBranch *photons_chargedHadronIso_branch;
	bool photons_chargedHadronIso_isLoaded;
	vector<float> photons_clusterMaxDR_;
	TBranch *photons_clusterMaxDR_branch;
	bool photons_clusterMaxDR_isLoaded;
	vector<float> photons_clusterMaxDRDEta_;
	TBranch *photons_clusterMaxDRDEta_branch;
	bool photons_clusterMaxDRDEta_isLoaded;
	vector<float> photons_clusterMaxDRDPhi_;
	TBranch *photons_clusterMaxDRDPhi_branch;
	bool photons_clusterMaxDRDPhi_isLoaded;
	vector<float> photons_clusterMaxDRRawEnergy_;
	TBranch *photons_clusterMaxDRRawEnergy_branch;
	bool photons_clusterMaxDRRawEnergy_isLoaded;
	vector<float> photons_clustersMeanDEtaToSeed_;
	TBranch *photons_clustersMeanDEtaToSeed_branch;
	bool photons_clustersMeanDEtaToSeed_isLoaded;
	vector<float> photons_clustersMeanDPhiToSeed_;
	TBranch *photons_clustersMeanDPhiToSeed_branch;
	bool photons_clustersMeanDPhiToSeed_isLoaded;
	vector<float> photons_clustersMeanDRToSeed_;
	TBranch *photons_clustersMeanDRToSeed_branch;
	bool photons_clustersMeanDRToSeed_isLoaded;
	vector<float> photons_clustersMeanRawEnergy_;
	TBranch *photons_clustersMeanRawEnergy_branch;
	bool photons_clustersMeanRawEnergy_isLoaded;
	vector<float> photons_clustersRMSRawEnergy_;
	TBranch *photons_clustersRMSRawEnergy_branch;
	bool photons_clustersRMSRawEnergy_isLoaded;
	vector<float> photons_e1x5_;
	TBranch *photons_e1x5_branch;
	bool photons_e1x5_isLoaded;
	vector<float> photons_e2x5Max_;
	TBranch *photons_e2x5Max_branch;
	bool photons_e2x5Max_isLoaded;
	vector<float> photons_e3x3_;
	TBranch *photons_e3x3_branch;
	bool photons_e3x3_isLoaded;
	vector<float> photons_e5x5_;
	TBranch *photons_e5x5_branch;
	bool photons_e5x5_isLoaded;
	vector<float> photons_eSC_;
	TBranch *photons_eSC_branch;
	bool photons_eSC_isLoaded;
	vector<float> photons_eSCPresh_;
	TBranch *photons_eSCPresh_branch;
	bool photons_eSCPresh_isLoaded;
	vector<float> photons_eSCRaw_;
	TBranch *photons_eSCRaw_branch;
	bool photons_eSCRaw_isLoaded;
	vector<float> photons_ecalIso03_;
	TBranch *photons_ecalIso03_branch;
	bool photons_ecalIso03_isLoaded;
	vector<float> photons_ecalIso04_;
	TBranch *photons_ecalIso04_branch;
	bool photons_ecalIso04_isLoaded;
	vector<float> photons_ecalPFClusterIso_;
	TBranch *photons_ecalPFClusterIso_branch;
	bool photons_ecalPFClusterIso_isLoaded;
	vector<float> photons_etaSC_;
	TBranch *photons_etaSC_branch;
	bool photons_etaSC_isLoaded;
	vector<float> photons_full3x3_e3x3_;
	TBranch *photons_full3x3_e3x3_branch;
	bool photons_full3x3_e3x3_isLoaded;
	vector<float> photons_full5x5_e1x5_;
	TBranch *photons_full5x5_e1x5_branch;
	bool photons_full5x5_e1x5_isLoaded;
	vector<float> photons_full5x5_e2x5Max_;
	TBranch *photons_full5x5_e2x5Max_branch;
	bool photons_full5x5_e2x5Max_isLoaded;
	vector<float> photons_full5x5_e5x5_;
	TBranch *photons_full5x5_e5x5_branch;
	bool photons_full5x5_e5x5_isLoaded;
	vector<float> photons_full5x5_hOverE_;
	TBranch *photons_full5x5_hOverE_branch;
	bool photons_full5x5_hOverE_isLoaded;
	vector<float> photons_full5x5_hOverEtowBC_;
	TBranch *photons_full5x5_hOverEtowBC_branch;
	bool photons_full5x5_hOverEtowBC_isLoaded;
	vector<float> photons_full5x5_r9_;
	TBranch *photons_full5x5_r9_branch;
	bool photons_full5x5_r9_isLoaded;
	vector<float> photons_full5x5_sigmaEtaEta_;
	TBranch *photons_full5x5_sigmaEtaEta_branch;
	bool photons_full5x5_sigmaEtaEta_isLoaded;
	vector<float> photons_full5x5_sigmaIEtaIEta_;
	TBranch *photons_full5x5_sigmaIEtaIEta_branch;
	bool photons_full5x5_sigmaIEtaIEta_isLoaded;
	vector<float> photons_hOverE_;
	TBranch *photons_hOverE_branch;
	bool photons_hOverE_isLoaded;
	vector<float> photons_hOverEtowBC_;
	TBranch *photons_hOverEtowBC_branch;
	bool photons_hOverEtowBC_isLoaded;
	vector<float> photons_hcalDepth1TowerSumEtBcConeDR03_;
	TBranch *photons_hcalDepth1TowerSumEtBcConeDR03_branch;
	bool photons_hcalDepth1TowerSumEtBcConeDR03_isLoaded;
	vector<float> photons_hcalDepth1TowerSumEtBcConeDR04_;
	TBranch *photons_hcalDepth1TowerSumEtBcConeDR04_branch;
	bool photons_hcalDepth1TowerSumEtBcConeDR04_isLoaded;
	vector<float> photons_hcalDepth2TowerSumEtBcConeDR03_;
	TBranch *photons_hcalDepth2TowerSumEtBcConeDR03_branch;
	bool photons_hcalDepth2TowerSumEtBcConeDR03_isLoaded;
	vector<float> photons_hcalDepth2TowerSumEtBcConeDR04_;
	TBranch *photons_hcalDepth2TowerSumEtBcConeDR04_branch;
	bool photons_hcalDepth2TowerSumEtBcConeDR04_isLoaded;
	vector<float> photons_hcalIso03_;
	TBranch *photons_hcalIso03_branch;
	bool photons_hcalIso03_isLoaded;
	vector<float> photons_hcalIso04_;
	TBranch *photons_hcalIso04_branch;
	bool photons_hcalIso04_isLoaded;
	vector<float> photons_hcalPFClusterIso_;
	TBranch *photons_hcalPFClusterIso_branch;
	bool photons_hcalPFClusterIso_isLoaded;
	vector<float> photons_hcalTowerSumEtBcConeDR03_;
	TBranch *photons_hcalTowerSumEtBcConeDR03_branch;
	bool photons_hcalTowerSumEtBcConeDR03_isLoaded;
	vector<float> photons_hcalTowerSumEtBcConeDR04_;
	TBranch *photons_hcalTowerSumEtBcConeDR04_branch;
	bool photons_hcalTowerSumEtBcConeDR04_isLoaded;
	vector<float> photons_mass_;
	TBranch *photons_mass_branch;
	bool photons_mass_isLoaded;
	vector<float> photons_neutralHadronIso_;
	TBranch *photons_neutralHadronIso_branch;
	bool photons_neutralHadronIso_isLoaded;
	vector<float> photons_ntkIsoHollow03_;
	TBranch *photons_ntkIsoHollow03_branch;
	bool photons_ntkIsoHollow03_isLoaded;
	vector<float> photons_ntkIsoHollow04_;
	TBranch *photons_ntkIsoHollow04_branch;
	bool photons_ntkIsoHollow04_isLoaded;
	vector<float> photons_ntkIsoSolid03_;
	TBranch *photons_ntkIsoSolid03_branch;
	bool photons_ntkIsoSolid03_isLoaded;
	vector<float> photons_ntkIsoSolid04_;
	TBranch *photons_ntkIsoSolid04_branch;
	bool photons_ntkIsoSolid04_isLoaded;
	vector<float> photons_phiSC_;
	TBranch *photons_phiSC_branch;
	bool photons_phiSC_isLoaded;
	vector<float> photons_photonIso_;
	TBranch *photons_photonIso_branch;
	bool photons_photonIso_isLoaded;
	vector<float> photons_recoChargedHadronIso_;
	TBranch *photons_recoChargedHadronIso_branch;
	bool photons_recoChargedHadronIso_isLoaded;
	vector<float> photons_recoNeutralHadronIso_;
	TBranch *photons_recoNeutralHadronIso_branch;
	bool photons_recoNeutralHadronIso_isLoaded;
	vector<float> photons_recoPhotonIso_;
	TBranch *photons_recoPhotonIso_branch;
	bool photons_recoPhotonIso_isLoaded;
	vector<float> photonsscEtaWidth_;
	TBranch *photonsscEtaWidth_branch;
	bool photonsscEtaWidth_isLoaded;
	vector<float> photons_scIsEB_;
	TBranch *photons_scIsEB_branch;
	bool photons_scIsEB_isLoaded;
	vector<float> photonsscPhiWidth_;
	TBranch *photonsscPhiWidth_branch;
	bool photonsscPhiWidth_isLoaded;
	vector<float> photons_scPreshowerEnergyPlane1_;
	TBranch *photons_scPreshowerEnergyPlane1_branch;
	bool photons_scPreshowerEnergyPlane1_isLoaded;
	vector<float> photons_scPreshowerEnergyPlane2_;
	TBranch *photons_scPreshowerEnergyPlane2_branch;
	bool photons_scPreshowerEnergyPlane2_isLoaded;
	vector<float> photons_scR_;
	TBranch *photons_scR_branch;
	bool photons_scR_isLoaded;
	vector<float> photons_scSeed2x5LeftRightAsym_;
	TBranch *photons_scSeed2x5LeftRightAsym_branch;
	bool photons_scSeed2x5LeftRightAsym_isLoaded;
	vector<float> photons_scSeed2x5TopBottomAsym_;
	TBranch *photons_scSeed2x5TopBottomAsym_branch;
	bool photons_scSeed2x5TopBottomAsym_isLoaded;
	vector<float> photonsscSeedCalibratedEnergy_;
	TBranch *photonsscSeedCalibratedEnergy_branch;
	bool photonsscSeedCalibratedEnergy_isLoaded;
	vector<float> photons_scSeedCryEta_;
	TBranch *photons_scSeedCryEta_branch;
	bool photons_scSeedCryEta_isLoaded;
	vector<float> photons_scSeedCryIeta_;
	TBranch *photons_scSeedCryIeta_branch;
	bool photons_scSeedCryIeta_isLoaded;
	vector<float> photons_scSeedCryIphi_;
	TBranch *photons_scSeedCryIphi_branch;
	bool photons_scSeedCryIphi_isLoaded;
	vector<float> photons_scSeedCryIx_;
	TBranch *photons_scSeedCryIx_branch;
	bool photons_scSeedCryIx_isLoaded;
	vector<float> photons_scSeedCryIy_;
	TBranch *photons_scSeedCryIy_branch;
	bool photons_scSeedCryIy_isLoaded;
	vector<float> photons_scSeedCryPhi_;
	TBranch *photons_scSeedCryPhi_branch;
	bool photons_scSeedCryPhi_isLoaded;
	vector<float> photons_scSeedCryX_;
	TBranch *photons_scSeedCryX_branch;
	bool photons_scSeedCryX_isLoaded;
	vector<float> photons_scSeedCryY_;
	TBranch *photons_scSeedCryY_branch;
	bool photons_scSeedCryY_isLoaded;
	vector<float> photons_scSeedE2nd_;
	TBranch *photons_scSeedE2nd_branch;
	bool photons_scSeedE2nd_isLoaded;
	vector<float> photons_scSeedE2x5Bottom_;
	TBranch *photons_scSeedE2x5Bottom_branch;
	bool photons_scSeedE2x5Bottom_isLoaded;
	vector<float> photons_scSeedE2x5Left_;
	TBranch *photons_scSeedE2x5Left_branch;
	bool photons_scSeedE2x5Left_isLoaded;
	vector<float> photons_scSeedE2x5Right_;
	TBranch *photons_scSeedE2x5Right_branch;
	bool photons_scSeedE2x5Right_isLoaded;
	vector<float> photons_scSeedE2x5Top_;
	TBranch *photons_scSeedE2x5Top_branch;
	bool photons_scSeedE2x5Top_isLoaded;
	vector<float> photons_scSeedE3x3_;
	TBranch *photons_scSeedE3x3_branch;
	bool photons_scSeedE3x3_isLoaded;
	vector<float> photons_scSeedEBottom_;
	TBranch *photons_scSeedEBottom_branch;
	bool photons_scSeedEBottom_isLoaded;
	vector<float> photons_scSeedELeft_;
	TBranch *photons_scSeedELeft_branch;
	bool photons_scSeedELeft_isLoaded;
	vector<float> photons_scSeedERight_;
	TBranch *photons_scSeedERight_branch;
	bool photons_scSeedERight_isLoaded;
	vector<float> photons_scSeedETop_;
	TBranch *photons_scSeedETop_branch;
	bool photons_scSeedETop_isLoaded;
	vector<float> photons_scSeedEmax_;
	TBranch *photons_scSeedEmax_branch;
	bool photons_scSeedEmax_isLoaded;
	vector<float> photons_scSeedEta_;
	TBranch *photons_scSeedEta_branch;
	bool photons_scSeedEta_isLoaded;
	vector<float> photons_scSeedLeftRightAsym_;
	TBranch *photons_scSeedLeftRightAsym_branch;
	bool photons_scSeedLeftRightAsym_isLoaded;
	vector<float> photons_scSeedPhi_;
	TBranch *photons_scSeedPhi_branch;
	bool photons_scSeedPhi_isLoaded;
	vector<float> photonsscSeedRawEnergy_;
	TBranch *photonsscSeedRawEnergy_branch;
	bool photonsscSeedRawEnergy_isLoaded;
	vector<float> photons_scSeedSigmaIetaIphi_;
	TBranch *photons_scSeedSigmaIetaIphi_branch;
	bool photons_scSeedSigmaIetaIphi_isLoaded;
	vector<float> photonsscSeedSigmaIphiIphi_;
	TBranch *photonsscSeedSigmaIphiIphi_branch;
	bool photonsscSeedSigmaIphiIphi_isLoaded;
	vector<float> photons_scSeedSize_;
	TBranch *photons_scSeedSize_branch;
	bool photons_scSeedSize_isLoaded;
	vector<float> photons_scSeedTopBottomAsym_;
	TBranch *photons_scSeedTopBottomAsym_branch;
	bool photons_scSeedTopBottomAsym_isLoaded;
	vector<float> photons_sigmaEtaEta_;
	TBranch *photons_sigmaEtaEta_branch;
	bool photons_sigmaEtaEta_isLoaded;
	vector<float> photons_sigmaIEtaIEta_;
	TBranch *photons_sigmaIEtaIEta_branch;
	bool photons_sigmaIEtaIEta_isLoaded;
	vector<float> photons_tkIsoHollow03_;
	TBranch *photons_tkIsoHollow03_branch;
	bool photons_tkIsoHollow03_isLoaded;
	vector<float> photons_tkIsoHollow04_;
	TBranch *photons_tkIsoHollow04_branch;
	bool photons_tkIsoHollow04_isLoaded;
	vector<float> photons_tkIsoSolid03_;
	TBranch *photons_tkIsoSolid03_branch;
	bool photons_tkIsoSolid03_isLoaded;
	vector<float> photons_tkIsoSolid04_;
	TBranch *photons_tkIsoSolid04_branch;
	bool photons_tkIsoSolid04_isLoaded;
	vector<float> puInfo_trueNumInteractions_;
	TBranch *puInfo_trueNumInteractions_branch;
	bool puInfo_trueNumInteractions_isLoaded;
	vector<float> convs_chi2_;
	TBranch *convs_chi2_branch;
	bool convs_chi2_isLoaded;
	vector<float> convs_dl_;
	TBranch *convs_dl_branch;
	bool convs_dl_isLoaded;
	vector<float> convs_ndof_;
	TBranch *convs_ndof_branch;
	bool convs_ndof_isLoaded;
	vector<float> sparm_values_;
	TBranch *sparm_values_branch;
	bool sparm_values_isLoaded;
	vector<float> svs_anglePV_;
	TBranch *svs_anglePV_branch;
	bool svs_anglePV_isLoaded;
	vector<float> svs_chi2_;
	TBranch *svs_chi2_branch;
	bool svs_chi2_isLoaded;
	vector<float> svs_dist3Dsig_;
	TBranch *svs_dist3Dsig_branch;
	bool svs_dist3Dsig_isLoaded;
	vector<float> svs_dist3Dval_;
	TBranch *svs_dist3Dval_branch;
	bool svs_dist3Dval_isLoaded;
	vector<float> svs_distXYsig_;
	TBranch *svs_distXYsig_branch;
	bool svs_distXYsig_isLoaded;
	vector<float> svs_distXYval_;
	TBranch *svs_distXYval_branch;
	bool svs_distXYval_isLoaded;
	vector<float> svs_ndof_;
	TBranch *svs_ndof_branch;
	bool svs_ndof_isLoaded;
	vector<float> svs_prob_;
	TBranch *svs_prob_branch;
	bool svs_prob_isLoaded;
	vector<float> svs_xError_;
	TBranch *svs_xError_branch;
	bool svs_xError_isLoaded;
	vector<float> svs_yError_;
	TBranch *svs_yError_branch;
	bool svs_yError_isLoaded;
	vector<float> svs_zError_;
	TBranch *svs_zError_branch;
	bool svs_zError_isLoaded;
	vector<float> ak8jets_area_;
	TBranch *ak8jets_area_branch;
	bool ak8jets_area_isLoaded;
	vector<float> ak8jets_filteredMass_;
	TBranch *ak8jets_filteredMass_branch;
	bool ak8jets_filteredMass_isLoaded;
	vector<float> ak8jets_mass_;
	TBranch *ak8jets_mass_branch;
	bool ak8jets_mass_isLoaded;
	vector<float> ak8jets_minMass_;
	TBranch *ak8jets_minMass_branch;
	bool ak8jets_minMass_isLoaded;
	vector<float> ak8jets_nJettinessTau1_;
	TBranch *ak8jets_nJettinessTau1_branch;
	bool ak8jets_nJettinessTau1_isLoaded;
	vector<float> ak8jets_nJettinessTau2_;
	TBranch *ak8jets_nJettinessTau2_branch;
	bool ak8jets_nJettinessTau2_isLoaded;
	vector<float> ak8jets_nJettinessTau3_;
	TBranch *ak8jets_nJettinessTau3_branch;
	bool ak8jets_nJettinessTau3_isLoaded;
	vector<float> ak8jets_prunedMass_;
	TBranch *ak8jets_prunedMass_branch;
	bool ak8jets_prunedMass_isLoaded;
	vector<float> ak8jets_softdropMass_;
	TBranch *ak8jets_softdropMass_branch;
	bool ak8jets_softdropMass_isLoaded;
	vector<float> ak8jets_topMass_;
	TBranch *ak8jets_topMass_branch;
	bool ak8jets_topMass_isLoaded;
	vector<float> ak8jets_trimmedMass_;
	TBranch *ak8jets_trimmedMass_branch;
	bool ak8jets_trimmedMass_isLoaded;
	vector<float> ak8jets_undoJEC_;
	TBranch *ak8jets_undoJEC_branch;
	bool ak8jets_undoJEC_isLoaded;
	vector<float> vtxs_chi2_;
	TBranch *vtxs_chi2_branch;
	bool vtxs_chi2_isLoaded;
	vector<float> vtxs_ndof_;
	TBranch *vtxs_ndof_branch;
	bool vtxs_ndof_isLoaded;
	vector<float> vtxs_score_;
	TBranch *vtxs_score_branch;
	bool vtxs_score_isLoaded;
	vector<float> vtxs_xError_;
	TBranch *vtxs_xError_branch;
	bool vtxs_xError_isLoaded;
	vector<float> vtxs_yError_;
	TBranch *vtxs_yError_branch;
	bool vtxs_yError_isLoaded;
	vector<float> vtxs_zError_;
	TBranch *vtxs_zError_branch;
	bool vtxs_zError_isLoaded;
	vector<vector<float> > els_clusterCalibEnergy_;
	TBranch *els_clusterCalibEnergy_branch;
	bool els_clusterCalibEnergy_isLoaded;
	vector<vector<float> > els_clusterDEtaToCentroid_;
	TBranch *els_clusterDEtaToCentroid_branch;
	bool els_clusterDEtaToCentroid_isLoaded;
	vector<vector<float> > els_clusterDEtaToSeed_;
	TBranch *els_clusterDEtaToSeed_branch;
	bool els_clusterDEtaToSeed_isLoaded;
	vector<vector<float> > els_clusterDPhiToCentroid_;
	TBranch *els_clusterDPhiToCentroid_branch;
	bool els_clusterDPhiToCentroid_isLoaded;
	vector<vector<float> > els_clusterDPhiToSeed_;
	TBranch *els_clusterDPhiToSeed_branch;
	bool els_clusterDPhiToSeed_isLoaded;
	vector<vector<float> > els_clusterEta_;
	TBranch *els_clusterEta_branch;
	bool els_clusterEta_isLoaded;
	vector<vector<float> > els_clusterPhi_;
	TBranch *els_clusterPhi_branch;
	bool els_clusterPhi_isLoaded;
	vector<vector<float> > els_clusterRawEnergy_;
	TBranch *els_clusterRawEnergy_branch;
	bool els_clusterRawEnergy_isLoaded;
	vector<vector<float> > els_psClusterEta_;
	TBranch *els_psClusterEta_branch;
	bool els_psClusterEta_isLoaded;
	vector<vector<float> > els_psClusterPhi_;
	TBranch *els_psClusterPhi_branch;
	bool els_psClusterPhi_isLoaded;
	vector<vector<float> > els_psClusterRawEnergy_;
	TBranch *els_psClusterRawEnergy_branch;
	bool els_psClusterRawEnergy_isLoaded;
	vector<vector<float> > mus_stationShowerDeltaR_;
	TBranch *mus_stationShowerDeltaR_branch;
	bool mus_stationShowerDeltaR_isLoaded;
	vector<vector<float> > mus_stationShowerSizeT_;
	TBranch *mus_stationShowerSizeT_branch;
	bool mus_stationShowerSizeT_isLoaded;
	vector<vector<float> > pfjets_bDiscriminators_;
	TBranch *pfjets_bDiscriminators_branch;
	bool pfjets_bDiscriminators_isLoaded;
	vector<vector<float> > pfjets_puppi_bDiscriminators_;
	TBranch *pfjets_puppi_bDiscriminators_branch;
	bool pfjets_puppi_bDiscriminators_isLoaded;
	vector<vector<float> > taus_pf_IDs_;
	TBranch *taus_pf_IDs_branch;
	bool taus_pf_IDs_isLoaded;
	vector<vector<float> > photons_clusterCalibEnergy_;
	TBranch *photons_clusterCalibEnergy_branch;
	bool photons_clusterCalibEnergy_isLoaded;
	vector<vector<float> > photons_clusterDEtaToCentroid_;
	TBranch *photons_clusterDEtaToCentroid_branch;
	bool photons_clusterDEtaToCentroid_isLoaded;
	vector<vector<float> > photons_clusterDEtaToSeed_;
	TBranch *photons_clusterDEtaToSeed_branch;
	bool photons_clusterDEtaToSeed_isLoaded;
	vector<vector<float> > photons_clusterDPhiToCentroid_;
	TBranch *photons_clusterDPhiToCentroid_branch;
	bool photons_clusterDPhiToCentroid_isLoaded;
	vector<vector<float> > photons_clusterDPhiToSeed_;
	TBranch *photons_clusterDPhiToSeed_branch;
	bool photons_clusterDPhiToSeed_isLoaded;
	vector<vector<float> > photons_clusterEta_;
	TBranch *photons_clusterEta_branch;
	bool photons_clusterEta_isLoaded;
	vector<vector<float> > photons_clusterPhi_;
	TBranch *photons_clusterPhi_branch;
	bool photons_clusterPhi_isLoaded;
	vector<vector<float> > photons_clusterRawEnergy_;
	TBranch *photons_clusterRawEnergy_branch;
	bool photons_clusterRawEnergy_isLoaded;
	vector<vector<float> > photons_psClusterEta_;
	TBranch *photons_psClusterEta_branch;
	bool photons_psClusterEta_isLoaded;
	vector<vector<float> > photons_psClusterPhi_;
	TBranch *photons_psClusterPhi_branch;
	bool photons_psClusterPhi_isLoaded;
	vector<vector<float> > photons_psClusterRawEnergy_;
	TBranch *photons_psClusterRawEnergy_branch;
	bool photons_psClusterRawEnergy_isLoaded;
	vector<vector<float> > puInfo_instLumi_;
	TBranch *puInfo_instLumi_branch;
	bool puInfo_instLumi_isLoaded;
	vector<vector<float> > vtxs_covMatrix_;
	TBranch *vtxs_covMatrix_branch;
	bool vtxs_covMatrix_isLoaded;
	int evt_bsType_;
	TBranch *evt_bsType_branch;
	bool evt_bsType_isLoaded;
	int evt_bunchCrossing_;
	TBranch *evt_bunchCrossing_branch;
	bool evt_bunchCrossing_isLoaded;
	int evt_experimentType_;
	TBranch *evt_experimentType_branch;
	bool evt_experimentType_isLoaded;
	int evt_isRealData_;
	TBranch *evt_isRealData_branch;
	bool evt_isRealData_isLoaded;
	int evt_orbitNumber_;
	TBranch *evt_orbitNumber_branch;
	bool evt_orbitNumber_isLoaded;
	int evt_storeNumber_;
	TBranch *evt_storeNumber_branch;
	bool evt_storeNumber_isLoaded;
	int hcalnoise_GetRecHitCount_;
	TBranch *hcalnoise_GetRecHitCount_branch;
	bool hcalnoise_GetRecHitCount_isLoaded;
	int hcalnoise_GetRecHitCount15_;
	TBranch *hcalnoise_GetRecHitCount15_branch;
	bool hcalnoise_GetRecHitCount15_isLoaded;
	int hcalnoise_maxHPDHits_;
	TBranch *hcalnoise_maxHPDHits_branch;
	bool hcalnoise_maxHPDHits_isLoaded;
	int hcalnoise_maxHPDNoOtherHits_;
	TBranch *hcalnoise_maxHPDNoOtherHits_branch;
	bool hcalnoise_maxHPDNoOtherHits_isLoaded;
	int hcalnoise_maxRBXHits_;
	TBranch *hcalnoise_maxRBXHits_branch;
	bool hcalnoise_maxRBXHits_isLoaded;
	int hcalnoise_maxZeros_;
	TBranch *hcalnoise_maxZeros_branch;
	bool hcalnoise_maxZeros_isLoaded;
	int hcalnoise_noiseFilterStatus_;
	TBranch *hcalnoise_noiseFilterStatus_branch;
	bool hcalnoise_noiseFilterStatus_isLoaded;
	int hcalnoise_noiseType_;
	TBranch *hcalnoise_noiseType_branch;
	bool hcalnoise_noiseType_isLoaded;
	int hcalnoise_num10GeVHits_;
	TBranch *hcalnoise_num10GeVHits_branch;
	bool hcalnoise_num10GeVHits_isLoaded;
	int hcalnoise_num25GeVHits_;
	TBranch *hcalnoise_num25GeVHits_branch;
	bool hcalnoise_num25GeVHits_isLoaded;
	int hcalnoise_numFlatNoiseChannels_;
	TBranch *hcalnoise_numFlatNoiseChannels_branch;
	bool hcalnoise_numFlatNoiseChannels_isLoaded;
	int hcalnoise_numIsolatedNoiseChannels_;
	TBranch *hcalnoise_numIsolatedNoiseChannels_branch;
	bool hcalnoise_numIsolatedNoiseChannels_isLoaded;
	int hcalnoise_numNegativeNoiseChannels_;
	TBranch *hcalnoise_numNegativeNoiseChannels_branch;
	bool hcalnoise_numNegativeNoiseChannels_isLoaded;
	int hcalnoise_numProblematicRBXs_;
	TBranch *hcalnoise_numProblematicRBXs_branch;
	bool hcalnoise_numProblematicRBXs_isLoaded;
	int hcalnoise_numSpikeNoiseChannels_;
	TBranch *hcalnoise_numSpikeNoiseChannels_branch;
	bool hcalnoise_numSpikeNoiseChannels_isLoaded;
	int hcalnoise_numTS4TS5NoiseChannels_;
	TBranch *hcalnoise_numTS4TS5NoiseChannels_branch;
	bool hcalnoise_numTS4TS5NoiseChannels_isLoaded;
	int hcalnoise_numTriangleNoiseChannels_;
	TBranch *hcalnoise_numTriangleNoiseChannels_branch;
	bool hcalnoise_numTriangleNoiseChannels_isLoaded;
	int hcalnoise_passHighLevelNoiseFilter_;
	TBranch *hcalnoise_passHighLevelNoiseFilter_branch;
	bool hcalnoise_passHighLevelNoiseFilter_isLoaded;
	int hcalnoise_passLooseNoiseFilter_;
	TBranch *hcalnoise_passLooseNoiseFilter_branch;
	bool hcalnoise_passLooseNoiseFilter_isLoaded;
	int hcalnoise_passTightNoiseFilter_;
	TBranch *hcalnoise_passTightNoiseFilter_branch;
	bool hcalnoise_passTightNoiseFilter_isLoaded;
	int pdfinfo_id1_;
	TBranch *pdfinfo_id1_branch;
	bool pdfinfo_id1_isLoaded;
	int pdfinfo_id2_;
	TBranch *pdfinfo_id2_branch;
	bool pdfinfo_id2_isLoaded;
	int sparm_subProcessId_;
	TBranch *sparm_subProcessId_branch;
	bool sparm_subProcessId_isLoaded;
	vector<int> pfjets_METToolbox_chargedHadronMultiplicity_;
	TBranch *pfjets_METToolbox_chargedHadronMultiplicity_branch;
	bool pfjets_METToolbox_chargedHadronMultiplicity_isLoaded;
	vector<int> pfjets_METToolbox_chargedMultiplicity_;
	TBranch *pfjets_METToolbox_chargedMultiplicity_branch;
	bool pfjets_METToolbox_chargedMultiplicity_isLoaded;
	vector<int> pfjets_METToolbox_electronMultiplicity_;
	TBranch *pfjets_METToolbox_electronMultiplicity_branch;
	bool pfjets_METToolbox_electronMultiplicity_isLoaded;
	vector<int> pfjets_METToolbox_muonMultiplicity_;
	TBranch *pfjets_METToolbox_muonMultiplicity_branch;
	bool pfjets_METToolbox_muonMultiplicity_isLoaded;
	vector<int> pfjets_METToolbox_neutralHadronMultiplicity_;
	TBranch *pfjets_METToolbox_neutralHadronMultiplicity_branch;
	bool pfjets_METToolbox_neutralHadronMultiplicity_isLoaded;
	vector<int> pfjets_METToolbox_neutralMultiplicity_;
	TBranch *pfjets_METToolbox_neutralMultiplicity_branch;
	bool pfjets_METToolbox_neutralMultiplicity_isLoaded;
	vector<int> pfjets_METToolbox_photonMultiplicity_;
	TBranch *pfjets_METToolbox_photonMultiplicity_branch;
	bool pfjets_METToolbox_photonMultiplicity_isLoaded;
	vector<int> ak8jets_mc_id_;
	TBranch *ak8jets_mc_id_branch;
	bool ak8jets_mc_id_isLoaded;
	vector<int> els_mc3_id_;
	TBranch *els_mc3_id_branch;
	bool els_mc3_id_isLoaded;
	vector<int> els_mc3idx_;
	TBranch *els_mc3idx_branch;
	bool els_mc3idx_isLoaded;
	vector<int> els_mc3_motherid_;
	TBranch *els_mc3_motherid_branch;
	bool els_mc3_motherid_isLoaded;
	vector<int> els_mc3_motheridx_;
	TBranch *els_mc3_motheridx_branch;
	bool els_mc3_motheridx_isLoaded;
	vector<int> els_mc_id_;
	TBranch *els_mc_id_branch;
	bool els_mc_id_isLoaded;
	vector<int> els_mcidx_;
	TBranch *els_mcidx_branch;
	bool els_mcidx_isLoaded;
	vector<int> els_mc_motherid_;
	TBranch *els_mc_motherid_branch;
	bool els_mc_motherid_isLoaded;
	vector<int> mus_mc3_id_;
	TBranch *mus_mc3_id_branch;
	bool mus_mc3_id_isLoaded;
	vector<int> mus_mc3idx_;
	TBranch *mus_mc3idx_branch;
	bool mus_mc3idx_isLoaded;
	vector<int> mus_mc3_motherid_;
	TBranch *mus_mc3_motherid_branch;
	bool mus_mc3_motherid_isLoaded;
	vector<int> mus_mc3_motheridx_;
	TBranch *mus_mc3_motheridx_branch;
	bool mus_mc3_motheridx_isLoaded;
	vector<int> mus_mc_id_;
	TBranch *mus_mc_id_branch;
	bool mus_mc_id_isLoaded;
	vector<int> mus_mcidx_;
	TBranch *mus_mcidx_branch;
	bool mus_mcidx_isLoaded;
	vector<int> mus_mc_motherid_;
	TBranch *mus_mc_motherid_branch;
	bool mus_mc_motherid_isLoaded;
	vector<int> pfjets_mc3_id_;
	TBranch *pfjets_mc3_id_branch;
	bool pfjets_mc3_id_isLoaded;
	vector<int> pfjets_mc3idx_;
	TBranch *pfjets_mc3idx_branch;
	bool pfjets_mc3idx_isLoaded;
	vector<int> pfjets_mc_gpidx_;
	TBranch *pfjets_mc_gpidx_branch;
	bool pfjets_mc_gpidx_isLoaded;
	vector<int> pfjets_mc_id_;
	TBranch *pfjets_mc_id_branch;
	bool pfjets_mc_id_isLoaded;
	vector<int> pfjets_mcidx_;
	TBranch *pfjets_mcidx_branch;
	bool pfjets_mcidx_isLoaded;
	vector<int> pfjets_mc_motherid_;
	TBranch *pfjets_mc_motherid_branch;
	bool pfjets_mc_motherid_isLoaded;
	vector<int> photons_mc3_id_;
	TBranch *photons_mc3_id_branch;
	bool photons_mc3_id_isLoaded;
	vector<int> photons_mc3idx_;
	TBranch *photons_mc3idx_branch;
	bool photons_mc3idx_isLoaded;
	vector<int> photons_mc3_motherid_;
	TBranch *photons_mc3_motherid_branch;
	bool photons_mc3_motherid_isLoaded;
	vector<int> photons_mc3_motheridx_;
	TBranch *photons_mc3_motheridx_branch;
	bool photons_mc3_motheridx_isLoaded;
	vector<int> photons_mc_id_;
	TBranch *photons_mc_id_branch;
	bool photons_mc_id_isLoaded;
	vector<int> photons_mcidx_;
	TBranch *photons_mcidx_branch;
	bool photons_mcidx_isLoaded;
	vector<int> photons_mc_motherid_;
	TBranch *photons_mc_motherid_branch;
	bool photons_mc_motherid_isLoaded;
	vector<int> els_N_ECALClusters_;
	TBranch *els_N_ECALClusters_branch;
	bool els_N_ECALClusters_isLoaded;
	vector<int> els_N_PSClusters_;
	TBranch *els_N_PSClusters_branch;
	bool els_N_PSClusters_isLoaded;
	vector<int> els_category_;
	TBranch *els_category_branch;
	bool els_category_isLoaded;
	vector<int> els_charge_;
	TBranch *els_charge_branch;
	bool els_charge_isLoaded;
	vector<int> els_ckf_charge_;
	TBranch *els_ckf_charge_branch;
	bool els_ckf_charge_isLoaded;
	vector<int> els_ckf_laywithmeas_;
	TBranch *els_ckf_laywithmeas_branch;
	bool els_ckf_laywithmeas_isLoaded;
	vector<int> els_class_;
	TBranch *els_class_branch;
	bool els_class_isLoaded;
	vector<int> els_exp_innerlayers_;
	TBranch *els_exp_innerlayers_branch;
	bool els_exp_innerlayers_isLoaded;
	vector<int> els_exp_outerlayers_;
	TBranch *els_exp_outerlayers_branch;
	bool els_exp_outerlayers_isLoaded;
	vector<int> els_fiduciality_;
	TBranch *els_fiduciality_branch;
	bool els_fiduciality_isLoaded;
	vector<int> els_isEB_;
	TBranch *els_isEB_branch;
	bool els_isEB_isLoaded;
	vector<int> els_isEcalDriven_;
	TBranch *els_isEcalDriven_branch;
	bool els_isEcalDriven_isLoaded;
	vector<int> els_isTrackerDriven_;
	TBranch *els_isTrackerDriven_branch;
	bool els_isTrackerDriven_isLoaded;
	vector<int> els_lostHits_;
	TBranch *els_lostHits_branch;
	bool els_lostHits_isLoaded;
	vector<int> els_lost_pixelhits_;
	TBranch *els_lost_pixelhits_branch;
	bool els_lost_pixelhits_isLoaded;
	vector<int> els_mc_patMatch_id_;
	TBranch *els_mc_patMatch_id_branch;
	bool els_mc_patMatch_id_isLoaded;
	vector<int> els_nSeed_;
	TBranch *els_nSeed_branch;
	bool els_nSeed_isLoaded;
	vector<int> els_nlayers_;
	TBranch *els_nlayers_branch;
	bool els_nlayers_isLoaded;
	vector<int> els_nlayers3D_;
	TBranch *els_nlayers3D_branch;
	bool els_nlayers3D_isLoaded;
	vector<int> els_nlayersLost_;
	TBranch *els_nlayersLost_branch;
	bool els_nlayersLost_isLoaded;
	vector<int> els_sccharge_;
	TBranch *els_sccharge_branch;
	bool els_sccharge_isLoaded;
	vector<int> els_trk_charge_;
	TBranch *els_trk_charge_branch;
	bool els_trk_charge_isLoaded;
	vector<int> els_type_;
	TBranch *els_type_branch;
	bool els_type_isLoaded;
	vector<int> els_validHits_;
	TBranch *els_validHits_branch;
	bool els_validHits_isLoaded;
	vector<int> els_valid_pixelhits_;
	TBranch *els_valid_pixelhits_branch;
	bool els_valid_pixelhits_isLoaded;
	vector<int> els_passLooseId_;
	TBranch *els_passLooseId_branch;
	bool els_passLooseId_isLoaded;
	vector<int> els_passMediumId_;
	TBranch *els_passMediumId_branch;
	bool els_passMediumId_isLoaded;
	vector<int> els_passTightId_;
	TBranch *els_passTightId_branch;
	bool els_passTightId_isLoaded;
	vector<int> els_passVetoId_;
	TBranch *els_passVetoId_branch;
	bool els_passVetoId_isLoaded;
	vector<int> genps_id_;
	TBranch *genps_id_branch;
	bool genps_id_isLoaded;
	vector<int> genps_id_mother_;
	TBranch *genps_id_mother_branch;
	bool genps_id_mother_isLoaded;
	vector<int> genps_id_simplegrandma_;
	TBranch *genps_id_simplegrandma_branch;
	bool genps_id_simplegrandma_isLoaded;
	vector<int> genps_id_simplemother_;
	TBranch *genps_id_simplemother_branch;
	bool genps_id_simplemother_isLoaded;
	vector<int> genps_idx_mother_;
	TBranch *genps_idx_mother_branch;
	bool genps_idx_mother_isLoaded;
	vector<int> genps_idx_simplemother_;
	TBranch *genps_idx_simplemother_branch;
	bool genps_idx_simplemother_isLoaded;
	vector<int> genps_status_;
	TBranch *genps_status_branch;
	bool genps_status_isLoaded;
	vector<int> hyp_ll_charge_;
	TBranch *hyp_ll_charge_branch;
	bool hyp_ll_charge_isLoaded;
	vector<int> hyp_ll_id_;
	TBranch *hyp_ll_id_branch;
	bool hyp_ll_id_isLoaded;
	vector<int> hyp_ll_index_;
	TBranch *hyp_ll_index_branch;
	bool hyp_ll_index_isLoaded;
	vector<int> hyp_lt_charge_;
	TBranch *hyp_lt_charge_branch;
	bool hyp_lt_charge_isLoaded;
	vector<int> hyp_lt_id_;
	TBranch *hyp_lt_id_branch;
	bool hyp_lt_id_isLoaded;
	vector<int> hyp_lt_index_;
	TBranch *hyp_lt_index_branch;
	bool hyp_lt_index_isLoaded;
	vector<int> hyp_type_;
	TBranch *hyp_type_branch;
	bool hyp_type_isLoaded;
	vector<int> isotracks_IdAssociatedPV_;
	TBranch *isotracks_IdAssociatedPV_branch;
	bool isotracks_IdAssociatedPV_isLoaded;
	vector<int> isotracks_charge_;
	TBranch *isotracks_charge_branch;
	bool isotracks_charge_isLoaded;
	vector<int> isotracks_particleId_;
	TBranch *isotracks_particleId_branch;
	bool isotracks_particleId_isLoaded;
	vector<int> mus_algo_;
	TBranch *mus_algo_branch;
	bool mus_algo_isLoaded;
	vector<int> mus_charge_;
	TBranch *mus_charge_branch;
	bool mus_charge_isLoaded;
	vector<int> mus_ecal_rawId_;
	TBranch *mus_ecal_rawId_branch;
	bool mus_ecal_rawId_isLoaded;
	vector<int> mus_exp_innerlayers_;
	TBranch *mus_exp_innerlayers_branch;
	bool mus_exp_innerlayers_isLoaded;
	vector<int> mus_exp_outerlayers_;
	TBranch *mus_exp_outerlayers_branch;
	bool mus_exp_outerlayers_isLoaded;
	vector<int> mus_gfit_algo_;
	TBranch *mus_gfit_algo_branch;
	bool mus_gfit_algo_isLoaded;
	vector<int> mus_gfit_etaErr_;
	TBranch *mus_gfit_etaErr_branch;
	bool mus_gfit_etaErr_isLoaded;
	vector<int> mus_gfit_exp_innerlayer_;
	TBranch *mus_gfit_exp_innerlayer_branch;
	bool mus_gfit_exp_innerlayer_isLoaded;
	vector<int> mus_gfit_exp_outerlayer_;
	TBranch *mus_gfit_exp_outerlayer_branch;
	bool mus_gfit_exp_outerlayer_isLoaded;
	vector<int> mus_gfit_lostHits_;
	TBranch *mus_gfit_lostHits_branch;
	bool mus_gfit_lostHits_isLoaded;
	vector<int> mus_gfit_lostPixelHits_;
	TBranch *mus_gfit_lostPixelHits_branch;
	bool mus_gfit_lostPixelHits_isLoaded;
	vector<int> mus_gfit_nlayers_;
	TBranch *mus_gfit_nlayers_branch;
	bool mus_gfit_nlayers_isLoaded;
	vector<int> mus_gfit_nlayers3D_;
	TBranch *mus_gfit_nlayers3D_branch;
	bool mus_gfit_nlayers3D_isLoaded;
	vector<int> mus_gfit_nlayersLost_;
	TBranch *mus_gfit_nlayersLost_branch;
	bool mus_gfit_nlayersLost_isLoaded;
	vector<int> mus_gfit_phiErr_;
	TBranch *mus_gfit_phiErr_branch;
	bool mus_gfit_phiErr_isLoaded;
	vector<int> mus_gfit_ptErr_;
	TBranch *mus_gfit_ptErr_branch;
	bool mus_gfit_ptErr_isLoaded;
	vector<int> mus_gfit_qualityMask_;
	TBranch *mus_gfit_qualityMask_branch;
	bool mus_gfit_qualityMask_isLoaded;
	vector<int> mus_gfit_trk_charge_;
	TBranch *mus_gfit_trk_charge_branch;
	bool mus_gfit_trk_charge_isLoaded;
	vector<int> mus_gfit_validHits_;
	TBranch *mus_gfit_validHits_branch;
	bool mus_gfit_validHits_isLoaded;
	vector<int> mus_gfit_validPixelHits_;
	TBranch *mus_gfit_validPixelHits_branch;
	bool mus_gfit_validPixelHits_isLoaded;
	vector<int> mus_gfit_validSTAHits_;
	TBranch *mus_gfit_validSTAHits_branch;
	bool mus_gfit_validSTAHits_isLoaded;
	vector<int> mus_gfit_validSiHits_;
	TBranch *mus_gfit_validSiHits_branch;
	bool mus_gfit_validSiHits_isLoaded;
	vector<int> mus_goodmask_;
	TBranch *mus_goodmask_branch;
	bool mus_goodmask_isLoaded;
	vector<int> mus_hcal_rawId_;
	TBranch *mus_hcal_rawId_branch;
	bool mus_hcal_rawId_isLoaded;
	vector<int> mus_iso03_njets_;
	TBranch *mus_iso03_njets_branch;
	bool mus_iso03_njets_isLoaded;
	vector<int> mus_iso03_ntrk_;
	TBranch *mus_iso03_ntrk_branch;
	bool mus_iso03_ntrk_isLoaded;
	vector<int> mus_iso05_ntrk_;
	TBranch *mus_iso05_ntrk_branch;
	bool mus_iso05_ntrk_isLoaded;
	vector<int> mus_lostHits_;
	TBranch *mus_lostHits_branch;
	bool mus_lostHits_isLoaded;
	vector<int> mus_lostPixelHits_;
	TBranch *mus_lostPixelHits_branch;
	bool mus_lostPixelHits_isLoaded;
	vector<int> mus_mc_patMatch_id_;
	TBranch *mus_mc_patMatch_id_branch;
	bool mus_mc_patMatch_id_isLoaded;
	vector<int> mus_muonBestTrackType_;
	TBranch *mus_muonBestTrackType_branch;
	bool mus_muonBestTrackType_isLoaded;
	vector<int> mus_nOverlaps_;
	TBranch *mus_nOverlaps_branch;
	bool mus_nOverlaps_isLoaded;
	vector<int> mus_nlayers_;
	TBranch *mus_nlayers_branch;
	bool mus_nlayers_isLoaded;
	vector<int> mus_nlayers3D_;
	TBranch *mus_nlayers3D_branch;
	bool mus_nlayers3D_isLoaded;
	vector<int> mus_nlayersLost_;
	TBranch *mus_nlayersLost_branch;
	bool mus_nlayersLost_isLoaded;
	vector<int> mus_nmatches_;
	TBranch *mus_nmatches_branch;
	bool mus_nmatches_isLoaded;
	vector<int> mus_numberOfMatchedStations_;
	TBranch *mus_numberOfMatchedStations_branch;
	bool mus_numberOfMatchedStations_isLoaded;
	vector<int> mus_overlap0_;
	TBranch *mus_overlap0_branch;
	bool mus_overlap0_isLoaded;
	vector<int> mus_overlap1_;
	TBranch *mus_overlap1_branch;
	bool mus_overlap1_isLoaded;
	vector<int> mus_pfcharge_;
	TBranch *mus_pfcharge_branch;
	bool mus_pfcharge_isLoaded;
	vector<int> mus_pfidx_;
	TBranch *mus_pfidx_branch;
	bool mus_pfidx_isLoaded;
	vector<int> mus_pfparticleId_;
	TBranch *mus_pfparticleId_branch;
	bool mus_pfparticleId_isLoaded;
	vector<int> mus_pid_PFMuon_;
	TBranch *mus_pid_PFMuon_branch;
	bool mus_pid_PFMuon_isLoaded;
	vector<int> mus_pid_TM2DCompatibilityLoose_;
	TBranch *mus_pid_TM2DCompatibilityLoose_branch;
	bool mus_pid_TM2DCompatibilityLoose_isLoaded;
	vector<int> mus_pid_TM2DCompatibilityTight_;
	TBranch *mus_pid_TM2DCompatibilityTight_branch;
	bool mus_pid_TM2DCompatibilityTight_isLoaded;
	vector<int> mus_pid_TMLastStationLoose_;
	TBranch *mus_pid_TMLastStationLoose_branch;
	bool mus_pid_TMLastStationLoose_isLoaded;
	vector<int> mus_pid_TMLastStationTight_;
	TBranch *mus_pid_TMLastStationTight_branch;
	bool mus_pid_TMLastStationTight_isLoaded;
	vector<int> mus_qualityMask_;
	TBranch *mus_qualityMask_branch;
	bool mus_qualityMask_isLoaded;
	vector<int> mus_sta_algo_;
	TBranch *mus_sta_algo_branch;
	bool mus_sta_algo_isLoaded;
	vector<int> mus_sta_etaErr_;
	TBranch *mus_sta_etaErr_branch;
	bool mus_sta_etaErr_isLoaded;
	vector<int> mus_sta_exp_innerlayer_;
	TBranch *mus_sta_exp_innerlayer_branch;
	bool mus_sta_exp_innerlayer_isLoaded;
	vector<int> mus_sta_exp_outerlayer_;
	TBranch *mus_sta_exp_outerlayer_branch;
	bool mus_sta_exp_outerlayer_isLoaded;
	vector<int> mus_sta_lostHits_;
	TBranch *mus_sta_lostHits_branch;
	bool mus_sta_lostHits_isLoaded;
	vector<int> mus_sta_lostPixelHits_;
	TBranch *mus_sta_lostPixelHits_branch;
	bool mus_sta_lostPixelHits_isLoaded;
	vector<int> mus_sta_nlayers_;
	TBranch *mus_sta_nlayers_branch;
	bool mus_sta_nlayers_isLoaded;
	vector<int> mus_sta_nlayers3D_;
	TBranch *mus_sta_nlayers3D_branch;
	bool mus_sta_nlayers3D_isLoaded;
	vector<int> mus_sta_nlayersLost_;
	TBranch *mus_sta_nlayersLost_branch;
	bool mus_sta_nlayersLost_isLoaded;
	vector<int> mus_sta_phiErr_;
	TBranch *mus_sta_phiErr_branch;
	bool mus_sta_phiErr_isLoaded;
	vector<int> mus_sta_ptErr_;
	TBranch *mus_sta_ptErr_branch;
	bool mus_sta_ptErr_isLoaded;
	vector<int> mus_sta_qualityMask_;
	TBranch *mus_sta_qualityMask_branch;
	bool mus_sta_qualityMask_isLoaded;
	vector<int> mus_sta_trk_charge_;
	TBranch *mus_sta_trk_charge_branch;
	bool mus_sta_trk_charge_isLoaded;
	vector<int> mus_sta_validHits_;
	TBranch *mus_sta_validHits_branch;
	bool mus_sta_validHits_isLoaded;
	vector<int> mus_sta_validPixelHits_;
	TBranch *mus_sta_validPixelHits_branch;
	bool mus_sta_validPixelHits_isLoaded;
	vector<int> mus_timeDirection_;
	TBranch *mus_timeDirection_branch;
	bool mus_timeDirection_isLoaded;
	vector<int> mus_timeNumStationsUsed_;
	TBranch *mus_timeNumStationsUsed_branch;
	bool mus_timeNumStationsUsed_isLoaded;
	vector<int> mus_trk_charge_;
	TBranch *mus_trk_charge_branch;
	bool mus_trk_charge_isLoaded;
	vector<int> mus_type_;
	TBranch *mus_type_branch;
	bool mus_type_isLoaded;
	vector<int> mus_validHits_;
	TBranch *mus_validHits_branch;
	bool mus_validHits_isLoaded;
	vector<int> mus_validPixelHits_;
	TBranch *mus_validPixelHits_branch;
	bool mus_validPixelHits_isLoaded;
	vector<int> pfcands_IdAssociatedPV_;
	TBranch *pfcands_IdAssociatedPV_branch;
	bool pfcands_IdAssociatedPV_isLoaded;
	vector<int> pfcands_charge_;
	TBranch *pfcands_charge_branch;
	bool pfcands_charge_isLoaded;
	vector<int> pfcands_particleId_;
	TBranch *pfcands_particleId_branch;
	bool pfcands_particleId_isLoaded;
	vector<int> pfjets_chargedHadronMultiplicity_;
	TBranch *pfjets_chargedHadronMultiplicity_branch;
	bool pfjets_chargedHadronMultiplicity_isLoaded;
	vector<int> pfjets_chargedMultiplicity_;
	TBranch *pfjets_chargedMultiplicity_branch;
	bool pfjets_chargedMultiplicity_isLoaded;
	vector<int> pfjets_electronMultiplicity_;
	TBranch *pfjets_electronMultiplicity_branch;
	bool pfjets_electronMultiplicity_isLoaded;
	vector<int> pfjets_hadronFlavour_;
	TBranch *pfjets_hadronFlavour_branch;
	bool pfjets_hadronFlavour_isLoaded;
	vector<int> pfjets_muonMultiplicity_;
	TBranch *pfjets_muonMultiplicity_branch;
	bool pfjets_muonMultiplicity_isLoaded;
	vector<int> pfjets_neutralHadronMultiplicity_;
	TBranch *pfjets_neutralHadronMultiplicity_branch;
	bool pfjets_neutralHadronMultiplicity_isLoaded;
	vector<int> pfjets_neutralMultiplicity_;
	TBranch *pfjets_neutralMultiplicity_branch;
	bool pfjets_neutralMultiplicity_isLoaded;
	vector<int> pfjets_partonFlavour_;
	TBranch *pfjets_partonFlavour_branch;
	bool pfjets_partonFlavour_isLoaded;
	vector<int> pfjets_photonMultiplicity_;
	TBranch *pfjets_photonMultiplicity_branch;
	bool pfjets_photonMultiplicity_isLoaded;
	vector<int> pfjets_puppi_chargedHadronMultiplicity_;
	TBranch *pfjets_puppi_chargedHadronMultiplicity_branch;
	bool pfjets_puppi_chargedHadronMultiplicity_isLoaded;
	vector<int> pfjets_puppi_chargedMultiplicity_;
	TBranch *pfjets_puppi_chargedMultiplicity_branch;
	bool pfjets_puppi_chargedMultiplicity_isLoaded;
	vector<int> pfjets_puppi_electronMultiplicity_;
	TBranch *pfjets_puppi_electronMultiplicity_branch;
	bool pfjets_puppi_electronMultiplicity_isLoaded;
	vector<int> pfjets_puppi_hadronFlavour_;
	TBranch *pfjets_puppi_hadronFlavour_branch;
	bool pfjets_puppi_hadronFlavour_isLoaded;
	vector<int> pfjets_puppi_muonMultiplicity_;
	TBranch *pfjets_puppi_muonMultiplicity_branch;
	bool pfjets_puppi_muonMultiplicity_isLoaded;
	vector<int> pfjets_puppi_neutralHadronMultiplicity_;
	TBranch *pfjets_puppi_neutralHadronMultiplicity_branch;
	bool pfjets_puppi_neutralHadronMultiplicity_isLoaded;
	vector<int> pfjets_puppi_neutralMultiplicity_;
	TBranch *pfjets_puppi_neutralMultiplicity_branch;
	bool pfjets_puppi_neutralMultiplicity_isLoaded;
	vector<int> pfjets_puppi_partonFlavour_;
	TBranch *pfjets_puppi_partonFlavour_branch;
	bool pfjets_puppi_partonFlavour_isLoaded;
	vector<int> pfjets_puppi_photonMultiplicity_;
	TBranch *pfjets_puppi_photonMultiplicity_branch;
	bool pfjets_puppi_photonMultiplicity_isLoaded;
	vector<int> taus_pf_charge_;
	TBranch *taus_pf_charge_branch;
	bool taus_pf_charge_isLoaded;
	vector<int> photons_N_ECALClusters_;
	TBranch *photons_N_ECALClusters_branch;
	bool photons_N_ECALClusters_isLoaded;
	vector<int> photons_N_PSClusters_;
	TBranch *photons_N_PSClusters_branch;
	bool photons_N_PSClusters_isLoaded;
	vector<int> photons_fiduciality_;
	TBranch *photons_fiduciality_branch;
	bool photons_fiduciality_isLoaded;
	vector<int> photons_isEB_;
	TBranch *photons_isEB_branch;
	bool photons_isEB_isLoaded;
	vector<int> photons_photonID_loose_;
	TBranch *photons_photonID_loose_branch;
	bool photons_photonID_loose_isLoaded;
	vector<int> photons_photonID_tight_;
	TBranch *photons_photonID_tight_branch;
	bool photons_photonID_tight_isLoaded;
	vector<int> puInfo_bunchCrossing_;
	TBranch *puInfo_bunchCrossing_branch;
	bool puInfo_bunchCrossing_isLoaded;
	vector<int> puInfo_nPUvertices_;
	TBranch *puInfo_nPUvertices_branch;
	bool puInfo_nPUvertices_isLoaded;
	vector<int> convs_algo_;
	TBranch *convs_algo_branch;
	bool convs_algo_isLoaded;
	vector<int> convs_isConverted_;
	TBranch *convs_isConverted_branch;
	bool convs_isConverted_isLoaded;
	vector<int> convs_quality_;
	TBranch *convs_quality_branch;
	bool convs_quality_isLoaded;
	vector<int> svs_nTrks_;
	TBranch *svs_nTrks_branch;
	bool svs_nTrks_isLoaded;
	vector<int> ak8jets_nSubJets_;
	TBranch *ak8jets_nSubJets_branch;
	bool ak8jets_nSubJets_isLoaded;
	vector<int> ak8jets_partonFlavour_;
	TBranch *ak8jets_partonFlavour_branch;
	bool ak8jets_partonFlavour_isLoaded;
	vector<int> vtxs_isFake_;
	TBranch *vtxs_isFake_branch;
	bool vtxs_isFake_isLoaded;
	vector<int> vtxs_isValid_;
	TBranch *vtxs_isValid_branch;
	bool vtxs_isValid_isLoaded;
	vector<vector<int> > pfjets_METToolbox_pfcandIndicies_;
	TBranch *pfjets_METToolbox_pfcandIndicies_branch;
	bool pfjets_METToolbox_pfcandIndicies_isLoaded;
	vector<vector<int> > els_clusterInDynDPhi_;
	TBranch *els_clusterInDynDPhi_branch;
	bool els_clusterInDynDPhi_isLoaded;
	vector<vector<int> > els_clusterInMustache_;
	TBranch *els_clusterInMustache_branch;
	bool els_clusterInMustache_isLoaded;
	vector<vector<int> > els_PFCand_idx_;
	TBranch *els_PFCand_idx_branch;
	bool els_PFCand_idx_isLoaded;
	vector<vector<int> > genps_lepdaughter_id_;
	TBranch *genps_lepdaughter_id_branch;
	bool genps_lepdaughter_id_isLoaded;
	vector<vector<int> > genps_lepdaughter_idx_;
	TBranch *genps_lepdaughter_idx_branch;
	bool genps_lepdaughter_idx_isLoaded;
	vector<vector<int> > hlt_trigObjs_id_;
	TBranch *hlt_trigObjs_id_branch;
	bool hlt_trigObjs_id_isLoaded;
	vector<vector<int> > mus_nStationCorrelatedHits_;
	TBranch *mus_nStationCorrelatedHits_branch;
	bool mus_nStationCorrelatedHits_isLoaded;
	vector<vector<int> > mus_nStationHits_;
	TBranch *mus_nStationHits_branch;
	bool mus_nStationHits_isLoaded;
	vector<vector<int> > pfjets_pfcandIndicies_;
	TBranch *pfjets_pfcandIndicies_branch;
	bool pfjets_pfcandIndicies_isLoaded;
	vector<vector<int> > pfjets_puppi_pfcandIndicies_;
	TBranch *pfjets_puppi_pfcandIndicies_branch;
	bool pfjets_puppi_pfcandIndicies_isLoaded;
	vector<vector<int> > photons_clusterInDynDPhi_;
	TBranch *photons_clusterInDynDPhi_branch;
	bool photons_clusterInDynDPhi_isLoaded;
	vector<vector<int> > photons_clusterInMustache_;
	TBranch *photons_clusterInMustache_branch;
	bool photons_clusterInMustache_isLoaded;
	vector<vector<int> > photons_PFCand_idx_;
	TBranch *photons_PFCand_idx_branch;
	bool photons_PFCand_idx_isLoaded;
	vector<vector<int> > convs_nHitsBeforeVtx_;
	TBranch *convs_nHitsBeforeVtx_branch;
	bool convs_nHitsBeforeVtx_isLoaded;
	vector<vector<int> > convs_tkalgo_;
	TBranch *convs_tkalgo_branch;
	bool convs_tkalgo_isLoaded;
	vector<vector<int> > convs_tkidx_;
	TBranch *convs_tkidx_branch;
	bool convs_tkidx_isLoaded;
	vector<vector<int> > ak8jets_pfcandIndicies_;
	TBranch *ak8jets_pfcandIndicies_branch;
	bool ak8jets_pfcandIndicies_isLoaded;
	vector<unsigned char> isotracks_fromPV_;
	TBranch *isotracks_fromPV_branch;
	bool isotracks_fromPV_isLoaded;
	vector<unsigned char> isotracks_pvAssociationQuality_;
	TBranch *isotracks_pvAssociationQuality_branch;
	bool isotracks_pvAssociationQuality_isLoaded;
	vector<unsigned char> pfcands_fromPV_;
	TBranch *pfcands_fromPV_branch;
	bool pfcands_fromPV_isLoaded;
	vector<unsigned char> pfcands_pvAssociationQuality_;
	TBranch *pfcands_pvAssociationQuality_branch;
	bool pfcands_pvAssociationQuality_isLoaded;
	unsigned int els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version_;
	TBranch *els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version_branch;
	bool els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_version_;
	TBranch *els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_version_branch;
	bool els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_version_;
	TBranch *els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_version_branch;
	bool els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele17_Ele8_L1sL1DoubleEG137_version_;
	TBranch *els_HLT_Ele17_Ele8_L1sL1DoubleEG137_version_branch;
	bool els_HLT_Ele17_Ele8_L1sL1DoubleEG137_version_isLoaded;
	unsigned int els_HLT_Ele17_Ele8_LeadingLeg_version_;
	TBranch *els_HLT_Ele17_Ele8_LeadingLeg_version_branch;
	bool els_HLT_Ele17_Ele8_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele17_Ele8_Mass50_LeadingLeg_version_;
	TBranch *els_HLT_Ele17_Ele8_Mass50_LeadingLeg_version_branch;
	bool els_HLT_Ele17_Ele8_Mass50_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele17_Ele8_Mass50_TrailingLeg_version_;
	TBranch *els_HLT_Ele17_Ele8_Mass50_TrailingLeg_version_branch;
	bool els_HLT_Ele17_Ele8_Mass50_TrailingLeg_version_isLoaded;
	unsigned int els_HLT_Ele17_Ele8_TrailingLeg_version_;
	TBranch *els_HLT_Ele17_Ele8_TrailingLeg_version_branch;
	bool els_HLT_Ele17_Ele8_TrailingLeg_version_isLoaded;
	unsigned int els_HLT_Ele17_Ele8_version_;
	TBranch *els_HLT_Ele17_Ele8_version_branch;
	bool els_HLT_Ele17_Ele8_version_isLoaded;
	unsigned int els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele20_SC4_Mass50_LeadingLeg_version_;
	TBranch *els_HLT_Ele20_SC4_Mass50_LeadingLeg_version_branch;
	bool els_HLT_Ele20_SC4_Mass50_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele20_SC4_Mass50_TrailingLeg_version_;
	TBranch *els_HLT_Ele20_SC4_Mass50_TrailingLeg_version_branch;
	bool els_HLT_Ele20_SC4_Mass50_TrailingLeg_version_isLoaded;
	unsigned int els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_version_;
	TBranch *els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_version_branch;
	bool els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_version_;
	TBranch *els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_version_branch;
	bool els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_version_isLoaded;
	unsigned int els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_version_;
	TBranch *els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_version_branch;
	bool els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_version_isLoaded;
	unsigned int els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_version_;
	TBranch *els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_version_branch;
	bool els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele25WP60_Ele8_Mass55_version_;
	TBranch *els_HLT_Ele25WP60_Ele8_Mass55_version_branch;
	bool els_HLT_Ele25WP60_Ele8_Mass55_version_isLoaded;
	unsigned int els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_version_;
	TBranch *els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_version_branch;
	bool els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele25WP60_SC4_Mass55_version_;
	TBranch *els_HLT_Ele25WP60_SC4_Mass55_version_branch;
	bool els_HLT_Ele25WP60_SC4_Mass55_version_isLoaded;
	unsigned int els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_version_;
	TBranch *els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_version_branch;
	bool els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_version_isLoaded;
	unsigned int els_HLT_Ele27_WP80_version_;
	TBranch *els_HLT_Ele27_WP80_version_branch;
	bool els_HLT_Ele27_WP80_version_isLoaded;
	unsigned int els_HLT_Ele32_SC17_Mass50_LeadingLeg_version_;
	TBranch *els_HLT_Ele32_SC17_Mass50_LeadingLeg_version_branch;
	bool els_HLT_Ele32_SC17_Mass50_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele32_SC17_Mass50_TrailingLeg_version_;
	TBranch *els_HLT_Ele32_SC17_Mass50_TrailingLeg_version_branch;
	bool els_HLT_Ele32_SC17_Mass50_TrailingLeg_version_isLoaded;
	unsigned int els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_version_;
	TBranch *els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_version_branch;
	bool els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_version_isLoaded;
	unsigned int els_HLT_Ele5_SC5_JPsi_Mass2to4p5_version_;
	TBranch *els_HLT_Ele5_SC5_JPsi_Mass2to4p5_version_branch;
	bool els_HLT_Ele5_SC5_JPsi_Mass2to4p5_version_isLoaded;
	unsigned int els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_;
	TBranch *els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_branch;
	bool els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Mu17_Ele8_TrailingLeg_version_;
	TBranch *els_HLT_Mu17_Ele8_TrailingLeg_version_branch;
	bool els_HLT_Mu17_Ele8_TrailingLeg_version_isLoaded;
	unsigned int els_HLT_Mu17_Ele8_version_;
	TBranch *els_HLT_Mu17_Ele8_version_branch;
	bool els_HLT_Mu17_Ele8_version_isLoaded;
	unsigned int els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version_;
	TBranch *els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version_branch;
	bool els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Mu8_Ele17_version_;
	TBranch *els_HLT_Mu8_Ele17_version_branch;
	bool els_HLT_Mu8_Ele17_version_isLoaded;
	unsigned int els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version_;
	TBranch *els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version_branch;
	bool els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version_isLoaded;
	unsigned int els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version_;
	TBranch *els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version_branch;
	bool els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version_isLoaded;
	unsigned int evt_nels_;
	TBranch *evt_nels_branch;
	bool evt_nels_isLoaded;
	unsigned int evt_detectorStatus_;
	TBranch *evt_detectorStatus_branch;
	bool evt_detectorStatus_isLoaded;
	unsigned int evt_lumiBlock_;
	TBranch *evt_lumiBlock_branch;
	bool evt_lumiBlock_isLoaded;
	unsigned int evt_run_;
	TBranch *evt_run_branch;
	bool evt_run_isLoaded;
	unsigned int evt_ngenjetsNoMuNoNu_;
	TBranch *evt_ngenjetsNoMuNoNu_branch;
	bool evt_ngenjetsNoMuNoNu_isLoaded;
	unsigned int genps_signalProcessID_;
	TBranch *genps_signalProcessID_branch;
	bool genps_signalProcessID_isLoaded;
	unsigned int mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_version_;
	TBranch *mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_version_branch;
	bool mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_version_isLoaded;
	unsigned int mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_version_;
	TBranch *mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_version_branch;
	bool mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_version_isLoaded;
	unsigned int mus_HLT_IsoMu24_eta2p1_version_;
	TBranch *mus_HLT_IsoMu24_eta2p1_version_branch;
	bool mus_HLT_IsoMu24_eta2p1_version_isLoaded;
	unsigned int mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_version_;
	TBranch *mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_version_branch;
	bool mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_version_isLoaded;
	unsigned int mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_version_;
	TBranch *mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_version_branch;
	bool mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_Ele8_LeadingLeg_version_;
	TBranch *mus_HLT_Mu17_Ele8_LeadingLeg_version_branch;
	bool mus_HLT_Mu17_Ele8_LeadingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_Ele8_version_;
	TBranch *mus_HLT_Mu17_Ele8_version_branch;
	bool mus_HLT_Mu17_Ele8_version_isLoaded;
	unsigned int mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_version_;
	TBranch *mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_version_branch;
	bool mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_version_isLoaded;
	unsigned int mus_HLT_Mu17_Mu8_LeadingLeg_version_;
	TBranch *mus_HLT_Mu17_Mu8_LeadingLeg_version_branch;
	bool mus_HLT_Mu17_Mu8_LeadingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_Mu8_TrailingLeg_version_;
	TBranch *mus_HLT_Mu17_Mu8_TrailingLeg_version_branch;
	bool mus_HLT_Mu17_Mu8_TrailingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_Mu8_version_;
	TBranch *mus_HLT_Mu17_Mu8_version_branch;
	bool mus_HLT_Mu17_Mu8_version_isLoaded;
	unsigned int mus_HLT_Mu17_TkMu8_LeadingLeg_version_;
	TBranch *mus_HLT_Mu17_TkMu8_LeadingLeg_version_branch;
	bool mus_HLT_Mu17_TkMu8_LeadingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_version_;
	TBranch *mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_version_branch;
	bool mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_version_isLoaded;
	unsigned int mus_HLT_Mu17_TkMu8_TrailingLeg_version_;
	TBranch *mus_HLT_Mu17_TkMu8_TrailingLeg_version_branch;
	bool mus_HLT_Mu17_TkMu8_TrailingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_TkMu8_version_;
	TBranch *mus_HLT_Mu17_TkMu8_version_branch;
	bool mus_HLT_Mu17_TkMu8_version_isLoaded;
	unsigned int mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_version_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_version_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_version_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_version_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_version_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_version_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_version_isLoaded;
	unsigned int mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_version_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_version_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_version_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_version_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_version_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_version_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_version_isLoaded;
	unsigned int mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_version_;
	TBranch *mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_version_branch;
	bool mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_version_isLoaded;
	unsigned int mus_HLT_Mu8_Ele17_TrailingLeg_version_;
	TBranch *mus_HLT_Mu8_Ele17_TrailingLeg_version_branch;
	bool mus_HLT_Mu8_Ele17_TrailingLeg_version_isLoaded;
	unsigned int mus_HLT_Mu8_Ele17_version_;
	TBranch *mus_HLT_Mu8_Ele17_version_branch;
	bool mus_HLT_Mu8_Ele17_version_isLoaded;
	unsigned int mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_version_;
	TBranch *mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_version_branch;
	bool mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_version_isLoaded;
	unsigned int mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_version_;
	TBranch *mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_version_branch;
	bool mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_version_isLoaded;
	unsigned int evt_nphotons_;
	TBranch *evt_nphotons_branch;
	bool evt_nphotons_isLoaded;
	unsigned int evt_nvtxs_;
	TBranch *evt_nvtxs_branch;
	bool evt_nvtxs_isLoaded;
	vector<unsigned int> els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_;
	TBranch *els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_branch;
	bool els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_;
	TBranch *els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_branch;
	bool els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_;
	TBranch *els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_branch;
	bool els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele17_Ele8_;
	TBranch *els_HLT_Ele17_Ele8_branch;
	bool els_HLT_Ele17_Ele8_isLoaded;
	vector<unsigned int> els_HLT_Ele17_Ele8_L1sL1DoubleEG137_;
	TBranch *els_HLT_Ele17_Ele8_L1sL1DoubleEG137_branch;
	bool els_HLT_Ele17_Ele8_L1sL1DoubleEG137_isLoaded;
	vector<unsigned int> els_HLT_Ele17_Ele8_LeadingLeg_;
	TBranch *els_HLT_Ele17_Ele8_LeadingLeg_branch;
	bool els_HLT_Ele17_Ele8_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele17_Ele8_Mass50_LeadingLeg_;
	TBranch *els_HLT_Ele17_Ele8_Mass50_LeadingLeg_branch;
	bool els_HLT_Ele17_Ele8_Mass50_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele17_Ele8_Mass50_TrailingLeg_;
	TBranch *els_HLT_Ele17_Ele8_Mass50_TrailingLeg_branch;
	bool els_HLT_Ele17_Ele8_Mass50_TrailingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele17_Ele8_TrailingLeg_;
	TBranch *els_HLT_Ele17_Ele8_TrailingLeg_branch;
	bool els_HLT_Ele17_Ele8_TrailingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele20_SC4_Mass50_LeadingLeg_;
	TBranch *els_HLT_Ele20_SC4_Mass50_LeadingLeg_branch;
	bool els_HLT_Ele20_SC4_Mass50_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele20_SC4_Mass50_TrailingLeg_;
	TBranch *els_HLT_Ele20_SC4_Mass50_TrailingLeg_branch;
	bool els_HLT_Ele20_SC4_Mass50_TrailingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_;
	TBranch *els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_branch;
	bool els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_isLoaded;
	vector<unsigned int> els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_;
	TBranch *els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_branch;
	bool els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_;
	TBranch *els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_branch;
	bool els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele25WP60_Ele8_Mass55_;
	TBranch *els_HLT_Ele25WP60_Ele8_Mass55_branch;
	bool els_HLT_Ele25WP60_Ele8_Mass55_isLoaded;
	vector<unsigned int> els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_;
	TBranch *els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_branch;
	bool els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele25WP60_SC4_Mass55_;
	TBranch *els_HLT_Ele25WP60_SC4_Mass55_branch;
	bool els_HLT_Ele25WP60_SC4_Mass55_isLoaded;
	vector<unsigned int> els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_;
	TBranch *els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_branch;
	bool els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele27_WP80_;
	TBranch *els_HLT_Ele27_WP80_branch;
	bool els_HLT_Ele27_WP80_isLoaded;
	vector<unsigned int> els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_;
	TBranch *els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_branch;
	bool els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_isLoaded;
	vector<unsigned int> els_HLT_Ele32_SC17_Mass50_LeadingLeg_;
	TBranch *els_HLT_Ele32_SC17_Mass50_LeadingLeg_branch;
	bool els_HLT_Ele32_SC17_Mass50_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele32_SC17_Mass50_TrailingLeg_;
	TBranch *els_HLT_Ele32_SC17_Mass50_TrailingLeg_branch;
	bool els_HLT_Ele32_SC17_Mass50_TrailingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele5_SC5_JPsi_Mass2to4p5_;
	TBranch *els_HLT_Ele5_SC5_JPsi_Mass2to4p5_branch;
	bool els_HLT_Ele5_SC5_JPsi_Mass2to4p5_isLoaded;
	vector<unsigned int> els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_;
	TBranch *els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_branch;
	bool els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_isLoaded;
	vector<unsigned int> els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_;
	TBranch *els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_branch;
	bool els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Mu17_Ele8_;
	TBranch *els_HLT_Mu17_Ele8_branch;
	bool els_HLT_Mu17_Ele8_isLoaded;
	vector<unsigned int> els_HLT_Mu17_Ele8_TrailingLeg_;
	TBranch *els_HLT_Mu17_Ele8_TrailingLeg_branch;
	bool els_HLT_Mu17_Ele8_TrailingLeg_isLoaded;
	vector<unsigned int> els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_;
	TBranch *els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_branch;
	bool els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Mu8_Ele17_;
	TBranch *els_HLT_Mu8_Ele17_branch;
	bool els_HLT_Mu8_Ele17_isLoaded;
	vector<unsigned int> els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_;
	TBranch *els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_branch;
	bool els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_isLoaded;
	vector<unsigned int> els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_;
	TBranch *els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_branch;
	bool els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_isLoaded;
	vector<unsigned int> hlt_l1prescales_;
	TBranch *hlt_l1prescales_branch;
	bool hlt_l1prescales_isLoaded;
	vector<unsigned int> hlt_prescales_;
	TBranch *hlt_prescales_branch;
	bool hlt_prescales_isLoaded;
	vector<unsigned int> mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_;
	TBranch *mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_branch;
	bool mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_isLoaded;
	vector<unsigned int> mus_HLT_IsoMu24_eta2p1_;
	TBranch *mus_HLT_IsoMu24_eta2p1_branch;
	bool mus_HLT_IsoMu24_eta2p1_isLoaded;
	vector<unsigned int> mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_;
	TBranch *mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_branch;
	bool mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_isLoaded;
	vector<unsigned int> mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_;
	TBranch *mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_branch;
	bool mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_;
	TBranch *mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_branch;
	bool mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_Ele8_;
	TBranch *mus_HLT_Mu17_Ele8_branch;
	bool mus_HLT_Mu17_Ele8_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_Ele8_LeadingLeg_;
	TBranch *mus_HLT_Mu17_Ele8_LeadingLeg_branch;
	bool mus_HLT_Mu17_Ele8_LeadingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_Mu8_;
	TBranch *mus_HLT_Mu17_Mu8_branch;
	bool mus_HLT_Mu17_Mu8_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_;
	TBranch *mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_branch;
	bool mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_Mu8_LeadingLeg_;
	TBranch *mus_HLT_Mu17_Mu8_LeadingLeg_branch;
	bool mus_HLT_Mu17_Mu8_LeadingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_Mu8_TrailingLeg_;
	TBranch *mus_HLT_Mu17_Mu8_TrailingLeg_branch;
	bool mus_HLT_Mu17_Mu8_TrailingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TkMu8_;
	TBranch *mus_HLT_Mu17_TkMu8_branch;
	bool mus_HLT_Mu17_TkMu8_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TkMu8_LeadingLeg_;
	TBranch *mus_HLT_Mu17_TkMu8_LeadingLeg_branch;
	bool mus_HLT_Mu17_TkMu8_LeadingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TkMu8_TrailingLeg_;
	TBranch *mus_HLT_Mu17_TkMu8_TrailingLeg_branch;
	bool mus_HLT_Mu17_TkMu8_TrailingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_;
	TBranch *mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_branch;
	bool mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_;
	TBranch *mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_branch;
	bool mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_;
	TBranch *mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_branch;
	bool mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu8_Ele17_;
	TBranch *mus_HLT_Mu8_Ele17_branch;
	bool mus_HLT_Mu8_Ele17_isLoaded;
	vector<unsigned int> mus_HLT_Mu8_Ele17_TrailingLeg_;
	TBranch *mus_HLT_Mu8_Ele17_TrailingLeg_branch;
	bool mus_HLT_Mu8_Ele17_TrailingLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_;
	TBranch *mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_branch;
	bool mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_isLoaded;
	vector<unsigned int> mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_;
	TBranch *mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_branch;
	bool mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_isLoaded;
	ULong64_t evt_event_;
	TBranch *evt_event_branch;
	bool evt_event_isLoaded;
	vector<ULong64_t> evt_timestamp_;
	TBranch *evt_timestamp_branch;
	bool evt_timestamp_isLoaded;
	unsigned long long	evt_nEvts_;
	TBranch *evt_nEvts_branch;
	bool evt_nEvts_isLoaded;
	unsigned long long	evt_nEvts_effective_;
	TBranch *evt_nEvts_effective_branch;
	bool evt_nEvts_effective_isLoaded;
	float	evt_filt_eff_;
	TBranch *evt_filt_eff_branch;
	bool evt_filt_eff_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
	const vector<string> &genweightsID();
	const TBits &hlt_bits();
	const vector<TString> &evt_CMS3tag();
	const vector<TString> &evt_dataset();
	const vector<TString> &hlt_trigNames();
	const vector<TString> &pfjets_bDiscriminatorNames();
	const vector<TString> &pfjets_puppi_bDiscriminatorNames();
	const vector<TString> &taus_pf_IDnames();
	const vector<TString> &sparm_comment();
	const vector<TString> &sparm_names();
	const vector<vector<TString> > &hlt_trigObjs_filters();
	const bool &hcalnoise_HasBadRBXRechitR45Loose();
	const bool &hcalnoise_HasBadRBXRechitR45Tight();
	const bool &hcalnoise_HasBadRBXTS4TS5();
	const bool &hcalnoise_goodJetFoundInLowBVRegion();
	const bool &evt_cscTightHaloId();
	const bool &evt_hbheFilter();
	const bool &filt_cscBeamHalo();
	const bool &filt_ecalLaser();
	const bool &filt_ecalTP();
	const bool &filt_eeBadSc();
	const bool &filt_goodVertices();
	const bool &filt_hbheNoise();
	const bool &filt_hcalLaser();
	const bool &filt_metfilter();
	const bool &filt_trackingFailure();
	const bool &filt_trkPOGFilters();
	const bool &filt_trkPOG_logErrorTooManyClusters();
	const bool &filt_trkPOG_manystripclus53X();
	const bool &filt_trkPOG_toomanystripclus53X();
	const vector<bool> &els_conv_vtx_flag();
	const vector<bool> &els_isGsfCtfScPixChargeConsistent();
	const vector<bool> &els_passingMvaPreselection();
	const vector<bool> &els_passingPflowPreselection();
	const vector<bool> &genps_fromHardProcessBeforeFSR();
	const vector<bool> &genps_fromHardProcessDecayed();
	const vector<bool> &genps_fromHardProcessFinalState();
	const vector<bool> &genps_isDirectHardProcessTauDecayProductFinalState();
	const vector<bool> &genps_isDirectPromptTauDecayProductFinalState();
	const vector<bool> &genps_isHardProcess();
	const vector<bool> &genps_isLastCopy();
	const vector<bool> &genps_isLastCopyBeforeFSR();
	const vector<bool> &genps_isMostlyLikePythia6Status3();
	const vector<bool> &genps_isPromptDecayed();
	const vector<bool> &genps_isPromptFinalState();
	const vector<bool> &mus_isRPCMuon();
	const vector<bool> &mus_tightMatch();
	const vector<bool> &mus_updatedSta();
	const vector<bool> &pfcands_isGlobalMuon();
	const vector<bool> &pfcands_isStandAloneMuon();
	const vector<bool> &photons_haspixelSeed();
	const vector<bool> &photons_passElectronVeto();
	const vector<vector<bool> > &hlt_trigObjs_passLast();
	const float &evt_METToolbox_pfmet();
	const float &evt_METToolbox_pfmetPhi();
	const float &evt_METToolbox_pfmetPhi_raw();
	const float &evt_METToolbox_pfmet_raw();
	const float &evt_METToolboxNoHF_pfmet();
	const float &evt_METToolboxNoHF_pfmetPhi();
	const float &evt_METToolboxNoHF_pfmetPhi_raw();
	const float &evt_METToolboxNoHF_pfmet_raw();
	const float &evt_bs_Xwidth();
	const float &evt_bs_XwidthErr();
	const float &evt_bs_Ywidth();
	const float &evt_bs_YwidthErr();
	const float &evt_bs_dxdz();
	const float &evt_bs_dxdzErr();
	const float &evt_bs_dydz();
	const float &evt_bs_dydzErr();
	const float &evt_bs_sigmaZ();
	const float &evt_bs_sigmaZErr();
	const float &evt_bs_xErr();
	const float &evt_bs_yErr();
	const float &evt_bs_zErr();
	const float &evt_bField();
	const float &evt_fixgrid_all_rho();
	const float &evt_fixgridfastjet_allcalo_rho();
	const float &evt_fixgridfastjet_all_rho();
	const float &evt_fixgridfastjetMETTools_all_rho();
	const float &evt_fixgridfastjet_centralcalo_rho();
	const float &evt_fixgridfastjet_centralchargedpileup_rho();
	const float &evt_fixgridfastjet_centralneutral_rho();
	const float &evt_kfactor();
	const float &evt_scale1fb();
	const float &evt_xsec_excl();
	const float &evt_xsec_incl();
	const float &genps_alphaQCD();
	const float &genps_pthat();
	const float &genps_qScale();
	const float &genps_weight();
	const float &gen_sumEt();
	const float &hcalnoise_GetRecHitEnergy();
	const float &hcalnoise_GetRecHitEnergy15();
	const float &hcalnoise_GetTotalCalibCharge();
	const float &hcalnoise_NegativeNoiseSumE();
	const float &hcalnoise_NegativeNoiseSumEt();
	const float &hcalnoise_TS4TS5NoiseSumE();
	const float &hcalnoise_TS4TS5NoiseSumEt();
	const float &hcalnoise_eventChargeFraction();
	const float &hcalnoise_eventEMEnergy();
	const float &hcalnoise_eventEMFraction();
	const float &hcalnoise_eventHadEnergy();
	const float &hcalnoise_eventTrackEnergy();
	const float &hcalnoise_flatNoiseSumE();
	const float &hcalnoise_flatNoiseSumEt();
	const float &hcalnoise_isolatedNoiseSumE();
	const float &hcalnoise_isolatedNoiseSumEt();
	const float &hcalnoise_max10GeVHitTime();
	const float &hcalnoise_max25GeVHitTime();
	const float &hcalnoise_maxE10TS();
	const float &hcalnoise_maxE2Over10TS();
	const float &hcalnoise_maxE2TS();
	const float &hcalnoise_min10GeVHitTime();
	const float &hcalnoise_min25GeVHitTime();
	const float &hcalnoise_minE10TS();
	const float &hcalnoise_minE2Over10TS();
	const float &hcalnoise_minE2TS();
	const float &hcalnoise_minHPDEMF();
	const float &hcalnoise_minRBXEMF();
	const float &hcalnoise_rms10GeVHitTime();
	const float &hcalnoise_rms25GeVHitTime();
	const float &hcalnoise_spikeNoiseSumE();
	const float &hcalnoise_spikeNoiseSumEt();
	const float &hcalnoise_triangleNoiseSumE();
	const float &hcalnoise_triangleNoiseSumEt();
	const float &pdfinfo_pdf1();
	const float &pdfinfo_pdf2();
	const float &pdfinfo_scale();
	const float &pdfinfo_x1();
	const float &pdfinfo_x2();
	const float &evt_fixgrid_rho_all();
	const float &evt_fixgrid_rho_ctr();
	const float &evt_fixgrid_rho_fwd();
	const float &evt_calomet();
	const float &evt_calometPhi();
	const float &evt_pfmet();
	const float &evt_pfmetPhi();
	const float &evt_pfmetPhi_raw();
	const float &evt_pfmetSig();
	const float &evt_pfmet_raw();
	const float &evt_pfsumet();
	const float &evt_pfsumet_raw();
	const float &gen_met();
	const float &gen_metPhi();
	const float &evt_NoHF_calomet();
	const float &evt_NoHF_calometPhi();
	const float &evt_NoHF_pfmet();
	const float &evt_NoHF_pfmetPhi();
	const float &evt_NoHF_pfmetPhi_raw();
	const float &evt_NoHF_pfmetSig();
	const float &evt_NoHF_pfmet_raw();
	const float &evt_NoHF_pfsumet();
	const float &evt_NoHF_pfsumet_raw();
	const float &evt_puppi_calomet();
	const float &evt_puppi_calometPhi();
	const float &evt_puppi_pfmet();
	const float &evt_puppi_pfmetPhi();
	const float &evt_puppi_pfmetPhi_raw();
	const float &evt_puppi_pfmetSig();
	const float &evt_puppi_pfmet_raw();
	const float &evt_puppi_pfsumet();
	const float &evt_puppi_pfsumet_raw();
	const float &sparm_filterEfficiency();
	const float &sparm_pdfScale();
	const float &sparm_pdfWeight1();
	const float &sparm_pdfWeight2();
	const float &sparm_weight();
	const float &sparm_xsec();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> >  &evt_bsp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_METToolbox_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_mc_gp_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_gp_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_patMatch_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4In();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4Out();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genjets_p4NoMuNoNu();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_prod_vtx();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_ll_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_lt_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isotracks_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_gfit_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_gfit_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_patMatch_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_pfp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_sta_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_sta_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_trk_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfcands_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_puppi_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_lead_chargecand_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_lead_neutrcand_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_position();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &vtxs_position();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &genps_lepdaughter_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &hlt_trigObjs_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &taus_pf_isocands_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &taus_pf_signalcands_p4();
	const vector<float> &pfjets_METToolbox_area();
	const vector<float> &pfjets_METToolbox_chargedEmE();
	const vector<float> &pfjets_METToolbox_chargedHadronE();
	const vector<float> &pfjets_METToolbox_electronE();
	const vector<float> &pfjets_METToolbox_hfEmE();
	const vector<float> &pfjets_METToolbox_hfHadronE();
	const vector<float> &pfjets_METToolbox_mass();
	const vector<float> &pfjets_METToolbox_muonE();
	const vector<float> &pfjets_METToolbox_neutralEmE();
	const vector<float> &pfjets_METToolbox_neutralHadronE();
	const vector<float> &pfjets_METToolbox_photonE();
	const vector<float> &evt_bs_covMatrix();
	const vector<float> &els_mc3dr();
	const vector<float> &els_mcdr();
	const vector<float> &mus_mc3dr();
	const vector<float> &mus_mcdr();
	const vector<float> &pfjets_mc3dr();
	const vector<float> &pfjets_mcdr();
	const vector<float> &pfjets_mc_emEnergy();
	const vector<float> &pfjets_mc_gpdr();
	const vector<float> &pfjets_mc_hadEnergy();
	const vector<float> &pfjets_mc_invEnergy();
	const vector<float> &pfjets_mc_otherEnergy();
	const vector<float> &photons_mc3dr();
	const vector<float> &photons_mcdr();
	const vector<float> &els_bs2d();
	const vector<float> &els_bs2derr();
	const vector<float> &els_bs3d();
	const vector<float> &els_bs3derr();
	const vector<float> &els_chi2();
	const vector<float> &els_ckf_chi2();
	const vector<float> &els_ckf_ndof();
	const vector<float> &els_clusterMaxDR();
	const vector<float> &els_clusterMaxDRDEta();
	const vector<float> &els_clusterMaxDRDPhi();
	const vector<float> &els_clusterMaxDRRawEnergy();
	const vector<float> &els_clustersMeanDEtaToSeed();
	const vector<float> &els_clustersMeanDPhiToSeed();
	const vector<float> &els_clustersMeanDRToSeed();
	const vector<float> &els_clustersMeanRawEnergy();
	const vector<float> &els_clustersRMSRawEnergy();
	const vector<float> &els_conv_vtx_prob();
	const vector<float> &els_d0();
	const vector<float> &els_d0Err();
	const vector<float> &els_d0corr();
	const vector<float> &els_d0corrPhi();
	const vector<float> &els_d0phiCov();
	const vector<float> &els_dEtaIn();
	const vector<float> &els_dEtaOut();
	const vector<float> &els_dPhiIn();
	const vector<float> &els_dPhiInPhiOut();
	const vector<float> &els_dPhiOut();
	const vector<float> &els_deltaEtaEleClusterTrackAtCalo();
	const vector<float> &els_deltaPhiEleClusterTrackAtCalo();
	const vector<float> &els_dxyPV();
	const vector<float> &els_dzPV();
	const vector<float> &els_e1x5();
	const vector<float> &els_e1x5_full5x5();
	const vector<float> &els_e2x5Max();
	const vector<float> &els_e2x5Max_full5x5();
	const vector<float> &els_e5x5();
	const vector<float> &els_e5x5_full5x5();
	const vector<float> &els_eOverPIn();
	const vector<float> &els_eOverPOut();
	const vector<float> &els_eSC();
	const vector<float> &els_eSCPresh();
	const vector<float> &els_eSCRaw();
	const vector<float> &els_eSeed();
	const vector<float> &els_eSeedOverPIn();
	const vector<float> &els_eSeedOverPOut();
	const vector<float> &els_ecalEnergy();
	const vector<float> &els_ecalEnergyError();
	const vector<float> &els_ecalIso();
	const vector<float> &els_ecalIso04();
	const vector<float> &els_ecalPFClusterIso();
	const vector<float> &els_etaErr();
	const vector<float> &els_etaSC();
	const vector<float> &els_etaSCwidth();
	const vector<float> &els_fbrem();
	const vector<float> &els_hOverE();
	const vector<float> &els_hOverEBC();
	const vector<float> &els_hcalDepth1OverEcal();
	const vector<float> &els_hcalDepth1TowerSumEt();
	const vector<float> &els_hcalDepth1TowerSumEt04();
	const vector<float> &els_hcalDepth2OverEcal();
	const vector<float> &els_hcalDepth2TowerSumEt();
	const vector<float> &els_hcalDepth2TowerSumEt04();
	const vector<float> &els_hcalIso();
	const vector<float> &els_hcalIso04();
	const vector<float> &els_hcalPFClusterIso();
	const vector<float> &els_ip2d();
	const vector<float> &els_ip2derr();
	const vector<float> &els_ip3d();
	const vector<float> &els_ip3derr();
	const vector<float> &els_mass();
	const vector<float> &els_mc_patMatch_dr();
	const vector<float> &els_miniIso_ch();
	const vector<float> &els_miniIso_db();
	const vector<float> &els_miniIso_em();
	const vector<float> &els_miniIso_nh();
	const vector<float> &els_miniIso_uncor();
	const vector<float> &els_mva();
	const vector<float> &els_ndof();
	const vector<float> &els_pfChargedHadronIso();
	const vector<float> &els_pfNeutralHadronIso();
	const vector<float> &els_pfPUIso();
	const vector<float> &els_pfPhotonIso();
	const vector<float> &els_phiErr();
	const vector<float> &els_phiSC();
	const vector<float> &els_phiSCwidth();
	const vector<float> &els_ptErr();
	const vector<float> &els_ptErrGsf();
	const vector<float> &els_r9();
	const vector<float> &els_r9_full5x5();
	const vector<float> &els_scIsEB();
	const vector<float> &els_scPreshowerEnergyPlane1();
	const vector<float> &els_scPreshowerEnergyPlane2();
	const vector<float> &els_scR();
	const vector<float> &els_scSeed2x5LeftRightAsym();
	const vector<float> &els_scSeed2x5TopBottomAsym();
	const vector<float> &els_scSeedCryEta();
	const vector<float> &els_scSeedCryIeta();
	const vector<float> &els_scSeedCryIphi();
	const vector<float> &els_scSeedCryIx();
	const vector<float> &els_scSeedCryIy();
	const vector<float> &els_scSeedCryPhi();
	const vector<float> &els_scSeedCryX();
	const vector<float> &els_scSeedCryY();
	const vector<float> &els_scSeedE2nd();
	const vector<float> &els_scSeedE2x5Bottom();
	const vector<float> &els_scSeedE2x5Left();
	const vector<float> &els_scSeedE2x5Right();
	const vector<float> &els_scSeedE2x5Top();
	const vector<float> &els_scSeedE3x3();
	const vector<float> &els_scSeedEBottom();
	const vector<float> &els_scSeedELeft();
	const vector<float> &els_scSeedERight();
	const vector<float> &els_scSeedETop();
	const vector<float> &els_scSeedEmax();
	const vector<float> &els_scSeedEta();
	const vector<float> &els_scSeedLeftRightAsym();
	const vector<float> &els_scSeedPhi();
	const vector<float> &els_scSeedSigmaIetaIphi();
	const vector<float> &els_scSeedSize();
	const vector<float> &els_scSeedTopBottomAsym();
	const vector<float> &els_sigmaEtaEta();
	const vector<float> &els_sigmaEtaEta_full5x5();
	const vector<float> &els_sigmaIEtaIEta();
	const vector<float> &els_sigmaIEtaIEta_full5x5();
	const vector<float> &els_sigmaIPhiIPhi();
	const vector<float> &els_sigmaIPhiIPhi_full5x5();
	const vector<float> &els_sigmaIphiIphi();
	const vector<float> &els_tkIso();
	const vector<float> &els_tkIso04();
	const vector<float> &els_trackMomentumError();
	const vector<float> &els_trkdr();
	const vector<float> &els_trkshFrac();
	const vector<float> &els_z0();
	const vector<float> &els_z0Err();
	const vector<float> &els_z0corr();
	const vector<float> &genps_charge();
	const vector<float> &genps_iso();
	const vector<float> &genps_mass();
	const vector<float> &genweights();
	const vector<float> &isotracks_dz();
	const vector<float> &isotracks_dzAssociatedPV();
	const vector<float> &isotracks_mass();
	const vector<float> &isotracks_puppiWeight();
	const vector<float> &isotracks_relIso();
	const vector<float> &mus_bs2d();
	const vector<float> &mus_bs2derr();
	const vector<float> &mus_bs3d();
	const vector<float> &mus_bs3derr();
	const vector<float> &mus_caloCompatibility();
	const vector<float> &mus_chi2();
	const vector<float> &mus_chi2LocalMomentum();
	const vector<float> &mus_chi2LocalPosition();
	const vector<float> &mus_d0();
	const vector<float> &mus_d0Err();
	const vector<float> &mus_d0corr();
	const vector<float> &mus_d0corrPhi();
	const vector<float> &mus_d0phiCov();
	const vector<float> &mus_dxyPV();
	const vector<float> &mus_dzPV();
	const vector<float> &mus_ecal_time();
	const vector<float> &mus_e_em();
	const vector<float> &mus_e_emS9();
	const vector<float> &mus_e_had();
	const vector<float> &mus_e_hadS9();
	const vector<float> &mus_e_ho();
	const vector<float> &mus_e_hoS9();
	const vector<float> &mus_emMax();
	const vector<float> &mus_emS25();
	const vector<float> &mus_etaErr();
	const vector<float> &mus_gfit_chi2();
	const vector<float> &mus_gfit_d0();
	const vector<float> &mus_gfit_d0Err();
	const vector<float> &mus_gfit_d0corr();
	const vector<float> &mus_gfit_d0corrPhi();
	const vector<float> &mus_gfit_d0phiCov();
	const vector<float> &mus_gfit_ndof();
	const vector<float> &mus_gfit_qoverp();
	const vector<float> &mus_gfit_qoverpError();
	const vector<float> &mus_gfit_z0();
	const vector<float> &mus_gfit_z0Err();
	const vector<float> &mus_gfit_z0corr();
	const vector<float> &mus_glbKink();
	const vector<float> &mus_glbTrackProbability();
	const vector<float> &mus_globalDeltaEtaPhi();
	const vector<float> &mus_hadMax();
	const vector<float> &mus_hcal_time();
	const vector<float> &mus_ip2d();
	const vector<float> &mus_ip2derr();
	const vector<float> &mus_ip3d();
	const vector<float> &mus_ip3derr();
	const vector<float> &mus_iso03_emEt();
	const vector<float> &mus_iso03_hadEt();
	const vector<float> &mus_iso03_hoEt();
	const vector<float> &mus_iso03_sumPt();
	const vector<float> &mus_iso05_emEt();
	const vector<float> &mus_iso05_hadEt();
	const vector<float> &mus_iso05_hoEt();
	const vector<float> &mus_iso05_sumPt();
	const vector<float> &mus_isoMeanDRR03_pf_ChargedHadronPt();
	const vector<float> &mus_isoMeanDRR03_pf_ChargedParticlePt();
	const vector<float> &mus_isoMeanDRR03_pf_NeutralHadronEt();
	const vector<float> &mus_isoMeanDRR03_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoMeanDRR03_pf_PUPt();
	const vector<float> &mus_isoMeanDRR03_pf_PhotonEt();
	const vector<float> &mus_isoMeanDRR03_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoMeanDRR04_pf_ChargedHadronPt();
	const vector<float> &mus_isoMeanDRR04_pf_ChargedParticlePt();
	const vector<float> &mus_isoMeanDRR04_pf_NeutralHadronEt();
	const vector<float> &mus_isoMeanDRR04_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoMeanDRR04_pf_PUPt();
	const vector<float> &mus_isoMeanDRR04_pf_PhotonEt();
	const vector<float> &mus_isoMeanDRR04_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoR03_pf_ChargedHadronPt();
	const vector<float> &mus_isoR03_pf_ChargedParticlePt();
	const vector<float> &mus_isoR03_pf_NeutralHadronEt();
	const vector<float> &mus_isoR03_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoR03_pf_PUPt();
	const vector<float> &mus_isoR03_pf_PhotonEt();
	const vector<float> &mus_isoR03_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoR04_pf_ChargedHadronPt();
	const vector<float> &mus_isoR04_pf_ChargedParticlePt();
	const vector<float> &mus_isoR04_pf_NeutralHadronEt();
	const vector<float> &mus_isoR04_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoR04_pf_PUPt();
	const vector<float> &mus_isoR04_pf_PhotonEt();
	const vector<float> &mus_isoR04_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoSumDRR03_pf_ChargedHadronPt();
	const vector<float> &mus_isoSumDRR03_pf_ChargedParticlePt();
	const vector<float> &mus_isoSumDRR03_pf_NeutralHadronEt();
	const vector<float> &mus_isoSumDRR03_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoSumDRR03_pf_PUPt();
	const vector<float> &mus_isoSumDRR03_pf_PhotonEt();
	const vector<float> &mus_isoSumDRR03_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoSumDRR04_pf_ChargedHadronPt();
	const vector<float> &mus_isoSumDRR04_pf_ChargedParticlePt();
	const vector<float> &mus_isoSumDRR04_pf_NeutralHadronEt();
	const vector<float> &mus_isoSumDRR04_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoSumDRR04_pf_PUPt();
	const vector<float> &mus_isoSumDRR04_pf_PhotonEt();
	const vector<float> &mus_isoSumDRR04_pf_PhotonEtHighThreshold();
	const vector<float> &mus_iso_ecalvetoDep();
	const vector<float> &mus_iso_hcalvetoDep();
	const vector<float> &mus_iso_hovetoDep();
	const vector<float> &mus_iso_trckvetoDep();
	const vector<float> &mus_localDistance();
	const vector<float> &mus_mass();
	const vector<float> &mus_mc_patMatch_dr();
	const vector<float> &mus_miniIso_ch();
	const vector<float> &mus_miniIso_db();
	const vector<float> &mus_miniIso_em();
	const vector<float> &mus_miniIso_nh();
	const vector<float> &mus_miniIso_uncor();
	const vector<float> &mus_ndof();
	const vector<float> &mus_phiErr();
	const vector<float> &mus_ptErr();
	const vector<float> &mus_qoverp();
	const vector<float> &mus_qoverpError();
	const vector<float> &mus_segmCompatibility();
	const vector<float> &mus_staRelChi2();
	const vector<float> &mus_sta_chi2();
	const vector<float> &mus_sta_d0();
	const vector<float> &mus_sta_d0Err();
	const vector<float> &mus_sta_d0corr();
	const vector<float> &mus_sta_d0corrPhi();
	const vector<float> &mus_sta_d0phiCov();
	const vector<float> &mus_sta_ndof();
	const vector<float> &mus_sta_qoverp();
	const vector<float> &mus_sta_qoverpError();
	const vector<float> &mus_sta_z0();
	const vector<float> &mus_sta_z0Err();
	const vector<float> &mus_sta_z0corr();
	const vector<float> &mus_timeAtIpInOut();
	const vector<float> &mus_timeAtIpInOutErr();
	const vector<float> &mus_timeAtIpOutIn();
	const vector<float> &mus_timeAtIpOutInErr();
	const vector<float> &mus_trkKink();
	const vector<float> &mus_trkRelChi2();
	const vector<float> &mus_vertexphi();
	const vector<float> &mus_z0();
	const vector<float> &mus_z0Err();
	const vector<float> &mus_z0corr();
	const vector<float> &pfcands_dz();
	const vector<float> &pfcands_dzAssociatedPV();
	const vector<float> &pfcands_mass();
	const vector<float> &pfcands_puppiWeight();
	const vector<float> &pfcands_puppiWeightNoLep();
	const vector<float> &pfjets_area();
	const vector<float> &pfjets_chargedEmE();
	const vector<float> &pfjets_chargedHadronE();
	const vector<float> &pfjets_electronE();
	const vector<float> &pfjets_hfEmE();
	const vector<float> &pfjets_hfHadronE();
	const vector<float> &pfjets_mass();
	const vector<float> &pfjets_muonE();
	const vector<float> &pfjets_neutralEmE();
	const vector<float> &pfjets_neutralHadronE();
	const vector<float> &pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag();
	const vector<float> &pfjets_photonE();
	const vector<float> &pfjets_pileupJetId();
	const vector<float> &pfjets_undoJEC();
	const vector<float> &pfjets_puppi_area();
	const vector<float> &pfjets_puppi_chargedEmE();
	const vector<float> &pfjets_puppi_chargedHadronE();
	const vector<float> &pfjets_puppi_electronE();
	const vector<float> &pfjets_puppi_hfEmE();
	const vector<float> &pfjets_puppi_hfHadronE();
	const vector<float> &pfjets_puppi_mass();
	const vector<float> &pfjets_puppi_muonE();
	const vector<float> &pfjets_puppi_neutralEmE();
	const vector<float> &pfjets_puppi_neutralHadronE();
	const vector<float> &pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag();
	const vector<float> &pfjets_puppi_photonE();
	const vector<float> &pfjets_puppi_pileupJetId();
	const vector<float> &pfjets_puppi_undoJEC();
	const vector<float> &taus_pf_mass();
	const vector<float> &photons_chargedHadronIso();
	const vector<float> &photons_clusterMaxDR();
	const vector<float> &photons_clusterMaxDRDEta();
	const vector<float> &photons_clusterMaxDRDPhi();
	const vector<float> &photons_clusterMaxDRRawEnergy();
	const vector<float> &photons_clustersMeanDEtaToSeed();
	const vector<float> &photons_clustersMeanDPhiToSeed();
	const vector<float> &photons_clustersMeanDRToSeed();
	const vector<float> &photons_clustersMeanRawEnergy();
	const vector<float> &photons_clustersRMSRawEnergy();
	const vector<float> &photons_e1x5();
	const vector<float> &photons_e2x5Max();
	const vector<float> &photons_e3x3();
	const vector<float> &photons_e5x5();
	const vector<float> &photons_eSC();
	const vector<float> &photons_eSCPresh();
	const vector<float> &photons_eSCRaw();
	const vector<float> &photons_ecalIso03();
	const vector<float> &photons_ecalIso04();
	const vector<float> &photons_ecalPFClusterIso();
	const vector<float> &photons_etaSC();
	const vector<float> &photons_full3x3_e3x3();
	const vector<float> &photons_full5x5_e1x5();
	const vector<float> &photons_full5x5_e2x5Max();
	const vector<float> &photons_full5x5_e5x5();
	const vector<float> &photons_full5x5_hOverE();
	const vector<float> &photons_full5x5_hOverEtowBC();
	const vector<float> &photons_full5x5_r9();
	const vector<float> &photons_full5x5_sigmaEtaEta();
	const vector<float> &photons_full5x5_sigmaIEtaIEta();
	const vector<float> &photons_hOverE();
	const vector<float> &photons_hOverEtowBC();
	const vector<float> &photons_hcalDepth1TowerSumEtBcConeDR03();
	const vector<float> &photons_hcalDepth1TowerSumEtBcConeDR04();
	const vector<float> &photons_hcalDepth2TowerSumEtBcConeDR03();
	const vector<float> &photons_hcalDepth2TowerSumEtBcConeDR04();
	const vector<float> &photons_hcalIso03();
	const vector<float> &photons_hcalIso04();
	const vector<float> &photons_hcalPFClusterIso();
	const vector<float> &photons_hcalTowerSumEtBcConeDR03();
	const vector<float> &photons_hcalTowerSumEtBcConeDR04();
	const vector<float> &photons_mass();
	const vector<float> &photons_neutralHadronIso();
	const vector<float> &photons_ntkIsoHollow03();
	const vector<float> &photons_ntkIsoHollow04();
	const vector<float> &photons_ntkIsoSolid03();
	const vector<float> &photons_ntkIsoSolid04();
	const vector<float> &photons_phiSC();
	const vector<float> &photons_photonIso();
	const vector<float> &photons_recoChargedHadronIso();
	const vector<float> &photons_recoNeutralHadronIso();
	const vector<float> &photons_recoPhotonIso();
	const vector<float> &photonsscEtaWidth();
	const vector<float> &photons_scIsEB();
	const vector<float> &photonsscPhiWidth();
	const vector<float> &photons_scPreshowerEnergyPlane1();
	const vector<float> &photons_scPreshowerEnergyPlane2();
	const vector<float> &photons_scR();
	const vector<float> &photons_scSeed2x5LeftRightAsym();
	const vector<float> &photons_scSeed2x5TopBottomAsym();
	const vector<float> &photonsscSeedCalibratedEnergy();
	const vector<float> &photons_scSeedCryEta();
	const vector<float> &photons_scSeedCryIeta();
	const vector<float> &photons_scSeedCryIphi();
	const vector<float> &photons_scSeedCryIx();
	const vector<float> &photons_scSeedCryIy();
	const vector<float> &photons_scSeedCryPhi();
	const vector<float> &photons_scSeedCryX();
	const vector<float> &photons_scSeedCryY();
	const vector<float> &photons_scSeedE2nd();
	const vector<float> &photons_scSeedE2x5Bottom();
	const vector<float> &photons_scSeedE2x5Left();
	const vector<float> &photons_scSeedE2x5Right();
	const vector<float> &photons_scSeedE2x5Top();
	const vector<float> &photons_scSeedE3x3();
	const vector<float> &photons_scSeedEBottom();
	const vector<float> &photons_scSeedELeft();
	const vector<float> &photons_scSeedERight();
	const vector<float> &photons_scSeedETop();
	const vector<float> &photons_scSeedEmax();
	const vector<float> &photons_scSeedEta();
	const vector<float> &photons_scSeedLeftRightAsym();
	const vector<float> &photons_scSeedPhi();
	const vector<float> &photonsscSeedRawEnergy();
	const vector<float> &photons_scSeedSigmaIetaIphi();
	const vector<float> &photonsscSeedSigmaIphiIphi();
	const vector<float> &photons_scSeedSize();
	const vector<float> &photons_scSeedTopBottomAsym();
	const vector<float> &photons_sigmaEtaEta();
	const vector<float> &photons_sigmaIEtaIEta();
	const vector<float> &photons_tkIsoHollow03();
	const vector<float> &photons_tkIsoHollow04();
	const vector<float> &photons_tkIsoSolid03();
	const vector<float> &photons_tkIsoSolid04();
	const vector<float> &puInfo_trueNumInteractions();
	const vector<float> &convs_chi2();
	const vector<float> &convs_dl();
	const vector<float> &convs_ndof();
	const vector<float> &sparm_values();
	const vector<float> &svs_anglePV();
	const vector<float> &svs_chi2();
	const vector<float> &svs_dist3Dsig();
	const vector<float> &svs_dist3Dval();
	const vector<float> &svs_distXYsig();
	const vector<float> &svs_distXYval();
	const vector<float> &svs_ndof();
	const vector<float> &svs_prob();
	const vector<float> &svs_xError();
	const vector<float> &svs_yError();
	const vector<float> &svs_zError();
	const vector<float> &ak8jets_area();
	const vector<float> &ak8jets_filteredMass();
	const vector<float> &ak8jets_mass();
	const vector<float> &ak8jets_minMass();
	const vector<float> &ak8jets_nJettinessTau1();
	const vector<float> &ak8jets_nJettinessTau2();
	const vector<float> &ak8jets_nJettinessTau3();
	const vector<float> &ak8jets_prunedMass();
	const vector<float> &ak8jets_softdropMass();
	const vector<float> &ak8jets_topMass();
	const vector<float> &ak8jets_trimmedMass();
	const vector<float> &ak8jets_undoJEC();
	const vector<float> &vtxs_chi2();
	const vector<float> &vtxs_ndof();
	const vector<float> &vtxs_score();
	const vector<float> &vtxs_xError();
	const vector<float> &vtxs_yError();
	const vector<float> &vtxs_zError();
	const vector<vector<float> > &els_clusterCalibEnergy();
	const vector<vector<float> > &els_clusterDEtaToCentroid();
	const vector<vector<float> > &els_clusterDEtaToSeed();
	const vector<vector<float> > &els_clusterDPhiToCentroid();
	const vector<vector<float> > &els_clusterDPhiToSeed();
	const vector<vector<float> > &els_clusterEta();
	const vector<vector<float> > &els_clusterPhi();
	const vector<vector<float> > &els_clusterRawEnergy();
	const vector<vector<float> > &els_psClusterEta();
	const vector<vector<float> > &els_psClusterPhi();
	const vector<vector<float> > &els_psClusterRawEnergy();
	const vector<vector<float> > &mus_stationShowerDeltaR();
	const vector<vector<float> > &mus_stationShowerSizeT();
	const vector<vector<float> > &pfjets_bDiscriminators();
	const vector<vector<float> > &pfjets_puppi_bDiscriminators();
	const vector<vector<float> > &taus_pf_IDs();
	const vector<vector<float> > &photons_clusterCalibEnergy();
	const vector<vector<float> > &photons_clusterDEtaToCentroid();
	const vector<vector<float> > &photons_clusterDEtaToSeed();
	const vector<vector<float> > &photons_clusterDPhiToCentroid();
	const vector<vector<float> > &photons_clusterDPhiToSeed();
	const vector<vector<float> > &photons_clusterEta();
	const vector<vector<float> > &photons_clusterPhi();
	const vector<vector<float> > &photons_clusterRawEnergy();
	const vector<vector<float> > &photons_psClusterEta();
	const vector<vector<float> > &photons_psClusterPhi();
	const vector<vector<float> > &photons_psClusterRawEnergy();
	const vector<vector<float> > &puInfo_instLumi();
	const vector<vector<float> > &vtxs_covMatrix();
	const int &evt_bsType();
	const int &evt_bunchCrossing();
	const int &evt_experimentType();
	const int &evt_isRealData();
	const int &evt_orbitNumber();
	const int &evt_storeNumber();
	const int &hcalnoise_GetRecHitCount();
	const int &hcalnoise_GetRecHitCount15();
	const int &hcalnoise_maxHPDHits();
	const int &hcalnoise_maxHPDNoOtherHits();
	const int &hcalnoise_maxRBXHits();
	const int &hcalnoise_maxZeros();
	const int &hcalnoise_noiseFilterStatus();
	const int &hcalnoise_noiseType();
	const int &hcalnoise_num10GeVHits();
	const int &hcalnoise_num25GeVHits();
	const int &hcalnoise_numFlatNoiseChannels();
	const int &hcalnoise_numIsolatedNoiseChannels();
	const int &hcalnoise_numNegativeNoiseChannels();
	const int &hcalnoise_numProblematicRBXs();
	const int &hcalnoise_numSpikeNoiseChannels();
	const int &hcalnoise_numTS4TS5NoiseChannels();
	const int &hcalnoise_numTriangleNoiseChannels();
	const int &hcalnoise_passHighLevelNoiseFilter();
	const int &hcalnoise_passLooseNoiseFilter();
	const int &hcalnoise_passTightNoiseFilter();
	const int &pdfinfo_id1();
	const int &pdfinfo_id2();
	const int &sparm_subProcessId();
	const vector<int> &pfjets_METToolbox_chargedHadronMultiplicity();
	const vector<int> &pfjets_METToolbox_chargedMultiplicity();
	const vector<int> &pfjets_METToolbox_electronMultiplicity();
	const vector<int> &pfjets_METToolbox_muonMultiplicity();
	const vector<int> &pfjets_METToolbox_neutralHadronMultiplicity();
	const vector<int> &pfjets_METToolbox_neutralMultiplicity();
	const vector<int> &pfjets_METToolbox_photonMultiplicity();
	const vector<int> &ak8jets_mc_id();
	const vector<int> &els_mc3_id();
	const vector<int> &els_mc3idx();
	const vector<int> &els_mc3_motherid();
	const vector<int> &els_mc3_motheridx();
	const vector<int> &els_mc_id();
	const vector<int> &els_mcidx();
	const vector<int> &els_mc_motherid();
	const vector<int> &mus_mc3_id();
	const vector<int> &mus_mc3idx();
	const vector<int> &mus_mc3_motherid();
	const vector<int> &mus_mc3_motheridx();
	const vector<int> &mus_mc_id();
	const vector<int> &mus_mcidx();
	const vector<int> &mus_mc_motherid();
	const vector<int> &pfjets_mc3_id();
	const vector<int> &pfjets_mc3idx();
	const vector<int> &pfjets_mc_gpidx();
	const vector<int> &pfjets_mc_id();
	const vector<int> &pfjets_mcidx();
	const vector<int> &pfjets_mc_motherid();
	const vector<int> &photons_mc3_id();
	const vector<int> &photons_mc3idx();
	const vector<int> &photons_mc3_motherid();
	const vector<int> &photons_mc3_motheridx();
	const vector<int> &photons_mc_id();
	const vector<int> &photons_mcidx();
	const vector<int> &photons_mc_motherid();
	const vector<int> &els_N_ECALClusters();
	const vector<int> &els_N_PSClusters();
	const vector<int> &els_category();
	const vector<int> &els_charge();
	const vector<int> &els_ckf_charge();
	const vector<int> &els_ckf_laywithmeas();
	const vector<int> &els_class();
	const vector<int> &els_exp_innerlayers();
	const vector<int> &els_exp_outerlayers();
	const vector<int> &els_fiduciality();
	const vector<int> &els_isEB();
	const vector<int> &els_isEcalDriven();
	const vector<int> &els_isTrackerDriven();
	const vector<int> &els_lostHits();
	const vector<int> &els_lost_pixelhits();
	const vector<int> &els_mc_patMatch_id();
	const vector<int> &els_nSeed();
	const vector<int> &els_nlayers();
	const vector<int> &els_nlayers3D();
	const vector<int> &els_nlayersLost();
	const vector<int> &els_sccharge();
	const vector<int> &els_trk_charge();
	const vector<int> &els_type();
	const vector<int> &els_validHits();
	const vector<int> &els_valid_pixelhits();
	const vector<int> &els_passLooseId();
	const vector<int> &els_passMediumId();
	const vector<int> &els_passTightId();
	const vector<int> &els_passVetoId();
	const vector<int> &genps_id();
	const vector<int> &genps_id_mother();
	const vector<int> &genps_id_simplegrandma();
	const vector<int> &genps_id_simplemother();
	const vector<int> &genps_idx_mother();
	const vector<int> &genps_idx_simplemother();
	const vector<int> &genps_status();
	const vector<int> &hyp_ll_charge();
	const vector<int> &hyp_ll_id();
	const vector<int> &hyp_ll_index();
	const vector<int> &hyp_lt_charge();
	const vector<int> &hyp_lt_id();
	const vector<int> &hyp_lt_index();
	const vector<int> &hyp_type();
	const vector<int> &isotracks_IdAssociatedPV();
	const vector<int> &isotracks_charge();
	const vector<int> &isotracks_particleId();
	const vector<int> &mus_algo();
	const vector<int> &mus_charge();
	const vector<int> &mus_ecal_rawId();
	const vector<int> &mus_exp_innerlayers();
	const vector<int> &mus_exp_outerlayers();
	const vector<int> &mus_gfit_algo();
	const vector<int> &mus_gfit_etaErr();
	const vector<int> &mus_gfit_exp_innerlayer();
	const vector<int> &mus_gfit_exp_outerlayer();
	const vector<int> &mus_gfit_lostHits();
	const vector<int> &mus_gfit_lostPixelHits();
	const vector<int> &mus_gfit_nlayers();
	const vector<int> &mus_gfit_nlayers3D();
	const vector<int> &mus_gfit_nlayersLost();
	const vector<int> &mus_gfit_phiErr();
	const vector<int> &mus_gfit_ptErr();
	const vector<int> &mus_gfit_qualityMask();
	const vector<int> &mus_gfit_trk_charge();
	const vector<int> &mus_gfit_validHits();
	const vector<int> &mus_gfit_validPixelHits();
	const vector<int> &mus_gfit_validSTAHits();
	const vector<int> &mus_gfit_validSiHits();
	const vector<int> &mus_goodmask();
	const vector<int> &mus_hcal_rawId();
	const vector<int> &mus_iso03_njets();
	const vector<int> &mus_iso03_ntrk();
	const vector<int> &mus_iso05_ntrk();
	const vector<int> &mus_lostHits();
	const vector<int> &mus_lostPixelHits();
	const vector<int> &mus_mc_patMatch_id();
	const vector<int> &mus_muonBestTrackType();
	const vector<int> &mus_nOverlaps();
	const vector<int> &mus_nlayers();
	const vector<int> &mus_nlayers3D();
	const vector<int> &mus_nlayersLost();
	const vector<int> &mus_nmatches();
	const vector<int> &mus_numberOfMatchedStations();
	const vector<int> &mus_overlap0();
	const vector<int> &mus_overlap1();
	const vector<int> &mus_pfcharge();
	const vector<int> &mus_pfidx();
	const vector<int> &mus_pfparticleId();
	const vector<int> &mus_pid_PFMuon();
	const vector<int> &mus_pid_TM2DCompatibilityLoose();
	const vector<int> &mus_pid_TM2DCompatibilityTight();
	const vector<int> &mus_pid_TMLastStationLoose();
	const vector<int> &mus_pid_TMLastStationTight();
	const vector<int> &mus_qualityMask();
	const vector<int> &mus_sta_algo();
	const vector<int> &mus_sta_etaErr();
	const vector<int> &mus_sta_exp_innerlayer();
	const vector<int> &mus_sta_exp_outerlayer();
	const vector<int> &mus_sta_lostHits();
	const vector<int> &mus_sta_lostPixelHits();
	const vector<int> &mus_sta_nlayers();
	const vector<int> &mus_sta_nlayers3D();
	const vector<int> &mus_sta_nlayersLost();
	const vector<int> &mus_sta_phiErr();
	const vector<int> &mus_sta_ptErr();
	const vector<int> &mus_sta_qualityMask();
	const vector<int> &mus_sta_trk_charge();
	const vector<int> &mus_sta_validHits();
	const vector<int> &mus_sta_validPixelHits();
	const vector<int> &mus_timeDirection();
	const vector<int> &mus_timeNumStationsUsed();
	const vector<int> &mus_trk_charge();
	const vector<int> &mus_type();
	const vector<int> &mus_validHits();
	const vector<int> &mus_validPixelHits();
	const vector<int> &pfcands_IdAssociatedPV();
	const vector<int> &pfcands_charge();
	const vector<int> &pfcands_particleId();
	const vector<int> &pfjets_chargedHadronMultiplicity();
	const vector<int> &pfjets_chargedMultiplicity();
	const vector<int> &pfjets_electronMultiplicity();
	const vector<int> &pfjets_hadronFlavour();
	const vector<int> &pfjets_muonMultiplicity();
	const vector<int> &pfjets_neutralHadronMultiplicity();
	const vector<int> &pfjets_neutralMultiplicity();
	const vector<int> &pfjets_partonFlavour();
	const vector<int> &pfjets_photonMultiplicity();
	const vector<int> &pfjets_puppi_chargedHadronMultiplicity();
	const vector<int> &pfjets_puppi_chargedMultiplicity();
	const vector<int> &pfjets_puppi_electronMultiplicity();
	const vector<int> &pfjets_puppi_hadronFlavour();
	const vector<int> &pfjets_puppi_muonMultiplicity();
	const vector<int> &pfjets_puppi_neutralHadronMultiplicity();
	const vector<int> &pfjets_puppi_neutralMultiplicity();
	const vector<int> &pfjets_puppi_partonFlavour();
	const vector<int> &pfjets_puppi_photonMultiplicity();
	const vector<int> &taus_pf_charge();
	const vector<int> &photons_N_ECALClusters();
	const vector<int> &photons_N_PSClusters();
	const vector<int> &photons_fiduciality();
	const vector<int> &photons_isEB();
	const vector<int> &photons_photonID_loose();
	const vector<int> &photons_photonID_tight();
	const vector<int> &puInfo_bunchCrossing();
	const vector<int> &puInfo_nPUvertices();
	const vector<int> &convs_algo();
	const vector<int> &convs_isConverted();
	const vector<int> &convs_quality();
	const vector<int> &svs_nTrks();
	const vector<int> &ak8jets_nSubJets();
	const vector<int> &ak8jets_partonFlavour();
	const vector<int> &vtxs_isFake();
	const vector<int> &vtxs_isValid();
	const vector<vector<int> > &pfjets_METToolbox_pfcandIndicies();
	const vector<vector<int> > &els_clusterInDynDPhi();
	const vector<vector<int> > &els_clusterInMustache();
	const vector<vector<int> > &els_PFCand_idx();
	const vector<vector<int> > &genps_lepdaughter_id();
	const vector<vector<int> > &genps_lepdaughter_idx();
	const vector<vector<int> > &hlt_trigObjs_id();
	const vector<vector<int> > &mus_nStationCorrelatedHits();
	const vector<vector<int> > &mus_nStationHits();
	const vector<vector<int> > &pfjets_pfcandIndicies();
	const vector<vector<int> > &pfjets_puppi_pfcandIndicies();
	const vector<vector<int> > &photons_clusterInDynDPhi();
	const vector<vector<int> > &photons_clusterInMustache();
	const vector<vector<int> > &photons_PFCand_idx();
	const vector<vector<int> > &convs_nHitsBeforeVtx();
	const vector<vector<int> > &convs_tkalgo();
	const vector<vector<int> > &convs_tkidx();
	const vector<vector<int> > &ak8jets_pfcandIndicies();
	const vector<unsigned char> &isotracks_fromPV();
	const vector<unsigned char> &isotracks_pvAssociationQuality();
	const vector<unsigned char> &pfcands_fromPV();
	const vector<unsigned char> &pfcands_pvAssociationQuality();
	const unsigned int &els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version();
	const unsigned int &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_version();
	const unsigned int &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_version();
	const unsigned int &els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_L1sL1DoubleEG137_version();
	const unsigned int &els_HLT_Ele17_Ele8_LeadingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_Mass50_LeadingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_Mass50_TrailingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_TrailingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_version();
	const unsigned int &els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele20_SC4_Mass50_LeadingLeg_version();
	const unsigned int &els_HLT_Ele20_SC4_Mass50_TrailingLeg_version();
	const unsigned int &els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_version();
	const unsigned int &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_version();
	const unsigned int &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_version();
	const unsigned int &els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_version();
	const unsigned int &els_HLT_Ele25WP60_Ele8_Mass55_version();
	const unsigned int &els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_version();
	const unsigned int &els_HLT_Ele25WP60_SC4_Mass55_version();
	const unsigned int &els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_version();
	const unsigned int &els_HLT_Ele27_WP80_version();
	const unsigned int &els_HLT_Ele32_SC17_Mass50_LeadingLeg_version();
	const unsigned int &els_HLT_Ele32_SC17_Mass50_TrailingLeg_version();
	const unsigned int &els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_version();
	const unsigned int &els_HLT_Ele5_SC5_JPsi_Mass2to4p5_version();
	const unsigned int &els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Mu17_Ele8_TrailingLeg_version();
	const unsigned int &els_HLT_Mu17_Ele8_version();
	const unsigned int &els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version();
	const unsigned int &els_HLT_Mu8_Ele17_version();
	const unsigned int &els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version();
	const unsigned int &els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version();
	const unsigned int &evt_nels();
	const unsigned int &evt_detectorStatus();
	const unsigned int &evt_lumiBlock();
	const unsigned int &evt_run();
	const unsigned int &evt_ngenjetsNoMuNoNu();
	const unsigned int &genps_signalProcessID();
	const unsigned int &mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_version();
	const unsigned int &mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_version();
	const unsigned int &mus_HLT_IsoMu24_eta2p1_version();
	const unsigned int &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_version();
	const unsigned int &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_version();
	const unsigned int &mus_HLT_Mu17_Ele8_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_Ele8_version();
	const unsigned int &mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_version();
	const unsigned int &mus_HLT_Mu17_Mu8_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_Mu8_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_Mu8_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_version();
	const unsigned int &mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_version();
	const unsigned int &mus_HLT_Mu8_Ele17_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu8_Ele17_version();
	const unsigned int &mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_version();
	const unsigned int &mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_version();
	const unsigned int &evt_nphotons();
	const unsigned int &evt_nvtxs();
	const vector<unsigned int> &els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_L1sL1DoubleEG137();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_Mass50_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_Mass50_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele20_SC4_Mass50_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele20_SC4_Mass50_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL();
	const vector<unsigned int> &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele25WP60_Ele8_Mass55();
	const vector<unsigned int> &els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele25WP60_SC4_Mass55();
	const vector<unsigned int> &els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele27_WP80();
	const vector<unsigned int> &els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22();
	const vector<unsigned int> &els_HLT_Ele32_SC17_Mass50_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele32_SC17_Mass50_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele5_SC5_JPsi_Mass2to4p5();
	const vector<unsigned int> &els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Mu17_Ele8();
	const vector<unsigned int> &els_HLT_Mu17_Ele8_TrailingLeg();
	const vector<unsigned int> &els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg();
	const vector<unsigned int> &els_HLT_Mu8_Ele17();
	const vector<unsigned int> &els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg();
	const vector<unsigned int> &els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg();
	const vector<unsigned int> &hlt_l1prescales();
	const vector<unsigned int> &hlt_prescales();
	const vector<unsigned int> &mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg();
	const vector<unsigned int> &mus_HLT_IsoMu24_eta2p1();
	const vector<unsigned int> &mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1();
	const vector<unsigned int> &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu17_Ele8();
	const vector<unsigned int> &mus_HLT_Mu17_Ele8_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu8_Ele17();
	const vector<unsigned int> &mus_HLT_Mu8_Ele17_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg();
	const ULong64_t &evt_event();
	const vector<ULong64_t> &evt_timestamp();
	const unsigned long long &evt_nEvts();
	const unsigned long long &evt_nEvts_effective();
	const float &evt_filt_eff();
	bool passHLTTrigger(TString trigName);
	float passTauID(TString idName, unsigned int tauIndx);
	float getbtagvalue(TString bDiscriminatorName, unsigned int jetIndx, bool use_puppi = false);

  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern CMS3 cms3;
#endif

namespace tas {
	const vector<string> &genweightsID();
	const TBits &hlt_bits();
	const vector<TString> &evt_CMS3tag();
	const vector<TString> &evt_dataset();
	const vector<TString> &hlt_trigNames();
	const vector<TString> &pfjets_bDiscriminatorNames();
	const vector<TString> &pfjets_puppi_bDiscriminatorNames();
	const vector<TString> &taus_pf_IDnames();
	const vector<TString> &sparm_comment();
	const vector<TString> &sparm_names();
	const vector<vector<TString> > &hlt_trigObjs_filters();
	const bool &hcalnoise_HasBadRBXRechitR45Loose();
	const bool &hcalnoise_HasBadRBXRechitR45Tight();
	const bool &hcalnoise_HasBadRBXTS4TS5();
	const bool &hcalnoise_goodJetFoundInLowBVRegion();
	const bool &evt_cscTightHaloId();
	const bool &evt_hbheFilter();
	const bool &filt_cscBeamHalo();
	const bool &filt_ecalLaser();
	const bool &filt_ecalTP();
	const bool &filt_eeBadSc();
	const bool &filt_goodVertices();
	const bool &filt_hbheNoise();
	const bool &filt_hcalLaser();
	const bool &filt_metfilter();
	const bool &filt_trackingFailure();
	const bool &filt_trkPOGFilters();
	const bool &filt_trkPOG_logErrorTooManyClusters();
	const bool &filt_trkPOG_manystripclus53X();
	const bool &filt_trkPOG_toomanystripclus53X();
	const vector<bool> &els_conv_vtx_flag();
	const vector<bool> &els_isGsfCtfScPixChargeConsistent();
	const vector<bool> &els_passingMvaPreselection();
	const vector<bool> &els_passingPflowPreselection();
	const vector<bool> &genps_fromHardProcessBeforeFSR();
	const vector<bool> &genps_fromHardProcessDecayed();
	const vector<bool> &genps_fromHardProcessFinalState();
	const vector<bool> &genps_isDirectHardProcessTauDecayProductFinalState();
	const vector<bool> &genps_isDirectPromptTauDecayProductFinalState();
	const vector<bool> &genps_isHardProcess();
	const vector<bool> &genps_isLastCopy();
	const vector<bool> &genps_isLastCopyBeforeFSR();
	const vector<bool> &genps_isMostlyLikePythia6Status3();
	const vector<bool> &genps_isPromptDecayed();
	const vector<bool> &genps_isPromptFinalState();
	const vector<bool> &mus_isRPCMuon();
	const vector<bool> &mus_tightMatch();
	const vector<bool> &mus_updatedSta();
	const vector<bool> &pfcands_isGlobalMuon();
	const vector<bool> &pfcands_isStandAloneMuon();
	const vector<bool> &photons_haspixelSeed();
	const vector<bool> &photons_passElectronVeto();
	const vector<vector<bool> > &hlt_trigObjs_passLast();
	const float &evt_METToolbox_pfmet();
	const float &evt_METToolbox_pfmetPhi();
	const float &evt_METToolbox_pfmetPhi_raw();
	const float &evt_METToolbox_pfmet_raw();
	const float &evt_METToolboxNoHF_pfmet();
	const float &evt_METToolboxNoHF_pfmetPhi();
	const float &evt_METToolboxNoHF_pfmetPhi_raw();
	const float &evt_METToolboxNoHF_pfmet_raw();
	const float &evt_bs_Xwidth();
	const float &evt_bs_XwidthErr();
	const float &evt_bs_Ywidth();
	const float &evt_bs_YwidthErr();
	const float &evt_bs_dxdz();
	const float &evt_bs_dxdzErr();
	const float &evt_bs_dydz();
	const float &evt_bs_dydzErr();
	const float &evt_bs_sigmaZ();
	const float &evt_bs_sigmaZErr();
	const float &evt_bs_xErr();
	const float &evt_bs_yErr();
	const float &evt_bs_zErr();
	const float &evt_bField();
	const float &evt_fixgrid_all_rho();
	const float &evt_fixgridfastjet_allcalo_rho();
	const float &evt_fixgridfastjet_all_rho();
	const float &evt_fixgridfastjetMETTools_all_rho();
	const float &evt_fixgridfastjet_centralcalo_rho();
	const float &evt_fixgridfastjet_centralchargedpileup_rho();
	const float &evt_fixgridfastjet_centralneutral_rho();
	const float &evt_kfactor();
	const float &evt_scale1fb();
	const float &evt_xsec_excl();
	const float &evt_xsec_incl();
	const float &genps_alphaQCD();
	const float &genps_pthat();
	const float &genps_qScale();
	const float &genps_weight();
	const float &gen_sumEt();
	const float &hcalnoise_GetRecHitEnergy();
	const float &hcalnoise_GetRecHitEnergy15();
	const float &hcalnoise_GetTotalCalibCharge();
	const float &hcalnoise_NegativeNoiseSumE();
	const float &hcalnoise_NegativeNoiseSumEt();
	const float &hcalnoise_TS4TS5NoiseSumE();
	const float &hcalnoise_TS4TS5NoiseSumEt();
	const float &hcalnoise_eventChargeFraction();
	const float &hcalnoise_eventEMEnergy();
	const float &hcalnoise_eventEMFraction();
	const float &hcalnoise_eventHadEnergy();
	const float &hcalnoise_eventTrackEnergy();
	const float &hcalnoise_flatNoiseSumE();
	const float &hcalnoise_flatNoiseSumEt();
	const float &hcalnoise_isolatedNoiseSumE();
	const float &hcalnoise_isolatedNoiseSumEt();
	const float &hcalnoise_max10GeVHitTime();
	const float &hcalnoise_max25GeVHitTime();
	const float &hcalnoise_maxE10TS();
	const float &hcalnoise_maxE2Over10TS();
	const float &hcalnoise_maxE2TS();
	const float &hcalnoise_min10GeVHitTime();
	const float &hcalnoise_min25GeVHitTime();
	const float &hcalnoise_minE10TS();
	const float &hcalnoise_minE2Over10TS();
	const float &hcalnoise_minE2TS();
	const float &hcalnoise_minHPDEMF();
	const float &hcalnoise_minRBXEMF();
	const float &hcalnoise_rms10GeVHitTime();
	const float &hcalnoise_rms25GeVHitTime();
	const float &hcalnoise_spikeNoiseSumE();
	const float &hcalnoise_spikeNoiseSumEt();
	const float &hcalnoise_triangleNoiseSumE();
	const float &hcalnoise_triangleNoiseSumEt();
	const float &pdfinfo_pdf1();
	const float &pdfinfo_pdf2();
	const float &pdfinfo_scale();
	const float &pdfinfo_x1();
	const float &pdfinfo_x2();
	const float &evt_fixgrid_rho_all();
	const float &evt_fixgrid_rho_ctr();
	const float &evt_fixgrid_rho_fwd();
	const float &evt_calomet();
	const float &evt_calometPhi();
	const float &evt_pfmet();
	const float &evt_pfmetPhi();
	const float &evt_pfmetPhi_raw();
	const float &evt_pfmetSig();
	const float &evt_pfmet_raw();
	const float &evt_pfsumet();
	const float &evt_pfsumet_raw();
	const float &gen_met();
	const float &gen_metPhi();
	const float &evt_NoHF_calomet();
	const float &evt_NoHF_calometPhi();
	const float &evt_NoHF_pfmet();
	const float &evt_NoHF_pfmetPhi();
	const float &evt_NoHF_pfmetPhi_raw();
	const float &evt_NoHF_pfmetSig();
	const float &evt_NoHF_pfmet_raw();
	const float &evt_NoHF_pfsumet();
	const float &evt_NoHF_pfsumet_raw();
	const float &evt_puppi_calomet();
	const float &evt_puppi_calometPhi();
	const float &evt_puppi_pfmet();
	const float &evt_puppi_pfmetPhi();
	const float &evt_puppi_pfmetPhi_raw();
	const float &evt_puppi_pfmetSig();
	const float &evt_puppi_pfmet_raw();
	const float &evt_puppi_pfsumet();
	const float &evt_puppi_pfsumet_raw();
	const float &sparm_filterEfficiency();
	const float &sparm_pdfScale();
	const float &sparm_pdfWeight1();
	const float &sparm_pdfWeight2();
	const float &sparm_weight();
	const float &sparm_xsec();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> >  &evt_bsp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_METToolbox_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_mc_gp_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_gp_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_motherp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_patMatch_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4In();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4Out();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genjets_p4NoMuNoNu();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_prod_vtx();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_ll_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_lt_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isotracks_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_gfit_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_gfit_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_patMatch_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_pfp4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_sta_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_sta_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_trk_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_vertex_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfcands_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_puppi_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_lead_chargecand_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_lead_neutrcand_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_position();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &vtxs_position();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &genps_lepdaughter_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &hlt_trigObjs_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &taus_pf_isocands_p4();
	const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &taus_pf_signalcands_p4();
	const vector<float> &pfjets_METToolbox_area();
	const vector<float> &pfjets_METToolbox_chargedEmE();
	const vector<float> &pfjets_METToolbox_chargedHadronE();
	const vector<float> &pfjets_METToolbox_electronE();
	const vector<float> &pfjets_METToolbox_hfEmE();
	const vector<float> &pfjets_METToolbox_hfHadronE();
	const vector<float> &pfjets_METToolbox_mass();
	const vector<float> &pfjets_METToolbox_muonE();
	const vector<float> &pfjets_METToolbox_neutralEmE();
	const vector<float> &pfjets_METToolbox_neutralHadronE();
	const vector<float> &pfjets_METToolbox_photonE();
	const vector<float> &evt_bs_covMatrix();
	const vector<float> &els_mc3dr();
	const vector<float> &els_mcdr();
	const vector<float> &mus_mc3dr();
	const vector<float> &mus_mcdr();
	const vector<float> &pfjets_mc3dr();
	const vector<float> &pfjets_mcdr();
	const vector<float> &pfjets_mc_emEnergy();
	const vector<float> &pfjets_mc_gpdr();
	const vector<float> &pfjets_mc_hadEnergy();
	const vector<float> &pfjets_mc_invEnergy();
	const vector<float> &pfjets_mc_otherEnergy();
	const vector<float> &photons_mc3dr();
	const vector<float> &photons_mcdr();
	const vector<float> &els_bs2d();
	const vector<float> &els_bs2derr();
	const vector<float> &els_bs3d();
	const vector<float> &els_bs3derr();
	const vector<float> &els_chi2();
	const vector<float> &els_ckf_chi2();
	const vector<float> &els_ckf_ndof();
	const vector<float> &els_clusterMaxDR();
	const vector<float> &els_clusterMaxDRDEta();
	const vector<float> &els_clusterMaxDRDPhi();
	const vector<float> &els_clusterMaxDRRawEnergy();
	const vector<float> &els_clustersMeanDEtaToSeed();
	const vector<float> &els_clustersMeanDPhiToSeed();
	const vector<float> &els_clustersMeanDRToSeed();
	const vector<float> &els_clustersMeanRawEnergy();
	const vector<float> &els_clustersRMSRawEnergy();
	const vector<float> &els_conv_vtx_prob();
	const vector<float> &els_d0();
	const vector<float> &els_d0Err();
	const vector<float> &els_d0corr();
	const vector<float> &els_d0corrPhi();
	const vector<float> &els_d0phiCov();
	const vector<float> &els_dEtaIn();
	const vector<float> &els_dEtaOut();
	const vector<float> &els_dPhiIn();
	const vector<float> &els_dPhiInPhiOut();
	const vector<float> &els_dPhiOut();
	const vector<float> &els_deltaEtaEleClusterTrackAtCalo();
	const vector<float> &els_deltaPhiEleClusterTrackAtCalo();
	const vector<float> &els_dxyPV();
	const vector<float> &els_dzPV();
	const vector<float> &els_e1x5();
	const vector<float> &els_e1x5_full5x5();
	const vector<float> &els_e2x5Max();
	const vector<float> &els_e2x5Max_full5x5();
	const vector<float> &els_e5x5();
	const vector<float> &els_e5x5_full5x5();
	const vector<float> &els_eOverPIn();
	const vector<float> &els_eOverPOut();
	const vector<float> &els_eSC();
	const vector<float> &els_eSCPresh();
	const vector<float> &els_eSCRaw();
	const vector<float> &els_eSeed();
	const vector<float> &els_eSeedOverPIn();
	const vector<float> &els_eSeedOverPOut();
	const vector<float> &els_ecalEnergy();
	const vector<float> &els_ecalEnergyError();
	const vector<float> &els_ecalIso();
	const vector<float> &els_ecalIso04();
	const vector<float> &els_ecalPFClusterIso();
	const vector<float> &els_etaErr();
	const vector<float> &els_etaSC();
	const vector<float> &els_etaSCwidth();
	const vector<float> &els_fbrem();
	const vector<float> &els_hOverE();
	const vector<float> &els_hOverEBC();
	const vector<float> &els_hcalDepth1OverEcal();
	const vector<float> &els_hcalDepth1TowerSumEt();
	const vector<float> &els_hcalDepth1TowerSumEt04();
	const vector<float> &els_hcalDepth2OverEcal();
	const vector<float> &els_hcalDepth2TowerSumEt();
	const vector<float> &els_hcalDepth2TowerSumEt04();
	const vector<float> &els_hcalIso();
	const vector<float> &els_hcalIso04();
	const vector<float> &els_hcalPFClusterIso();
	const vector<float> &els_ip2d();
	const vector<float> &els_ip2derr();
	const vector<float> &els_ip3d();
	const vector<float> &els_ip3derr();
	const vector<float> &els_mass();
	const vector<float> &els_mc_patMatch_dr();
	const vector<float> &els_miniIso_ch();
	const vector<float> &els_miniIso_db();
	const vector<float> &els_miniIso_em();
	const vector<float> &els_miniIso_nh();
	const vector<float> &els_miniIso_uncor();
	const vector<float> &els_mva();
	const vector<float> &els_ndof();
	const vector<float> &els_pfChargedHadronIso();
	const vector<float> &els_pfNeutralHadronIso();
	const vector<float> &els_pfPUIso();
	const vector<float> &els_pfPhotonIso();
	const vector<float> &els_phiErr();
	const vector<float> &els_phiSC();
	const vector<float> &els_phiSCwidth();
	const vector<float> &els_ptErr();
	const vector<float> &els_ptErrGsf();
	const vector<float> &els_r9();
	const vector<float> &els_r9_full5x5();
	const vector<float> &els_scIsEB();
	const vector<float> &els_scPreshowerEnergyPlane1();
	const vector<float> &els_scPreshowerEnergyPlane2();
	const vector<float> &els_scR();
	const vector<float> &els_scSeed2x5LeftRightAsym();
	const vector<float> &els_scSeed2x5TopBottomAsym();
	const vector<float> &els_scSeedCryEta();
	const vector<float> &els_scSeedCryIeta();
	const vector<float> &els_scSeedCryIphi();
	const vector<float> &els_scSeedCryIx();
	const vector<float> &els_scSeedCryIy();
	const vector<float> &els_scSeedCryPhi();
	const vector<float> &els_scSeedCryX();
	const vector<float> &els_scSeedCryY();
	const vector<float> &els_scSeedE2nd();
	const vector<float> &els_scSeedE2x5Bottom();
	const vector<float> &els_scSeedE2x5Left();
	const vector<float> &els_scSeedE2x5Right();
	const vector<float> &els_scSeedE2x5Top();
	const vector<float> &els_scSeedE3x3();
	const vector<float> &els_scSeedEBottom();
	const vector<float> &els_scSeedELeft();
	const vector<float> &els_scSeedERight();
	const vector<float> &els_scSeedETop();
	const vector<float> &els_scSeedEmax();
	const vector<float> &els_scSeedEta();
	const vector<float> &els_scSeedLeftRightAsym();
	const vector<float> &els_scSeedPhi();
	const vector<float> &els_scSeedSigmaIetaIphi();
	const vector<float> &els_scSeedSize();
	const vector<float> &els_scSeedTopBottomAsym();
	const vector<float> &els_sigmaEtaEta();
	const vector<float> &els_sigmaEtaEta_full5x5();
	const vector<float> &els_sigmaIEtaIEta();
	const vector<float> &els_sigmaIEtaIEta_full5x5();
	const vector<float> &els_sigmaIPhiIPhi();
	const vector<float> &els_sigmaIPhiIPhi_full5x5();
	const vector<float> &els_sigmaIphiIphi();
	const vector<float> &els_tkIso();
	const vector<float> &els_tkIso04();
	const vector<float> &els_trackMomentumError();
	const vector<float> &els_trkdr();
	const vector<float> &els_trkshFrac();
	const vector<float> &els_z0();
	const vector<float> &els_z0Err();
	const vector<float> &els_z0corr();
	const vector<float> &genps_charge();
	const vector<float> &genps_iso();
	const vector<float> &genps_mass();
	const vector<float> &genweights();
	const vector<float> &isotracks_dz();
	const vector<float> &isotracks_dzAssociatedPV();
	const vector<float> &isotracks_mass();
	const vector<float> &isotracks_puppiWeight();
	const vector<float> &isotracks_relIso();
	const vector<float> &mus_bs2d();
	const vector<float> &mus_bs2derr();
	const vector<float> &mus_bs3d();
	const vector<float> &mus_bs3derr();
	const vector<float> &mus_caloCompatibility();
	const vector<float> &mus_chi2();
	const vector<float> &mus_chi2LocalMomentum();
	const vector<float> &mus_chi2LocalPosition();
	const vector<float> &mus_d0();
	const vector<float> &mus_d0Err();
	const vector<float> &mus_d0corr();
	const vector<float> &mus_d0corrPhi();
	const vector<float> &mus_d0phiCov();
	const vector<float> &mus_dxyPV();
	const vector<float> &mus_dzPV();
	const vector<float> &mus_ecal_time();
	const vector<float> &mus_e_em();
	const vector<float> &mus_e_emS9();
	const vector<float> &mus_e_had();
	const vector<float> &mus_e_hadS9();
	const vector<float> &mus_e_ho();
	const vector<float> &mus_e_hoS9();
	const vector<float> &mus_emMax();
	const vector<float> &mus_emS25();
	const vector<float> &mus_etaErr();
	const vector<float> &mus_gfit_chi2();
	const vector<float> &mus_gfit_d0();
	const vector<float> &mus_gfit_d0Err();
	const vector<float> &mus_gfit_d0corr();
	const vector<float> &mus_gfit_d0corrPhi();
	const vector<float> &mus_gfit_d0phiCov();
	const vector<float> &mus_gfit_ndof();
	const vector<float> &mus_gfit_qoverp();
	const vector<float> &mus_gfit_qoverpError();
	const vector<float> &mus_gfit_z0();
	const vector<float> &mus_gfit_z0Err();
	const vector<float> &mus_gfit_z0corr();
	const vector<float> &mus_glbKink();
	const vector<float> &mus_glbTrackProbability();
	const vector<float> &mus_globalDeltaEtaPhi();
	const vector<float> &mus_hadMax();
	const vector<float> &mus_hcal_time();
	const vector<float> &mus_ip2d();
	const vector<float> &mus_ip2derr();
	const vector<float> &mus_ip3d();
	const vector<float> &mus_ip3derr();
	const vector<float> &mus_iso03_emEt();
	const vector<float> &mus_iso03_hadEt();
	const vector<float> &mus_iso03_hoEt();
	const vector<float> &mus_iso03_sumPt();
	const vector<float> &mus_iso05_emEt();
	const vector<float> &mus_iso05_hadEt();
	const vector<float> &mus_iso05_hoEt();
	const vector<float> &mus_iso05_sumPt();
	const vector<float> &mus_isoMeanDRR03_pf_ChargedHadronPt();
	const vector<float> &mus_isoMeanDRR03_pf_ChargedParticlePt();
	const vector<float> &mus_isoMeanDRR03_pf_NeutralHadronEt();
	const vector<float> &mus_isoMeanDRR03_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoMeanDRR03_pf_PUPt();
	const vector<float> &mus_isoMeanDRR03_pf_PhotonEt();
	const vector<float> &mus_isoMeanDRR03_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoMeanDRR04_pf_ChargedHadronPt();
	const vector<float> &mus_isoMeanDRR04_pf_ChargedParticlePt();
	const vector<float> &mus_isoMeanDRR04_pf_NeutralHadronEt();
	const vector<float> &mus_isoMeanDRR04_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoMeanDRR04_pf_PUPt();
	const vector<float> &mus_isoMeanDRR04_pf_PhotonEt();
	const vector<float> &mus_isoMeanDRR04_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoR03_pf_ChargedHadronPt();
	const vector<float> &mus_isoR03_pf_ChargedParticlePt();
	const vector<float> &mus_isoR03_pf_NeutralHadronEt();
	const vector<float> &mus_isoR03_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoR03_pf_PUPt();
	const vector<float> &mus_isoR03_pf_PhotonEt();
	const vector<float> &mus_isoR03_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoR04_pf_ChargedHadronPt();
	const vector<float> &mus_isoR04_pf_ChargedParticlePt();
	const vector<float> &mus_isoR04_pf_NeutralHadronEt();
	const vector<float> &mus_isoR04_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoR04_pf_PUPt();
	const vector<float> &mus_isoR04_pf_PhotonEt();
	const vector<float> &mus_isoR04_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoSumDRR03_pf_ChargedHadronPt();
	const vector<float> &mus_isoSumDRR03_pf_ChargedParticlePt();
	const vector<float> &mus_isoSumDRR03_pf_NeutralHadronEt();
	const vector<float> &mus_isoSumDRR03_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoSumDRR03_pf_PUPt();
	const vector<float> &mus_isoSumDRR03_pf_PhotonEt();
	const vector<float> &mus_isoSumDRR03_pf_PhotonEtHighThreshold();
	const vector<float> &mus_isoSumDRR04_pf_ChargedHadronPt();
	const vector<float> &mus_isoSumDRR04_pf_ChargedParticlePt();
	const vector<float> &mus_isoSumDRR04_pf_NeutralHadronEt();
	const vector<float> &mus_isoSumDRR04_pf_NeutralHadronEtHighThreshold();
	const vector<float> &mus_isoSumDRR04_pf_PUPt();
	const vector<float> &mus_isoSumDRR04_pf_PhotonEt();
	const vector<float> &mus_isoSumDRR04_pf_PhotonEtHighThreshold();
	const vector<float> &mus_iso_ecalvetoDep();
	const vector<float> &mus_iso_hcalvetoDep();
	const vector<float> &mus_iso_hovetoDep();
	const vector<float> &mus_iso_trckvetoDep();
	const vector<float> &mus_localDistance();
	const vector<float> &mus_mass();
	const vector<float> &mus_mc_patMatch_dr();
	const vector<float> &mus_miniIso_ch();
	const vector<float> &mus_miniIso_db();
	const vector<float> &mus_miniIso_em();
	const vector<float> &mus_miniIso_nh();
	const vector<float> &mus_miniIso_uncor();
	const vector<float> &mus_ndof();
	const vector<float> &mus_phiErr();
	const vector<float> &mus_ptErr();
	const vector<float> &mus_qoverp();
	const vector<float> &mus_qoverpError();
	const vector<float> &mus_segmCompatibility();
	const vector<float> &mus_staRelChi2();
	const vector<float> &mus_sta_chi2();
	const vector<float> &mus_sta_d0();
	const vector<float> &mus_sta_d0Err();
	const vector<float> &mus_sta_d0corr();
	const vector<float> &mus_sta_d0corrPhi();
	const vector<float> &mus_sta_d0phiCov();
	const vector<float> &mus_sta_ndof();
	const vector<float> &mus_sta_qoverp();
	const vector<float> &mus_sta_qoverpError();
	const vector<float> &mus_sta_z0();
	const vector<float> &mus_sta_z0Err();
	const vector<float> &mus_sta_z0corr();
	const vector<float> &mus_timeAtIpInOut();
	const vector<float> &mus_timeAtIpInOutErr();
	const vector<float> &mus_timeAtIpOutIn();
	const vector<float> &mus_timeAtIpOutInErr();
	const vector<float> &mus_trkKink();
	const vector<float> &mus_trkRelChi2();
	const vector<float> &mus_vertexphi();
	const vector<float> &mus_z0();
	const vector<float> &mus_z0Err();
	const vector<float> &mus_z0corr();
	const vector<float> &pfcands_dz();
	const vector<float> &pfcands_dzAssociatedPV();
	const vector<float> &pfcands_mass();
	const vector<float> &pfcands_puppiWeight();
	const vector<float> &pfcands_puppiWeightNoLep();
	const vector<float> &pfjets_area();
	const vector<float> &pfjets_chargedEmE();
	const vector<float> &pfjets_chargedHadronE();
	const vector<float> &pfjets_electronE();
	const vector<float> &pfjets_hfEmE();
	const vector<float> &pfjets_hfHadronE();
	const vector<float> &pfjets_mass();
	const vector<float> &pfjets_muonE();
	const vector<float> &pfjets_neutralEmE();
	const vector<float> &pfjets_neutralHadronE();
	const vector<float> &pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag();
	const vector<float> &pfjets_photonE();
	const vector<float> &pfjets_pileupJetId();
	const vector<float> &pfjets_undoJEC();
	const vector<float> &pfjets_puppi_area();
	const vector<float> &pfjets_puppi_chargedEmE();
	const vector<float> &pfjets_puppi_chargedHadronE();
	const vector<float> &pfjets_puppi_electronE();
	const vector<float> &pfjets_puppi_hfEmE();
	const vector<float> &pfjets_puppi_hfHadronE();
	const vector<float> &pfjets_puppi_mass();
	const vector<float> &pfjets_puppi_muonE();
	const vector<float> &pfjets_puppi_neutralEmE();
	const vector<float> &pfjets_puppi_neutralHadronE();
	const vector<float> &pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag();
	const vector<float> &pfjets_puppi_photonE();
	const vector<float> &pfjets_puppi_pileupJetId();
	const vector<float> &pfjets_puppi_undoJEC();
	const vector<float> &taus_pf_mass();
	const vector<float> &photons_chargedHadronIso();
	const vector<float> &photons_clusterMaxDR();
	const vector<float> &photons_clusterMaxDRDEta();
	const vector<float> &photons_clusterMaxDRDPhi();
	const vector<float> &photons_clusterMaxDRRawEnergy();
	const vector<float> &photons_clustersMeanDEtaToSeed();
	const vector<float> &photons_clustersMeanDPhiToSeed();
	const vector<float> &photons_clustersMeanDRToSeed();
	const vector<float> &photons_clustersMeanRawEnergy();
	const vector<float> &photons_clustersRMSRawEnergy();
	const vector<float> &photons_e1x5();
	const vector<float> &photons_e2x5Max();
	const vector<float> &photons_e3x3();
	const vector<float> &photons_e5x5();
	const vector<float> &photons_eSC();
	const vector<float> &photons_eSCPresh();
	const vector<float> &photons_eSCRaw();
	const vector<float> &photons_ecalIso03();
	const vector<float> &photons_ecalIso04();
	const vector<float> &photons_ecalPFClusterIso();
	const vector<float> &photons_etaSC();
	const vector<float> &photons_full3x3_e3x3();
	const vector<float> &photons_full5x5_e1x5();
	const vector<float> &photons_full5x5_e2x5Max();
	const vector<float> &photons_full5x5_e5x5();
	const vector<float> &photons_full5x5_hOverE();
	const vector<float> &photons_full5x5_hOverEtowBC();
	const vector<float> &photons_full5x5_r9();
	const vector<float> &photons_full5x5_sigmaEtaEta();
	const vector<float> &photons_full5x5_sigmaIEtaIEta();
	const vector<float> &photons_hOverE();
	const vector<float> &photons_hOverEtowBC();
	const vector<float> &photons_hcalDepth1TowerSumEtBcConeDR03();
	const vector<float> &photons_hcalDepth1TowerSumEtBcConeDR04();
	const vector<float> &photons_hcalDepth2TowerSumEtBcConeDR03();
	const vector<float> &photons_hcalDepth2TowerSumEtBcConeDR04();
	const vector<float> &photons_hcalIso03();
	const vector<float> &photons_hcalIso04();
	const vector<float> &photons_hcalPFClusterIso();
	const vector<float> &photons_hcalTowerSumEtBcConeDR03();
	const vector<float> &photons_hcalTowerSumEtBcConeDR04();
	const vector<float> &photons_mass();
	const vector<float> &photons_neutralHadronIso();
	const vector<float> &photons_ntkIsoHollow03();
	const vector<float> &photons_ntkIsoHollow04();
	const vector<float> &photons_ntkIsoSolid03();
	const vector<float> &photons_ntkIsoSolid04();
	const vector<float> &photons_phiSC();
	const vector<float> &photons_photonIso();
	const vector<float> &photons_recoChargedHadronIso();
	const vector<float> &photons_recoNeutralHadronIso();
	const vector<float> &photons_recoPhotonIso();
	const vector<float> &photonsscEtaWidth();
	const vector<float> &photons_scIsEB();
	const vector<float> &photonsscPhiWidth();
	const vector<float> &photons_scPreshowerEnergyPlane1();
	const vector<float> &photons_scPreshowerEnergyPlane2();
	const vector<float> &photons_scR();
	const vector<float> &photons_scSeed2x5LeftRightAsym();
	const vector<float> &photons_scSeed2x5TopBottomAsym();
	const vector<float> &photonsscSeedCalibratedEnergy();
	const vector<float> &photons_scSeedCryEta();
	const vector<float> &photons_scSeedCryIeta();
	const vector<float> &photons_scSeedCryIphi();
	const vector<float> &photons_scSeedCryIx();
	const vector<float> &photons_scSeedCryIy();
	const vector<float> &photons_scSeedCryPhi();
	const vector<float> &photons_scSeedCryX();
	const vector<float> &photons_scSeedCryY();
	const vector<float> &photons_scSeedE2nd();
	const vector<float> &photons_scSeedE2x5Bottom();
	const vector<float> &photons_scSeedE2x5Left();
	const vector<float> &photons_scSeedE2x5Right();
	const vector<float> &photons_scSeedE2x5Top();
	const vector<float> &photons_scSeedE3x3();
	const vector<float> &photons_scSeedEBottom();
	const vector<float> &photons_scSeedELeft();
	const vector<float> &photons_scSeedERight();
	const vector<float> &photons_scSeedETop();
	const vector<float> &photons_scSeedEmax();
	const vector<float> &photons_scSeedEta();
	const vector<float> &photons_scSeedLeftRightAsym();
	const vector<float> &photons_scSeedPhi();
	const vector<float> &photonsscSeedRawEnergy();
	const vector<float> &photons_scSeedSigmaIetaIphi();
	const vector<float> &photonsscSeedSigmaIphiIphi();
	const vector<float> &photons_scSeedSize();
	const vector<float> &photons_scSeedTopBottomAsym();
	const vector<float> &photons_sigmaEtaEta();
	const vector<float> &photons_sigmaIEtaIEta();
	const vector<float> &photons_tkIsoHollow03();
	const vector<float> &photons_tkIsoHollow04();
	const vector<float> &photons_tkIsoSolid03();
	const vector<float> &photons_tkIsoSolid04();
	const vector<float> &puInfo_trueNumInteractions();
	const vector<float> &convs_chi2();
	const vector<float> &convs_dl();
	const vector<float> &convs_ndof();
	const vector<float> &sparm_values();
	const vector<float> &svs_anglePV();
	const vector<float> &svs_chi2();
	const vector<float> &svs_dist3Dsig();
	const vector<float> &svs_dist3Dval();
	const vector<float> &svs_distXYsig();
	const vector<float> &svs_distXYval();
	const vector<float> &svs_ndof();
	const vector<float> &svs_prob();
	const vector<float> &svs_xError();
	const vector<float> &svs_yError();
	const vector<float> &svs_zError();
	const vector<float> &ak8jets_area();
	const vector<float> &ak8jets_filteredMass();
	const vector<float> &ak8jets_mass();
	const vector<float> &ak8jets_minMass();
	const vector<float> &ak8jets_nJettinessTau1();
	const vector<float> &ak8jets_nJettinessTau2();
	const vector<float> &ak8jets_nJettinessTau3();
	const vector<float> &ak8jets_prunedMass();
	const vector<float> &ak8jets_softdropMass();
	const vector<float> &ak8jets_topMass();
	const vector<float> &ak8jets_trimmedMass();
	const vector<float> &ak8jets_undoJEC();
	const vector<float> &vtxs_chi2();
	const vector<float> &vtxs_ndof();
	const vector<float> &vtxs_score();
	const vector<float> &vtxs_xError();
	const vector<float> &vtxs_yError();
	const vector<float> &vtxs_zError();
	const vector<vector<float> > &els_clusterCalibEnergy();
	const vector<vector<float> > &els_clusterDEtaToCentroid();
	const vector<vector<float> > &els_clusterDEtaToSeed();
	const vector<vector<float> > &els_clusterDPhiToCentroid();
	const vector<vector<float> > &els_clusterDPhiToSeed();
	const vector<vector<float> > &els_clusterEta();
	const vector<vector<float> > &els_clusterPhi();
	const vector<vector<float> > &els_clusterRawEnergy();
	const vector<vector<float> > &els_psClusterEta();
	const vector<vector<float> > &els_psClusterPhi();
	const vector<vector<float> > &els_psClusterRawEnergy();
	const vector<vector<float> > &mus_stationShowerDeltaR();
	const vector<vector<float> > &mus_stationShowerSizeT();
	const vector<vector<float> > &pfjets_bDiscriminators();
	const vector<vector<float> > &pfjets_puppi_bDiscriminators();
	const vector<vector<float> > &taus_pf_IDs();
	const vector<vector<float> > &photons_clusterCalibEnergy();
	const vector<vector<float> > &photons_clusterDEtaToCentroid();
	const vector<vector<float> > &photons_clusterDEtaToSeed();
	const vector<vector<float> > &photons_clusterDPhiToCentroid();
	const vector<vector<float> > &photons_clusterDPhiToSeed();
	const vector<vector<float> > &photons_clusterEta();
	const vector<vector<float> > &photons_clusterPhi();
	const vector<vector<float> > &photons_clusterRawEnergy();
	const vector<vector<float> > &photons_psClusterEta();
	const vector<vector<float> > &photons_psClusterPhi();
	const vector<vector<float> > &photons_psClusterRawEnergy();
	const vector<vector<float> > &puInfo_instLumi();
	const vector<vector<float> > &vtxs_covMatrix();
	const int &evt_bsType();
	const int &evt_bunchCrossing();
	const int &evt_experimentType();
	const int &evt_isRealData();
	const int &evt_orbitNumber();
	const int &evt_storeNumber();
	const int &hcalnoise_GetRecHitCount();
	const int &hcalnoise_GetRecHitCount15();
	const int &hcalnoise_maxHPDHits();
	const int &hcalnoise_maxHPDNoOtherHits();
	const int &hcalnoise_maxRBXHits();
	const int &hcalnoise_maxZeros();
	const int &hcalnoise_noiseFilterStatus();
	const int &hcalnoise_noiseType();
	const int &hcalnoise_num10GeVHits();
	const int &hcalnoise_num25GeVHits();
	const int &hcalnoise_numFlatNoiseChannels();
	const int &hcalnoise_numIsolatedNoiseChannels();
	const int &hcalnoise_numNegativeNoiseChannels();
	const int &hcalnoise_numProblematicRBXs();
	const int &hcalnoise_numSpikeNoiseChannels();
	const int &hcalnoise_numTS4TS5NoiseChannels();
	const int &hcalnoise_numTriangleNoiseChannels();
	const int &hcalnoise_passHighLevelNoiseFilter();
	const int &hcalnoise_passLooseNoiseFilter();
	const int &hcalnoise_passTightNoiseFilter();
	const int &pdfinfo_id1();
	const int &pdfinfo_id2();
	const int &sparm_subProcessId();
	const vector<int> &pfjets_METToolbox_chargedHadronMultiplicity();
	const vector<int> &pfjets_METToolbox_chargedMultiplicity();
	const vector<int> &pfjets_METToolbox_electronMultiplicity();
	const vector<int> &pfjets_METToolbox_muonMultiplicity();
	const vector<int> &pfjets_METToolbox_neutralHadronMultiplicity();
	const vector<int> &pfjets_METToolbox_neutralMultiplicity();
	const vector<int> &pfjets_METToolbox_photonMultiplicity();
	const vector<int> &ak8jets_mc_id();
	const vector<int> &els_mc3_id();
	const vector<int> &els_mc3idx();
	const vector<int> &els_mc3_motherid();
	const vector<int> &els_mc3_motheridx();
	const vector<int> &els_mc_id();
	const vector<int> &els_mcidx();
	const vector<int> &els_mc_motherid();
	const vector<int> &mus_mc3_id();
	const vector<int> &mus_mc3idx();
	const vector<int> &mus_mc3_motherid();
	const vector<int> &mus_mc3_motheridx();
	const vector<int> &mus_mc_id();
	const vector<int> &mus_mcidx();
	const vector<int> &mus_mc_motherid();
	const vector<int> &pfjets_mc3_id();
	const vector<int> &pfjets_mc3idx();
	const vector<int> &pfjets_mc_gpidx();
	const vector<int> &pfjets_mc_id();
	const vector<int> &pfjets_mcidx();
	const vector<int> &pfjets_mc_motherid();
	const vector<int> &photons_mc3_id();
	const vector<int> &photons_mc3idx();
	const vector<int> &photons_mc3_motherid();
	const vector<int> &photons_mc3_motheridx();
	const vector<int> &photons_mc_id();
	const vector<int> &photons_mcidx();
	const vector<int> &photons_mc_motherid();
	const vector<int> &els_N_ECALClusters();
	const vector<int> &els_N_PSClusters();
	const vector<int> &els_category();
	const vector<int> &els_charge();
	const vector<int> &els_ckf_charge();
	const vector<int> &els_ckf_laywithmeas();
	const vector<int> &els_class();
	const vector<int> &els_exp_innerlayers();
	const vector<int> &els_exp_outerlayers();
	const vector<int> &els_fiduciality();
	const vector<int> &els_isEB();
	const vector<int> &els_isEcalDriven();
	const vector<int> &els_isTrackerDriven();
	const vector<int> &els_lostHits();
	const vector<int> &els_lost_pixelhits();
	const vector<int> &els_mc_patMatch_id();
	const vector<int> &els_nSeed();
	const vector<int> &els_nlayers();
	const vector<int> &els_nlayers3D();
	const vector<int> &els_nlayersLost();
	const vector<int> &els_sccharge();
	const vector<int> &els_trk_charge();
	const vector<int> &els_type();
	const vector<int> &els_validHits();
	const vector<int> &els_valid_pixelhits();
	const vector<int> &els_passLooseId();
	const vector<int> &els_passMediumId();
	const vector<int> &els_passTightId();
	const vector<int> &els_passVetoId();
	const vector<int> &genps_id();
	const vector<int> &genps_id_mother();
	const vector<int> &genps_id_simplegrandma();
	const vector<int> &genps_id_simplemother();
	const vector<int> &genps_idx_mother();
	const vector<int> &genps_idx_simplemother();
	const vector<int> &genps_status();
	const vector<int> &hyp_ll_charge();
	const vector<int> &hyp_ll_id();
	const vector<int> &hyp_ll_index();
	const vector<int> &hyp_lt_charge();
	const vector<int> &hyp_lt_id();
	const vector<int> &hyp_lt_index();
	const vector<int> &hyp_type();
	const vector<int> &isotracks_IdAssociatedPV();
	const vector<int> &isotracks_charge();
	const vector<int> &isotracks_particleId();
	const vector<int> &mus_algo();
	const vector<int> &mus_charge();
	const vector<int> &mus_ecal_rawId();
	const vector<int> &mus_exp_innerlayers();
	const vector<int> &mus_exp_outerlayers();
	const vector<int> &mus_gfit_algo();
	const vector<int> &mus_gfit_etaErr();
	const vector<int> &mus_gfit_exp_innerlayer();
	const vector<int> &mus_gfit_exp_outerlayer();
	const vector<int> &mus_gfit_lostHits();
	const vector<int> &mus_gfit_lostPixelHits();
	const vector<int> &mus_gfit_nlayers();
	const vector<int> &mus_gfit_nlayers3D();
	const vector<int> &mus_gfit_nlayersLost();
	const vector<int> &mus_gfit_phiErr();
	const vector<int> &mus_gfit_ptErr();
	const vector<int> &mus_gfit_qualityMask();
	const vector<int> &mus_gfit_trk_charge();
	const vector<int> &mus_gfit_validHits();
	const vector<int> &mus_gfit_validPixelHits();
	const vector<int> &mus_gfit_validSTAHits();
	const vector<int> &mus_gfit_validSiHits();
	const vector<int> &mus_goodmask();
	const vector<int> &mus_hcal_rawId();
	const vector<int> &mus_iso03_njets();
	const vector<int> &mus_iso03_ntrk();
	const vector<int> &mus_iso05_ntrk();
	const vector<int> &mus_lostHits();
	const vector<int> &mus_lostPixelHits();
	const vector<int> &mus_mc_patMatch_id();
	const vector<int> &mus_muonBestTrackType();
	const vector<int> &mus_nOverlaps();
	const vector<int> &mus_nlayers();
	const vector<int> &mus_nlayers3D();
	const vector<int> &mus_nlayersLost();
	const vector<int> &mus_nmatches();
	const vector<int> &mus_numberOfMatchedStations();
	const vector<int> &mus_overlap0();
	const vector<int> &mus_overlap1();
	const vector<int> &mus_pfcharge();
	const vector<int> &mus_pfidx();
	const vector<int> &mus_pfparticleId();
	const vector<int> &mus_pid_PFMuon();
	const vector<int> &mus_pid_TM2DCompatibilityLoose();
	const vector<int> &mus_pid_TM2DCompatibilityTight();
	const vector<int> &mus_pid_TMLastStationLoose();
	const vector<int> &mus_pid_TMLastStationTight();
	const vector<int> &mus_qualityMask();
	const vector<int> &mus_sta_algo();
	const vector<int> &mus_sta_etaErr();
	const vector<int> &mus_sta_exp_innerlayer();
	const vector<int> &mus_sta_exp_outerlayer();
	const vector<int> &mus_sta_lostHits();
	const vector<int> &mus_sta_lostPixelHits();
	const vector<int> &mus_sta_nlayers();
	const vector<int> &mus_sta_nlayers3D();
	const vector<int> &mus_sta_nlayersLost();
	const vector<int> &mus_sta_phiErr();
	const vector<int> &mus_sta_ptErr();
	const vector<int> &mus_sta_qualityMask();
	const vector<int> &mus_sta_trk_charge();
	const vector<int> &mus_sta_validHits();
	const vector<int> &mus_sta_validPixelHits();
	const vector<int> &mus_timeDirection();
	const vector<int> &mus_timeNumStationsUsed();
	const vector<int> &mus_trk_charge();
	const vector<int> &mus_type();
	const vector<int> &mus_validHits();
	const vector<int> &mus_validPixelHits();
	const vector<int> &pfcands_IdAssociatedPV();
	const vector<int> &pfcands_charge();
	const vector<int> &pfcands_particleId();
	const vector<int> &pfjets_chargedHadronMultiplicity();
	const vector<int> &pfjets_chargedMultiplicity();
	const vector<int> &pfjets_electronMultiplicity();
	const vector<int> &pfjets_hadronFlavour();
	const vector<int> &pfjets_muonMultiplicity();
	const vector<int> &pfjets_neutralHadronMultiplicity();
	const vector<int> &pfjets_neutralMultiplicity();
	const vector<int> &pfjets_partonFlavour();
	const vector<int> &pfjets_photonMultiplicity();
	const vector<int> &pfjets_puppi_chargedHadronMultiplicity();
	const vector<int> &pfjets_puppi_chargedMultiplicity();
	const vector<int> &pfjets_puppi_electronMultiplicity();
	const vector<int> &pfjets_puppi_hadronFlavour();
	const vector<int> &pfjets_puppi_muonMultiplicity();
	const vector<int> &pfjets_puppi_neutralHadronMultiplicity();
	const vector<int> &pfjets_puppi_neutralMultiplicity();
	const vector<int> &pfjets_puppi_partonFlavour();
	const vector<int> &pfjets_puppi_photonMultiplicity();
	const vector<int> &taus_pf_charge();
	const vector<int> &photons_N_ECALClusters();
	const vector<int> &photons_N_PSClusters();
	const vector<int> &photons_fiduciality();
	const vector<int> &photons_isEB();
	const vector<int> &photons_photonID_loose();
	const vector<int> &photons_photonID_tight();
	const vector<int> &puInfo_bunchCrossing();
	const vector<int> &puInfo_nPUvertices();
	const vector<int> &convs_algo();
	const vector<int> &convs_isConverted();
	const vector<int> &convs_quality();
	const vector<int> &svs_nTrks();
	const vector<int> &ak8jets_nSubJets();
	const vector<int> &ak8jets_partonFlavour();
	const vector<int> &vtxs_isFake();
	const vector<int> &vtxs_isValid();
	const vector<vector<int> > &pfjets_METToolbox_pfcandIndicies();
	const vector<vector<int> > &els_clusterInDynDPhi();
	const vector<vector<int> > &els_clusterInMustache();
	const vector<vector<int> > &els_PFCand_idx();
	const vector<vector<int> > &genps_lepdaughter_id();
	const vector<vector<int> > &genps_lepdaughter_idx();
	const vector<vector<int> > &hlt_trigObjs_id();
	const vector<vector<int> > &mus_nStationCorrelatedHits();
	const vector<vector<int> > &mus_nStationHits();
	const vector<vector<int> > &pfjets_pfcandIndicies();
	const vector<vector<int> > &pfjets_puppi_pfcandIndicies();
	const vector<vector<int> > &photons_clusterInDynDPhi();
	const vector<vector<int> > &photons_clusterInMustache();
	const vector<vector<int> > &photons_PFCand_idx();
	const vector<vector<int> > &convs_nHitsBeforeVtx();
	const vector<vector<int> > &convs_tkalgo();
	const vector<vector<int> > &convs_tkidx();
	const vector<vector<int> > &ak8jets_pfcandIndicies();
	const vector<unsigned char> &isotracks_fromPV();
	const vector<unsigned char> &isotracks_pvAssociationQuality();
	const vector<unsigned char> &pfcands_fromPV();
	const vector<unsigned char> &pfcands_pvAssociationQuality();
	const unsigned int &els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version();
	const unsigned int &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg_version();
	const unsigned int &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg_version();
	const unsigned int &els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_L1sL1DoubleEG137_version();
	const unsigned int &els_HLT_Ele17_Ele8_LeadingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_Mass50_LeadingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_Mass50_TrailingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_TrailingLeg_version();
	const unsigned int &els_HLT_Ele17_Ele8_version();
	const unsigned int &els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele20_SC4_Mass50_LeadingLeg_version();
	const unsigned int &els_HLT_Ele20_SC4_Mass50_TrailingLeg_version();
	const unsigned int &els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg_version();
	const unsigned int &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg_version();
	const unsigned int &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_version();
	const unsigned int &els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg_version();
	const unsigned int &els_HLT_Ele25WP60_Ele8_Mass55_version();
	const unsigned int &els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg_version();
	const unsigned int &els_HLT_Ele25WP60_SC4_Mass55_version();
	const unsigned int &els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22_version();
	const unsigned int &els_HLT_Ele27_WP80_version();
	const unsigned int &els_HLT_Ele32_SC17_Mass50_LeadingLeg_version();
	const unsigned int &els_HLT_Ele32_SC17_Mass50_TrailingLeg_version();
	const unsigned int &els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg_version();
	const unsigned int &els_HLT_Ele5_SC5_JPsi_Mass2to4p5_version();
	const unsigned int &els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg_version();
	const unsigned int &els_HLT_Mu17_Ele8_TrailingLeg_version();
	const unsigned int &els_HLT_Mu17_Ele8_version();
	const unsigned int &els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version();
	const unsigned int &els_HLT_Mu8_Ele17_version();
	const unsigned int &els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg_version();
	const unsigned int &els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg_version();
	const unsigned int &evt_nels();
	const unsigned int &evt_detectorStatus();
	const unsigned int &evt_lumiBlock();
	const unsigned int &evt_run();
	const unsigned int &evt_ngenjetsNoMuNoNu();
	const unsigned int &genps_signalProcessID();
	const unsigned int &mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg_version();
	const unsigned int &mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1_version();
	const unsigned int &mus_HLT_IsoMu24_eta2p1_version();
	const unsigned int &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg_version();
	const unsigned int &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg_version();
	const unsigned int &mus_HLT_Mu17_Ele8_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_Ele8_version();
	const unsigned int &mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen_version();
	const unsigned int &mus_HLT_Mu17_Mu8_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_Mu8_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_Mu8_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_TkMu8_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_version();
	const unsigned int &mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg_version();
	const unsigned int &mus_HLT_Mu8_Ele17_TrailingLeg_version();
	const unsigned int &mus_HLT_Mu8_Ele17_version();
	const unsigned int &mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg_version();
	const unsigned int &mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg_version();
	const unsigned int &evt_nphotons();
	const unsigned int &evt_nvtxs();
	const vector<unsigned int> &els_HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p54PF_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV0p5PF_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele12_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_L1sL1DoubleEG137();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_Mass50_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_Mass50_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele17_Ele8_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele18_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele18_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele20_SC4_Mass50_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele20_SC4_Mass50_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele23_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL();
	const vector<unsigned int> &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele25WP60_Ele8_Mass55();
	const vector<unsigned int> &els_HLT_Ele25WP60_Ele8_Mass55_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele25WP60_SC4_Mass55();
	const vector<unsigned int> &els_HLT_Ele25WP60_SC4_Mass55_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele27_WP80();
	const vector<unsigned int> &els_HLT_Ele27_WP80_L1sL1SingleEG20ORL1SingleEG22();
	const vector<unsigned int> &els_HLT_Ele32_SC17_Mass50_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele32_SC17_Mass50_TrailingLeg();
	const vector<unsigned int> &els_HLT_Ele33_CaloIdL_TrackIdL_IsoVL_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele33_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Ele5_SC5_JPsi_Mass2to4p5();
	const vector<unsigned int> &els_HLT_Ele5_SC5_JPsi_Mass2to4p5_LeadingLeg();
	const vector<unsigned int> &els_HLT_Ele8_CaloIdM_TrackIdM_PFJet30_ElectronLeg();
	const vector<unsigned int> &els_HLT_Mu17_Ele8();
	const vector<unsigned int> &els_HLT_Mu17_Ele8_TrailingLeg();
	const vector<unsigned int> &els_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_ElectronLeg();
	const vector<unsigned int> &els_HLT_Mu8_Ele17();
	const vector<unsigned int> &els_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_ElectronLeg();
	const vector<unsigned int> &els_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_ElectronLeg();
	const vector<unsigned int> &hlt_l1prescales();
	const vector<unsigned int> &hlt_prescales();
	const vector<unsigned int> &mus_HLT_DoubleMu8_Mass8_PFHT300_MuonLeg();
	const vector<unsigned int> &mus_HLT_IsoMu24_eta2p1();
	const vector<unsigned int> &mus_HLT_IsoMu24_eta2p1_L1sMu16Eta2p1();
	const vector<unsigned int> &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p54PF_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu10_CentralPFJet30_BTagCSV0p5PF_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu17_Ele8();
	const vector<unsigned int> &mus_HLT_Mu17_Ele8_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8_L1sL1DoubleMu10MuOpen();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_Mu8_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TkMu8_TrailingLegTrkFiltered();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_LeadingLeg();
	const vector<unsigned int> &mus_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu8_Ele17();
	const vector<unsigned int> &mus_HLT_Mu8_Ele17_TrailingLeg();
	const vector<unsigned int> &mus_HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_MuonLeg();
	const vector<unsigned int> &mus_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_MuonLeg();
	const ULong64_t &evt_event();
	const vector<ULong64_t> &evt_timestamp();
	const unsigned long long &evt_nEvts();
	const unsigned long long &evt_nEvts_effective();
	const float &evt_filt_eff();
	bool passHLTTrigger(TString trigName);
	float passTauID(TString idName, unsigned int tauIndx);
	float getbtagvalue(TString bDiscriminatorName, unsigned int jetIndx, bool use_puppi = false);
}
#endif
